<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Alex.Yao&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://nsoft.vip/"/>
  <updated>2019-03-14T01:08:49.352Z</updated>
  <id>http://nsoft.vip/</id>
  
  <author>
    <name>Alex.Yao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Visual Studio Code 图床工具插件你值得拥有</title>
    <link href="http://nsoft.vip/2019/03/14/190314-%E5%9B%BE%E5%BA%8A%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%BB%8D/"/>
    <id>http://nsoft.vip/2019/03/14/190314-图床工具介绍/</id>
    <published>2019-03-14T13:05:58.000Z</published>
    <updated>2019-03-14T01:08:49.352Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://static.nsoft.vip/20190307194339.jpg" alt="20190307194339.jpg"></p><a id="more"></a><h2 id="vscode简介"><a href="#vscode简介" class="headerlink" title="vscode简介"></a>vscode简介</h2><p>Visual Studio Code（以下简称vscode）微软发布的一款开源免费跨平台的轻量且强大的代码编辑器，支持Windows，OS X和Linux。内置JavaScript、TypeScript和Node.js支持，而且拥有丰富的插件生态系统，可通过安装插件来支持C++、C#、Python、Java、PHP等其他语言。不得不说vscode是一款良心之作。</p><p>相信很多程序员同学已经在工作中使用这个工具了，博主也是一样在工作中做些前端界面开发、静态博客书写都用vscode，完善的插件生态支持，乃神器也~~</p><p>vscode官网下载地址： <a href="https://code.visualstudio.com/" target="_blank" rel="noopener">https://code.visualstudio.com/</a> 根据自己的系统版本选择下载相应的安装包，具体安装这里不做过多介绍，也挺简单，今天主要介绍它的一款图床插件:<a href="https://molunerfinn.com/PicGo/" target="_blank" rel="noopener">PicGo</a></p><h2 id="PicGo介绍"><a href="#PicGo介绍" class="headerlink" title="PicGo介绍"></a>PicGo介绍</h2><p>PicGo基于electron-vue开发,支持macOS,Windows,Linux 支持插件系统，让PicGo更强大 Github项目地址：<a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener">https://github.com/Molunerfinn/PicGo</a><br>PicGo目前支持了</p><ul><li>微博图床 v1.0</li><li>七牛图床 v1.0</li><li>腾讯云COS v4\v5版本 v1.1 &amp; v1.5.0</li><li>又拍云 v1.2.0</li><li>GitHub v1.5.0</li><li>SM.MS v1.5.1</li><li>阿里云OSS v1.6.0</li><li>Imgur v1.6.0<br>PicGo本身可以作为一款应用安装在我们的电脑上，上传图片获取外链，我们可以选择将图片上传至微博云、七牛云等，配置简单使用方便。</li></ul><h2 id="vs-picgo插件"><a href="#vs-picgo插件" class="headerlink" title="vs-picgo插件"></a>vs-picgo插件</h2><p>有了PicGo图片上传获取外链已经很方便了，如何更优雅的使用vscode书写markdown, 大神<a href="https://github.com/Spades-S" target="_blank" rel="noopener">@Spades-S</a>基于PicGo开发的:<a href="https://github.com/Spades-S/vs-picgo" target="_blank" rel="noopener">https://github.com/Spades-S/vs-picgo</a> A vscode plugin for PicGo 当你用过一次，你真的会爱上她O(∩_∩)O哈哈~ 看下面它的项目介绍：</p><p>在 VSCode 里使用 picgo，实现快速上传图片到远端图床并直接将 URL 写进 Markdown 文件里，极大提升 Markdown 贴图效率与体验。支持 <a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener">PicGo</a> 原生自带的 8 种图床。</p><ul><li>截图上传</li></ul><p><img src="https://raw.githubusercontent.com/Molunerfinn/test/master/picgo/vs-picgo-clipboard.gif" alt=""></p><ul><li>文件管理器选择上传</li></ul><p><img src="https://raw.githubusercontent.com/Molunerfinn/test/master/picgo/vs-picgo-explorer.gif" alt=""></p><ul><li>输入文件路径上传</li></ul><p><img src="https://raw.githubusercontent.com/Molunerfinn/test/master/picgo/vs-picgo-inputbox.gif" alt=""></p><h2 id="vscode中安装vs-picgo插件"><a href="#vscode中安装vs-picgo插件" class="headerlink" title="vscode中安装vs-picgo插件"></a>vscode中安装vs-picgo插件</h2><p>当然根据上面的github项目介绍，你应该完全可以配置并使用这个工具，极大的提示贴图的效率与体验了，但是本着文章完整性的原则，这里将插件的安装使用配置做个说明：</p><p>1、打开vscode 点击左侧插件(Extensions)菜单,点击搜索 picgo 回车，点击install安装并重新加载，我这边已经安装过了，如下：</p><p><img src="http://static.nsoft.vip/20190314220710.png" alt="20190314220710.png"></p><p>2、安装完成后，其实你已经可以在.md文件中优雅的贴图了，默认vs-picgo上传至smms图床上。<br>KeyMap</p><p>You can change all the keymaps below as you wish.</p><p>Uploading an image from clipboard<br>Windows/Unix: Ctrl + Alt + u<br>OsX: Cmd + Opt + u</p><p>Uploading images from explorer<br>Windows/Unix: Ctrl + Alt + e<br>OsX: Cmd + Opt + e</p><p>Uploading an image from input box<br>Windows/Unix: Ctrl + Alt + o<br>OsX: Cmd + Opt + 0</p><p>3、配置七牛图床，在<a href="https://www.qiniu.com/" target="_blank" rel="noopener">七牛官网</a>注册获取：accessKey、secretKey，不过多介绍，官方有说明文档，这里主要记录下vscode usersetting.</p><p><img src="http://static.nsoft.vip/20190314221833.png" alt="20190314221833.png"></p><p>4、选择usersettng –&gt; Files –&gt; Edit in setting.json<br><img src="http://static.nsoft.vip/20190314221952.png" alt="20190314221952.png"></p><p>5、将默认的picgo修改为qiniu配置并保存，这样上传的图片就提交至七牛图床了<br><img src="http://static.nsoft.vip/20190314222230.png" alt="20190314222230.png"></p><p>更多的图床支持，上面vs-picgo项目中均有说明，so 嗨，妈妈再也不用担心我的贴图~~~</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="string">"picgo"</span>: &#123;</span><br><span class="line"> <span class="string">"path"</span>: <span class="string">"path to your external configure file"</span> // default value is <span class="string">""</span>, <span class="built_in">which</span> means use <span class="string">"picBed"</span> info below. External configure file should be a JSON file containing all the <span class="string">"picBed"</span> info below.</span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="string">"picBed"</span>: &#123;</span><br><span class="line"> <span class="string">"current"</span>: <span class="string">"smms"</span>,  // current image hosting, default value is <span class="string">"smms"</span></span><br><span class="line"> <span class="string">"weibo"</span>:&#123;           // weibo image hosting</span><br><span class="line"> <span class="string">"chooseCookie"</span>: <span class="literal">true</span> | <span class="literal">false</span>,</span><br><span class="line"> <span class="string">"username"</span>: <span class="string">""</span>,</span><br><span class="line"> <span class="string">"password"</span>: <span class="string">""</span>,</span><br><span class="line"> <span class="string">"quality"</span>: <span class="string">"thumbnail"</span> | <span class="string">"mw690"</span> | <span class="string">"large"</span>,</span><br><span class="line"> <span class="string">"cookie"</span>: <span class="string">""</span></span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="string">"qiniu"</span>: &#123;          // qiniu image hosting</span><br><span class="line"> <span class="string">"accessKey"</span>: <span class="string">""</span>,</span><br><span class="line"> <span class="string">"secretKey"</span>: <span class="string">""</span>,</span><br><span class="line"> <span class="string">"bucket"</span>: <span class="string">""</span>,</span><br><span class="line"> <span class="string">"url"</span>: <span class="string">""</span>,</span><br><span class="line"> <span class="string">"area"</span>: <span class="string">""</span>,       // <span class="string">"z0"</span> -&gt; 华东, <span class="string">"z1"</span> -&gt; 华北, <span class="string">"z2"</span> -&gt; 华南, <span class="string">"na0"</span> -&gt; 北美, <span class="string">"as0"</span> -&gt; 东南亚</span><br><span class="line"> <span class="string">"options"</span>: <span class="string">""</span> // prefix of url</span><br><span class="line"> <span class="string">"path"</span>:<span class="string">""</span> // postfix of path</span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="string">"upyun"</span>: &#123;          // upyun image hosting</span><br><span class="line"> <span class="string">"bucket"</span>: <span class="string">""</span>,</span><br><span class="line"> <span class="string">"operator"</span>: <span class="string">""</span>,</span><br><span class="line"> <span class="string">"password"</span>: <span class="string">""</span>,</span><br><span class="line"> <span class="string">"options"</span>: <span class="string">""</span>,</span><br><span class="line"> <span class="string">"path"</span>: <span class="string">""</span>,</span><br><span class="line"> <span class="string">"url"</span>: <span class="string">""</span></span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="string">"tcyun"</span>: &#123;          // tcyun image hosting</span><br><span class="line"> <span class="string">"secretId"</span>: <span class="string">""</span>,</span><br><span class="line"> <span class="string">"secretKey"</span>: <span class="string">""</span>,</span><br><span class="line"> <span class="string">"bucket"</span>: <span class="string">""</span>,</span><br><span class="line"> <span class="string">"appId"</span>: <span class="string">""</span>,</span><br><span class="line"> <span class="string">"area"</span>: <span class="string">""</span>,</span><br><span class="line"> <span class="string">"path"</span>: <span class="string">""</span>,</span><br><span class="line"> <span class="string">"customUrl"</span>: <span class="string">""</span>,</span><br><span class="line"> <span class="string">"version"</span>: <span class="string">"v5"</span> | <span class="string">"v4"</span></span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="string">"github"</span>: &#123;         // github image hosting</span><br><span class="line"> <span class="string">"repo"</span>: <span class="string">""</span>,</span><br><span class="line"> <span class="string">"token"</span>: <span class="string">""</span>,</span><br><span class="line"> <span class="string">"path"</span>: <span class="string">""</span>,</span><br><span class="line"> <span class="string">"customUrl"</span>: <span class="string">""</span>,</span><br><span class="line"> <span class="string">"branch"</span>: <span class="string">""</span>,</span><br><span class="line"> <span class="string">"username"</span>: <span class="string">""</span></span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="string">"aliyun"</span>: &#123;         // aliyun image hosting</span><br><span class="line"> <span class="string">"accessKeyId"</span>: <span class="string">""</span>,</span><br><span class="line"> <span class="string">"accessKeySecret"</span>: <span class="string">""</span>,</span><br><span class="line"> <span class="string">"bucket"</span>: <span class="string">""</span>,</span><br><span class="line"> <span class="string">"area"</span>: <span class="string">""</span>,</span><br><span class="line"> <span class="string">"path"</span>: <span class="string">""</span>,</span><br><span class="line"> <span class="string">"customUrl"</span>: <span class="string">""</span></span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://static.nsoft.vip/20190307194339.jpg&quot; alt=&quot;20190307194339.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="其他" scheme="http://nsoft.vip/categories/%E5%85%B6%E4%BB%96/"/>
    
      <category term="工具" scheme="http://nsoft.vip/categories/%E5%85%B6%E4%BB%96/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="其他" scheme="http://nsoft.vip/tags/%E5%85%B6%E4%BB%96/"/>
    
      <category term="PicGo" scheme="http://nsoft.vip/tags/PicGo/"/>
    
      <category term="工具" scheme="http://nsoft.vip/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>centos7安装mariadb集群</title>
    <link href="http://nsoft.vip/2019/03/07/190307-CentOS7%E5%AE%89%E8%A3%85Mariadb%20Galera%E9%9B%86%E7%BE%A4/"/>
    <id>http://nsoft.vip/2019/03/07/190307-CentOS7安装Mariadb Galera集群/</id>
    <published>2019-03-07T05:30:58.000Z</published>
    <updated>2019-03-07T11:29:48.479Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://static.nsoft.vip/1740939793.jpg" alt="1740939793.jpg"></p><a id="more"></a><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>1、准备三台Centos7虚拟机环境<br><img src="http://static.nsoft.vip/20190307182121.png" alt="20190307182121.png"></p><p>机器列表<br>192.168.48.211<br>192.168.48.212<br>192.168.48.213</p><p>2、设置主机名（设置三台虚拟机主机名分别为node1，node2，node3）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim /etc/hosts</span></span><br><span class="line">192.168.48.211  node1</span><br><span class="line">192.168.48.212  node2</span><br><span class="line">192.168.48.213  node3</span><br></pre></td></tr></table></figure></p><p>3、关闭SELINUX<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># setenforce 0</span></span><br><span class="line"><span class="comment"># sed -i 's,^SELINUX=enforcing,SELINUX=disabled,g' /etc/selinux/config</span></span><br></pre></td></tr></table></figure></p><p>4、关闭防火墙<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld.service</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld.service</span><br></pre></td></tr></table></figure></p><p>5、使用以下命令快速添加YUM源<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tee /etc/yum.repos.d/mariadb.repo &lt;&lt;-'EOF'</span></span><br><span class="line">[mariadb]</span><br><span class="line">name = MariaDB</span><br><span class="line">baseurl = http://yum.mariadb.org/10.1/centos7-amd64</span><br><span class="line">gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB</span><br><span class="line">gpgcheck=1</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></p><p>6、由于Mariadb服务器是在国外，速度较慢，可以使用国内镜像源替代，以USTC镜像源为例<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sed -i 's#yum\.mariadb\.org#mirrors.ustc.edu.cn/mariadb/yum#' /etc/yum.repos.d/mariadb.repo</span></span><br></pre></td></tr></table></figure></p><p>7、刷新YUM缓存<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yum makecache</span></span><br></pre></td></tr></table></figure></p><p>8、查看Mariadb相关的安装包，注意软件包版本和对应的YUM源名字<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yum list MariaDB* galera</span></span><br></pre></td></tr></table></figure></p><p><img src="http://static.nsoft.vip/20190307182935.png" alt="20190307182935.png"></p><h2 id="部署MariaDB-Galera集群"><a href="#部署MariaDB-Galera集群" class="headerlink" title="部署MariaDB Galera集群"></a>部署MariaDB Galera集群</h2><p>执行yum安装命令(执行节点：node1, node2, node3)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yum install -y MariaDB-server MariaDB-client galera</span></span><br></pre></td></tr></table></figure></p><p>待安装完成，启动数据库，并设置root账号权限密码(执行节点：node1, node2, node3)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># systemctl start mariadb</span></span><br><span class="line"><span class="comment"># mysql -uroot -e "grant all privileges on *.* to 'root'@'localhost' identified by 'root';flush privileges;"</span></span><br></pre></td></tr></table></figure></p><p>也可使用如下方法设置数据库密码，测试情况使用 root  % root<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /usr/bin/mysql_secure_installation</span></span><br></pre></td></tr></table></figure></p><p>设置完成之后关闭数据库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># systemctl stop mariadb</span></span><br></pre></td></tr></table></figure></p><p>配置node1:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat /etc/my.cnf.d/server.cnf | grep -v '#'</span></span><br><span class="line"></span><br><span class="line">[server]</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line"></span><br><span class="line">[galera]</span><br><span class="line"></span><br><span class="line">wsrep_on=ON</span><br><span class="line">wsrep_provider=/usr/lib64/galera/libgalera_smm.so</span><br><span class="line">wsrep_cluster_address=<span class="string">"gcomm://192.168.48.211,192.168.48.212,192.168.48.213"</span></span><br><span class="line">wsrep_node_name = node1</span><br><span class="line">binlog_format=row</span><br><span class="line">default_storage_engine=InnoDB</span><br><span class="line">innodb_autoinc_lock_mode=2</span><br><span class="line"><span class="built_in">bind</span>-address=0.0.0.0</span><br><span class="line"></span><br><span class="line">wsrep_cluster_name=<span class="string">"MariaDB_Cluster"</span></span><br><span class="line">wsrep_node_address=192.168.48.211</span><br><span class="line">wsrep_sst_method=rsync</span><br><span class="line"></span><br><span class="line">wsrep_slave_threads=1</span><br><span class="line">innodb_flush_log_at_trx_commit=2</span><br><span class="line">innodb_buffer_pool_size=1024M</span><br><span class="line">wsrep_sst_auth=root:root</span><br><span class="line"></span><br><span class="line">[embedded]</span><br><span class="line"></span><br><span class="line">[mariadb]</span><br><span class="line"></span><br><span class="line">[mariadb-10.1]</span><br></pre></td></tr></table></figure></p><p>分别配置node2，node3，修改点为当前节点名称，当前节点ip地址:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat /etc/my.cnf.d/server.cnf | grep -v '#'</span></span><br><span class="line"></span><br><span class="line">[server]</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line"></span><br><span class="line">[galera]</span><br><span class="line"></span><br><span class="line">wsrep_on=ON</span><br><span class="line">wsrep_provider=/usr/lib64/galera/libgalera_smm.so</span><br><span class="line">wsrep_cluster_address=<span class="string">"gcomm://192.168.48.211,192.168.48.212,192.168.48.213"</span></span><br><span class="line">wsrep_node_name = node2</span><br><span class="line">binlog_format=row</span><br><span class="line">default_storage_engine=InnoDB</span><br><span class="line">innodb_autoinc_lock_mode=2</span><br><span class="line"><span class="built_in">bind</span>-address=0.0.0.0</span><br><span class="line"></span><br><span class="line">wsrep_cluster_name=<span class="string">"MariaDB_Cluster"</span></span><br><span class="line">wsrep_node_address=192.168.48.212</span><br><span class="line">wsrep_sst_method=rsync</span><br><span class="line"></span><br><span class="line">wsrep_slave_threads=1</span><br><span class="line">innodb_flush_log_at_trx_commit=2</span><br><span class="line">innodb_buffer_pool_size=1024M</span><br><span class="line">wsrep_sst_auth=root:root</span><br><span class="line"></span><br><span class="line">[embedded]</span><br><span class="line"></span><br><span class="line">[mariadb]</span><br><span class="line"></span><br><span class="line">[mariadb-10.1]</span><br></pre></td></tr></table></figure></p><p><img src="http://static.nsoft.vip/20190307184819.png" alt="20190307184819.png"></p><p>在node1上执行如下命令，启动一个集群<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /usr/sbin/mysqld --wsrep-new-cluster --user=root &amp;</span></span><br></pre></td></tr></table></figure></p><p>查看集群状态<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mysql -uroot -proot</span></span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; show  status like <span class="string">"wsrep_cluster_size"</span>;</span><br><span class="line">+--------------------+-------+</span><br><span class="line">| Variable_name      | Value |</span><br><span class="line">+--------------------+-------+</span><br><span class="line">| wsrep_cluster_size | 1     |</span><br><span class="line">+--------------------+-------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br></pre></td></tr></table></figure></p><p>在node2,node3节点上直接执行如下命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mariadb</span><br></pre></td></tr></table></figure></p><p>再次查看集群状态，可以看到2,3节点已成功加入集群<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [(none)]&gt; show  status like <span class="string">"wsrep_cluster_size"</span>;</span><br><span class="line">+--------------------+-------+</span><br><span class="line">| Variable_name      | Value |</span><br><span class="line">+--------------------+-------+</span><br><span class="line">| wsrep_cluster_size | 3     |</span><br><span class="line">+--------------------+-------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br></pre></td></tr></table></figure></p><h2 id="集群数据同步测试"><a href="#集群数据同步测试" class="headerlink" title="集群数据同步测试"></a>集群数据同步测试</h2><p>在集群中任一一台主机执行如下命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [(none)]&gt; create database marspie;</span><br><span class="line">Query OK, 1 row affected (0.28 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; use marspie;</span><br><span class="line">Database changed</span><br><span class="line">MariaDB [marspie]&gt; create table user(id int primary key,name varchar(64));</span><br><span class="line">Query OK, 0 rows affected (0.16 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [marspie]&gt; show tables;</span><br><span class="line">+-------------------+</span><br><span class="line">| Tables_in_marspie |</span><br><span class="line">+-------------------+</span><br><span class="line">| user              |</span><br><span class="line">+-------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [marspie]&gt; insert into user values(1,<span class="string">'alex'</span>);</span><br><span class="line">Query OK, 1 row affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [marspie]&gt;</span><br></pre></td></tr></table></figure></p><p>查看另外两台主机，我们可以发现数据已经同步了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [(none)]&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| marspie            |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| <span class="built_in">test</span>               |</span><br><span class="line">+--------------------+</span><br><span class="line">6 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; use marspie;</span><br><span class="line">Reading table information <span class="keyword">for</span> completion of table and column names</span><br><span class="line">You can turn off this feature to get a quicker startup with -A</span><br><span class="line"></span><br><span class="line">Database changed</span><br><span class="line">MariaDB [marspie]&gt; show tables;</span><br><span class="line">+-------------------+</span><br><span class="line">| Tables_in_marspie |</span><br><span class="line">+-------------------+</span><br><span class="line">| user              |</span><br><span class="line">+-------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [marspie]&gt; select * from user;</span><br><span class="line">+----+------+</span><br><span class="line">| id | name |</span><br><span class="line">+----+------+</span><br><span class="line">|  1 | alex |</span><br><span class="line">+----+------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [marspie]&gt; insert into user values(2,<span class="string">'kiven'</span>);</span><br><span class="line">Query OK, 1 row affected (0.21 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [marspie]&gt;</span><br></pre></td></tr></table></figure></p><h2 id="常见问题解析"><a href="#常见问题解析" class="headerlink" title="常见问题解析"></a>常见问题解析</h2><p>1、在生产环境中必须打开防火墙，如果只开放了 4567 和 针对指定ip开放3306 端口，会导致加入集群失败，需要开放<br>3306, 4444, 4567, 4568 四个端口才可以正常启动。</p><p>2、直接kill点创建集群节点，会导致此节点无法启动<br><img src="http://static.nsoft.vip/20190307191741.png" alt="20190307191741.png"></p><ul><li>第一个启动的节点，在集群关闭数据库时需最后一个停止，再次启动集群是才可正常启动。</li><li>若第一个启动的节点被kill, 停止所有节点，再次启动第一个节点还是会启动失败，这时需进入mysql数据目录删除galera缓存文件，方可启动集群<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># cd /var/lib/mysql/</span></span><br><span class="line">[root@node1 mysql]<span class="comment"># rm -rf grastate.dat gvwstate.dat galera.cache </span></span><br><span class="line">[root@node1 mysql]<span class="comment"># /usr/sbin/mysqld --wsrep-new-cluster --user=root</span></span><br></pre></td></tr></table></figure></li></ul><p>后续如还有坑再补充！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://static.nsoft.vip/1740939793.jpg&quot; alt=&quot;1740939793.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="高性能架构" scheme="http://nsoft.vip/categories/%E9%AB%98%E6%80%A7%E8%83%BD%E6%9E%B6%E6%9E%84/"/>
    
      <category term="MariaDB" scheme="http://nsoft.vip/categories/%E9%AB%98%E6%80%A7%E8%83%BD%E6%9E%B6%E6%9E%84/MariaDB/"/>
    
    
      <category term="centos7" scheme="http://nsoft.vip/tags/centos7/"/>
    
      <category term="MariaDB" scheme="http://nsoft.vip/tags/MariaDB/"/>
    
      <category term="mariadb" scheme="http://nsoft.vip/tags/mariadb/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ详解</title>
    <link href="http://nsoft.vip/2019/01/09/190109-RabbitMQ%E8%AF%A6%E8%A7%A3/"/>
    <id>http://nsoft.vip/2019/01/09/190109-RabbitMQ详解/</id>
    <published>2019-01-09T05:33:02.000Z</published>
    <updated>2019-01-15T03:01:58.168Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://static.nsoft.vip/19-1-9/43486364.jpg" alt=""></p><a id="more"></a><h1 id="初识RabbitMQ"><a href="#初识RabbitMQ" class="headerlink" title="初识RabbitMQ"></a>初识RabbitMQ</h1><p>RabbitMQ是一个开源的消息代理和队列服务器，用来通过普通协议在完全不同的应用之间共享数据，RabbitMQ是使用Erlang语言编写的，并且RabbitMQ是基于AMQP协议的。</p><ul><li>目前很多互联网大厂都在使用RabbitMQ</li><li>RabbitMQ底层使用Erlang语言编写</li><li>开源、性能优秀、稳定性保障</li><li>与SpringAMQP完美整合、API丰富</li><li>集群模式丰富，表达式配置，HA模式，镜像队列模式</li><li>保证数据不丢失的前提做到高可用性，高可靠性</li><li>AMQP全称：Advanced Message Queuing Protocol(高级消息队列协议)</li></ul><h1 id="AMQP协议模型"><a href="#AMQP协议模型" class="headerlink" title="AMQP协议模型"></a>AMQP协议模型</h1><p><img src="http://static.nsoft.vip/19-1-14/59803987.jpg" alt=""></p><h1 id="AMQP核心概论"><a href="#AMQP核心概论" class="headerlink" title="AMQP核心概论"></a>AMQP核心概论</h1><p><strong>Virtual host</strong>: 虚拟地址，用于进行逻辑隔离，最上层的消息路由。一个Virtual Host里面可以有若干个Exchange和Queue，同时一个Virtual Host里面不能有相同名称的Exchange和Queue</p><p><strong>Exchange</strong>: 交换机，接收消息，根据路由键转发消息到绑定的队列</p><p><strong>Binding</strong>: Exchange和Queue之间的虚拟连接，binding中可以包含routing key</p><p><strong>Routing key</strong>: 一个路由规则，虚拟机可用它来确定如何路由一个特定消息</p><p><strong>Queue</strong>: 也称为Message Queue，消息队列，保存消息并将它们转发给消费者</p><h1 id="RabbitMQ消息流转"><a href="#RabbitMQ消息流转" class="headerlink" title="RabbitMQ消息流转"></a>RabbitMQ消息流转</h1><p><img src="http://static.nsoft.vip/19-1-15/6605.jpg" alt=""></p><h1 id="RabbitMQ整合SpringBoot2-x"><a href="#RabbitMQ整合SpringBoot2-x" class="headerlink" title="RabbitMQ整合SpringBoot2.x"></a>RabbitMQ整合SpringBoot2.x</h1><p>SpringBoot与RabbitMQ集成非常简单，不需要任何额外设置只需要两步即可：</p><h2 id="引入相关依赖"><a href="#引入相关依赖" class="headerlink" title="引入相关依赖"></a>引入相关依赖</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="配置application-properties"><a href="#配置application-properties" class="headerlink" title="配置application.properties"></a>配置application.properties</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># rabbitmq服务地址</span></span><br><span class="line">spring.rabbitmq.addresses=192.168.8.193:5672</span><br><span class="line"><span class="comment"># rabbitmq用户名密码</span></span><br><span class="line">spring.rabbitmq.username=admin</span><br><span class="line">spring.rabbitmq.password=admin</span><br><span class="line"><span class="comment"># 虚拟地址</span></span><br><span class="line">spring.rabbitmq.virtual-host=/</span><br><span class="line"><span class="comment"># 超时设置</span></span><br><span class="line">spring.rabbitmq.connection-timeout=15000</span><br></pre></td></tr></table></figure><h2 id="代码配置"><a href="#代码配置" class="headerlink" title="代码配置"></a>代码配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line">package com.marspie.config;</span><br><span class="line"></span><br><span class="line">import org.springframework.amqp.core.*;</span><br><span class="line">import org.springframework.amqp.rabbit.connection.CachingConnectionFactory;</span><br><span class="line">import org.springframework.amqp.rabbit.connection.ConnectionFactory;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Copyright (c) 2019, The Marspie Open Source Project</span><br><span class="line"> * 配置方法一： application.properties</span><br><span class="line"> * 配置方法二: 代码配置ConnectionFactory</span><br><span class="line"> * @author alex</span><br><span class="line"> * @date 2019/1/11 11 32</span><br><span class="line"> * @email yaonew@126.com</span><br><span class="line"> * @blog http://nsoft.vip</span><br><span class="line"> * Licensed under the Apache License, Version 2.0 (the <span class="string">"License"</span>);</span><br><span class="line"> * you may not use this file except <span class="keyword">in</span> compliance with the License.</span><br><span class="line"> * You may obtain a copy of the License at</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * Unless required by applicable law or agreed to <span class="keyword">in</span> writing, software</span><br><span class="line"> * distributed under the License is distributed on an <span class="string">"AS IS"</span> BASIS,</span><br><span class="line"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line"> * See the License <span class="keyword">for</span> the specific language governing permissions and</span><br><span class="line"> * limitations under the License.</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">public class RabbitMqConfig &#123;</span><br><span class="line"></span><br><span class="line">/*    @Bean</span><br><span class="line">    public ConnectionFactory <span class="function"><span class="title">connectionFactory</span></span>() &#123;</span><br><span class="line">        CachingConnectionFactory connectionFactory = new CachingConnectionFactory();</span><br><span class="line">        connectionFactory.setAddresses(<span class="string">"192.168.48.51:5672"</span>);</span><br><span class="line">        connectionFactory.setUsername(<span class="string">"admin"</span>);</span><br><span class="line">        connectionFactory.setPassword(<span class="string">"admin"</span>);</span><br><span class="line">        connectionFactory.setVirtualHost(<span class="string">"/"</span>);</span><br><span class="line">        connectionFactory.setPublisherConfirms(<span class="literal">true</span>);//消息确认</span><br><span class="line">        connectionFactory.setPublisherReturns(<span class="literal">true</span>);</span><br><span class="line">        <span class="built_in">return</span> connectionFactory;</span><br><span class="line">    &#125;*/</span><br><span class="line"></span><br><span class="line">    //topic</span><br><span class="line">    public static final String TOPIC_QUEUE1 = <span class="string">"topic.queue1"</span>;</span><br><span class="line">    public static final String TOPIC_QUEUE2 = <span class="string">"topic.queue2"</span>;</span><br><span class="line">    public static final String TOPIC_EXCHANGE = <span class="string">"topic.exchange"</span>;</span><br><span class="line">    // routingKey</span><br><span class="line">    public static final String TOPIC_ROUTING_KEY1 = <span class="string">"order.message"</span>;</span><br><span class="line">    public static final String TOPIC_ROUTING_KEY2 = <span class="string">"order.#"</span>;</span><br><span class="line"></span><br><span class="line">    //fanout</span><br><span class="line">    public static final String FANOUT_QUEUE1 = <span class="string">"fanout.queue1"</span>;</span><br><span class="line">    public static final String FANOUT_QUEUE2 = <span class="string">"fanout.queue2"</span>;</span><br><span class="line">    public static final String FANOUT_EXCHANGE = <span class="string">"fanout.exchange"</span>;</span><br><span class="line"></span><br><span class="line">    //redirect模式</span><br><span class="line">    public static final String DIRECT_QUEUE1 = <span class="string">"direct.queue1"</span>;</span><br><span class="line">    public static final String DIRECT_EXCHANGE = <span class="string">"direct.exchange"</span>;</span><br><span class="line">    public static final String DIRECT_QUEUE2 =<span class="string">"direct.queue2"</span> ;</span><br><span class="line">    // routingKey</span><br><span class="line">    public static final String DIRECT_ROUTING_KEY = <span class="string">"direct.order"</span>;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Topic模式</span><br><span class="line">     * 将路由键和某模式进行匹配。此时队列需要绑定要一个模式上。符号“<span class="comment">#”匹配一个或多个词，符号“*”匹配不多不少一个词。</span></span><br><span class="line">     * 因此“order.<span class="comment">#”能够匹配到“order.irs.corporate”，但是“order.*” 只会匹配到“order.irs”。</span></span><br><span class="line">     * @<span class="built_in">return</span></span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public Queue <span class="function"><span class="title">topicQueue1</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> new Queue(TOPIC_QUEUE1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public Queue <span class="function"><span class="title">topicQueue2</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> new Queue(TOPIC_QUEUE2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public TopicExchange <span class="function"><span class="title">topicExchange</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> new TopicExchange(TOPIC_EXCHANGE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public Binding <span class="function"><span class="title">topicBinding1</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> BindingBuilder.bind(topicQueue1()).to(topicExchange()).with(TOPIC_ROUTING_KEY1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public Binding <span class="function"><span class="title">topicBinding2</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> BindingBuilder.bind(topicQueue2()).to(topicExchange()).with(TOPIC_ROUTING_KEY2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Fanout模式</span><br><span class="line">     * Fanout 就是我们熟悉的广播模式或者订阅模式，给Fanout交换机发送消息，绑定了这个交换机的所有队列都收到这个消息。</span><br><span class="line">     * @<span class="built_in">return</span></span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public Queue <span class="function"><span class="title">fanoutQueue1</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> new Queue(FANOUT_QUEUE1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public Queue <span class="function"><span class="title">fanoutQueue2</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> new Queue(FANOUT_QUEUE2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public FanoutExchange <span class="function"><span class="title">fanoutExchange</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> new FanoutExchange(FANOUT_EXCHANGE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public Binding <span class="function"><span class="title">fanoutBinding1</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> BindingBuilder.bind(fanoutQueue1()).to(fanoutExchange());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public Binding <span class="function"><span class="title">fanoutBinding2</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> BindingBuilder.bind(fanoutQueue2()).to(fanoutExchange());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * direct模式</span><br><span class="line">     * 消息中的路由键（routing key）如果和 Binding 中的 binding key 一致， 交换器就将消息发到对应的队列中。路由键与队列名完全匹配.</span><br><span class="line">     * 这是一个完整的匹配。如果一个队列绑定到该交换机上要求路由键 “<span class="built_in">test</span>”，则只有被标记为“<span class="built_in">test</span>”的消息才被转发，不会转发test.aaa，也不会转发dog.bbb，只会转发<span class="built_in">test</span>。</span><br><span class="line">     * @<span class="built_in">return</span></span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public Queue <span class="function"><span class="title">directQueue1</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> new Queue(DIRECT_QUEUE1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public DirectExchange <span class="function"><span class="title">directExchange</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> new DirectExchange(DIRECT_EXCHANGE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public Binding <span class="function"><span class="title">directBinding1</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> BindingBuilder.bind(directQueue1()).to(directExchange()).with(DIRECT_ROUTING_KEY);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Topic模式"><a href="#Topic模式" class="headerlink" title="Topic模式"></a>Topic模式</h3><p>将路由键和某模式进行匹配。此时队列需要绑定要一个模式上。符号“#”匹配一个或多个词，符号“*”匹配不多不少一个词。 因此“order.#”能够匹配到“order.irs.corporate”，但是“order.*” 只会匹配到“order.irs”。</p><p>-生产者<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class TopicSender &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private AmqpTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    public void send(Order order) &#123;</span><br><span class="line">        this.rabbitTemplate.convertAndSend(RabbitMqConfig.TOPIC_EXCHANGE,<span class="string">"order.message"</span>, order);</span><br><span class="line">        this.rabbitTemplate.convertAndSend(RabbitMqConfig.TOPIC_EXCHANGE,<span class="string">"order.ha"</span>, order);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>-消费者<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class TopicReceiver &#123;</span><br><span class="line">    // queues是指要监听的队列的名字</span><br><span class="line">    @RabbitListener(queues = RabbitMqConfig.TOPIC_QUEUE1)</span><br><span class="line">    public void receiveTopic1(Order order) &#123;</span><br><span class="line">        System.out.println(<span class="string">"【receiveTopic1监听到消息】"</span> + order);</span><br><span class="line">    &#125;</span><br><span class="line">    @RabbitListener(queues = RabbitMqConfig.TOPIC_QUEUE2)</span><br><span class="line">    public void receiveTopic2(Order order) &#123;</span><br><span class="line">        System.out.println(<span class="string">"【receiveTopic2监听到消息】"</span> + order);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Fanout模式"><a href="#Fanout模式" class="headerlink" title="Fanout模式"></a>Fanout模式</h3><p>Fanout 就是我们熟悉的广播模式或者订阅模式，给Fanout交换机发送消息，绑定了这个交换机的所有队列都收到这个消息。<br>-生产者<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class FanoutSender &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private AmqpTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    public void send(Order order) &#123;</span><br><span class="line">        this.rabbitTemplate.convertAndSend(RabbitMqConfig.FANOUT_EXCHANGE, <span class="string">""</span>, order);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>-消费者<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class FanoutReceiver &#123;</span><br><span class="line"></span><br><span class="line">    // queues是指要监听的队列的名字</span><br><span class="line">    @RabbitListener(queues = RabbitMqConfig.FANOUT_QUEUE1)</span><br><span class="line">    public void receiveTopic1(Order order) &#123;</span><br><span class="line">        System.out.println(<span class="string">"【receiveFanout1监听到消息】"</span> + order);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RabbitListener(queues = RabbitMqConfig.FANOUT_QUEUE2)</span><br><span class="line">    public void receiveTopic2(Order order) &#123;</span><br><span class="line">        System.out.println(<span class="string">"【receiveFanout2监听到消息】"</span> + order);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="direct模式"><a href="#direct模式" class="headerlink" title="direct模式"></a>direct模式</h3><p>消息中的路由键（routing key）如果和 Binding 中的 binding key 一致， 交换器就将消息发到对应的队列中。路由键与队列名完全匹配.这是一个完整的匹配。如果一个队列绑定到该交换机上要求路由键 “test”，则只有被标记为“test”的消息才被转发，不会转发test.aaa，也不会转发dog.bbb，只会转发test。<br>-生产者<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class DirectSender &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    public void send(Order order) &#123;</span><br><span class="line">        this.rabbitTemplate.convertAndSend(RabbitMqConfig.DIRECT_EXCHANGE, <span class="string">"direct.order"</span>, order);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>-消费者<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class DirectReceiver &#123;</span><br><span class="line">    // queues是指要监听的队列的名字</span><br><span class="line">    @RabbitListener(queues = RabbitMqConfig.DIRECT_QUEUE1)</span><br><span class="line">    public void receiveDirect1(Order order) &#123;</span><br><span class="line">        System.out.println(<span class="string">"【receiveDirect1监听到消息】"</span> + order);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RabbitListener(queues = RabbitMqConfig.DIRECT_QUEUE1)</span><br><span class="line">    public void receiveDirect2(Order order) &#123;</span><br><span class="line">        System.out.println(<span class="string">"【receiveDirect2监听到消息】"</span> + order);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><a href="https://github.com/yaonew/spring-boot" target="_blank" rel="noopener">GitHub源码</a><br><a href="https://gitee.com/yaonew/spring-boot" target="_blank" rel="noopener">码云源码</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://static.nsoft.vip/19-1-9/43486364.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="高性能架构" scheme="http://nsoft.vip/categories/%E9%AB%98%E6%80%A7%E8%83%BD%E6%9E%B6%E6%9E%84/"/>
    
      <category term="RabbitMQ" scheme="http://nsoft.vip/categories/%E9%AB%98%E6%80%A7%E8%83%BD%E6%9E%B6%E6%9E%84/RabbitMQ/"/>
    
    
      <category term="RabbitMQ" scheme="http://nsoft.vip/tags/RabbitMQ/"/>
    
      <category term="SpringBoot" scheme="http://nsoft.vip/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>2018年度账单</title>
    <link href="http://nsoft.vip/2018/12/30/181230-2018%E5%B9%B4%E5%BA%A6%E8%B4%A6%E5%8D%95/"/>
    <id>http://nsoft.vip/2018/12/30/181230-2018年度账单/</id>
    <published>2018-12-30T11:21:07.000Z</published>
    <updated>2019-01-13T02:56:03.273Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://static.nsoft.vip/18-12-30-2345982.jpg" alt=""><br><a id="more"></a><br>好吧2018年年度账单出炉，扯点没用的，放松一下心情，拒绝沉重，保持轻松总结一下过去的2018, 下面扯蛋开始。。。</p><h2 id="18概要"><a href="#18概要" class="headerlink" title="18概要"></a>18概要</h2><p>2018年注定是繁忙的一年，也是值得纪念的一年，成功晋升为一名专业奶爸，成功晋升为一名资深房奴，成功… 好吧我一直走在成功的路上。</p><h2 id="18年经济"><a href="#18年经济" class="headerlink" title="18年经济"></a>18年经济</h2><p>2018年大家都知道发生了贸易战，作为贸易战的牺牲者，净资产亏损15%~20%左右（好吧其实没多少钱，基金一直处于亏损状态），然后这一年也深刻的意识到买房致富不是说说，现在回想17年本打算换房（然而由于我懒的费心）。这边的经济损失大概是目前资产的一倍还多吧。</p><p>最终在18年10月左右狠下心来，贱卖（其实也谈不上贱卖，比17年还便宜几万出手了）我们现有的小房子换了套大房子（其实也不大，小三房90多平而已），不过此时的房价已经比17年涨八九千每平，达到了2万七八，更糟糕的是银行房贷利率在基准利率的基础上上调了25%，从房贷优惠9折到优惠95折再到上调10%到上调15%最终再到上调至25%仅仅只花了1年左右的时间，我们很幸运的拿到了25%。直接房价加总利息累计多花费一百多万，所以买房真的可以致富，奉劝各位想买房的一定是越早买越好。<br><img src="http://static.nsoft.vip/18-12-30-1298759.jpg" alt=""></p><h2 id="18年家庭"><a href="#18年家庭" class="headerlink" title="18年家庭"></a>18年家庭</h2><p>2018年1月份我们的小嘟宝贝出生了，从此我们从2口之家变成了3口之家，当然更多的时间是陪伴这位新成员，刚开始这个折磨人的小乖乖不肯喝母乳，要通过乳盾给他喂奶（这期间也折磨我们好久），出院后第一次体检黄疸被迫住院照蓝光，三天后出院回来小家伙的嗓子都哑了（应该是在医院哭的，好心疼），黄疸需要多晒太阳，可是一连的阴雨天压根见不着太阳，小家伙一直处于黄疸指标的边缘，生怕他又被强制住院治疗。期间吃了茵栀黄，影响了他的消化系统，好长一段时间每天都拉挺多次。后来又是咳嗽，一直揪心着。</p><p>还好慢慢的小家伙一天天长大，慢慢会爬了，会坐了，会站，看着他一天天长大，内心充满了喜悦，其实爸爸都是心比较大，这要感谢我的老婆大人时刻关注宝宝每个成长阶段的注意事项，小家伙已经快一周岁了，感觉好欣慰，家庭的温馨，给小家伙一个良好的成长环境，是我一生的事业。</p><h2 id="18年事业"><a href="#18年事业" class="headerlink" title="18年事业"></a>18年事业</h2><p>2018年其实没有太大的变化，还是在原来的公司，一名标准的技术码农，然而也迷茫过，思考过，未来做什么，未来我想成为什么样的人。相信很多跟我一样的朋友很多，路在脚下吧，我还将继续探索…<br><img src="http://static.nsoft.vip/18-11-28/48083627.jpg" alt=""></p><h2 id="展望2019"><a href="#展望2019" class="headerlink" title="展望2019"></a>展望2019</h2><p>啰啰嗦嗦的说了一堆。纯粹就瞎扯吧，对于19年的目标</p><p>1、 生活方面<br>1.1 看更多的书（不局限于技术方面）<br>1.2 装修房子</p><p>2、 事业方面<br>2.1 提升业务技能<br>2.2 提升技术技能<br>2.3 完成一个秘密的小目标</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://static.nsoft.vip/18-12-30-2345982.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="其他" scheme="http://nsoft.vip/categories/%E5%85%B6%E4%BB%96/"/>
    
      <category term="随笔" scheme="http://nsoft.vip/categories/%E5%85%B6%E4%BB%96/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="其他" scheme="http://nsoft.vip/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>Docker之旅-Docker图形化管理和监控(二)</title>
    <link href="http://nsoft.vip/2018/12/20/181220-Docker%E4%B9%8B%E6%97%85-Docker%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%AE%A1%E7%90%86%E5%92%8C%E7%9B%91%E6%8E%A7(%E4%BA%8C)/"/>
    <id>http://nsoft.vip/2018/12/20/181220-Docker之旅-Docker图形化管理和监控(二)/</id>
    <published>2018-12-20T01:42:50.000Z</published>
    <updated>2018-12-29T08:55:03.113Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://static.nsoft.vip/18-12-5/24521079.jpg" alt=""></p><a id="more"></a><h2 id="DockerUI"><a href="#DockerUI" class="headerlink" title="DockerUI"></a>DockerUI</h2><p>DockerUI是一个开源的基于Docker API的web应用程序，提供等同Docker命令行的大部分功能，支持container管理，image管理, networks 管理。它最值得称道的是它华丽的设计和用来运行和管理docker的简洁的操作界面。<br>获取<br>首先拉去dockerUI镜像，现在dockerUI镜像<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull uifd/ui-for-docker</span><br></pre></td></tr></table></figure></p><p>查看本地镜像<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ docker images</span><br><span class="line">REPOSITORY            TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">hellowpy              latest              d1a8a6e4b2c4        28 hours ago        131MB</span><br><span class="line">yaonew/hellowpy       v1                  d1a8a6e4b2c4        28 hours ago        131MB</span><br><span class="line">redis                 latest              ce25c7293564        12 days ago         95MB</span><br><span class="line">nginx                 latest              568c4670fa80        4 weeks ago         109MB</span><br><span class="line">python                2.7-slim            0dc3d8d47241        5 weeks ago         120MB</span><br><span class="line">docker-compose_demo   latest              985f3637ded4        8 weeks ago         635MB</span><br><span class="line">maven                 3.5-jdk-8           985f3637ded4        8 weeks ago         635MB</span><br><span class="line">mysql/mysql-server    5.7                 76ac6291d3cf        2 months ago        234MB</span><br><span class="line">hello-world           latest              4ab4c602aa5e        3 months ago        1.84kB</span><br><span class="line">uifd/ui-for-docker    latest              965940f98fa5        2 years ago         8.1MB</span><br></pre></td></tr></table></figure></p><p>启动容器<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -it -d --name docker-web -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock docker.io/uifd/ui-for-docker</span><br></pre></td></tr></table></figure></p><p>接着就可以在浏览器访问DockerUI管理界面了。启动了 DockerUI容器之后，就可以用它来执行启动、暂停、终止、删除以及DockerUI提供的其它操作Docker容器的命令。在浏览器里面输入 <a href="http://ip-address:9000，默认情况下登录不需要认证，但是可以配置我们的" target="_blank" rel="noopener">http://ip-address:9000，默认情况下登录不需要认证，但是可以配置我们的</a> web 服务器来要求登录认证<br><img src="http://static.nsoft.vip/18-12-26/23387040.jpg" alt=""><br><img src="http://static.nsoft.vip/18-12-26/72479348.jpg" alt=""><br><img src="http://static.nsoft.vip/18-12-26/3065833.jpg" alt=""><br>DockerUI优点：<br>1）支持container批量操作；<br>2）支持image管理（虽然比较薄弱）</p><p>DockerUI缺点：<br>不支持多主机。</p><h2 id="Shipyard入门"><a href="#Shipyard入门" class="headerlink" title="Shipyard入门"></a>Shipyard入门</h2><p><strong>比较遗憾目前Shipyard作者已停止维护，不过目前我们还是可以使用</strong><br>是一个集成管理docker容器、镜像、Registries的系统,它可以简化对横跨多个主机的Docker容器集群进行管理. 通过Web用户界面，你可以大致浏览相关信息，比如你的容器在使用多少处理器和内存资源、在运行哪些容器，还可以检查所有集群上的事件日志。<br>其特性主要包括：<br>1）支持节点动态集群，可扩展节点的规模（swarm、etcd方案）<br>2）支持镜像管理、容器管理、节点管理等功能<br>3）可视化的容器管理和监控管理<br>4）在线容console终端</p><h3 id="安装主节点-管理端"><a href="#安装主节点-管理端" class="headerlink" title="安装主节点(管理端)"></a>安装主节点(管理端)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ curl -s https://raw.githubusercontent.com/shipyard/shipyard-project.com/master/site/themes/shipyard/static/deploy | bash -s</span><br><span class="line">Deploying Shipyard</span><br><span class="line"> -&gt; Starting Database</span><br><span class="line"> -&gt; Starting Discovery</span><br><span class="line"> -&gt; Starting Cert Volume</span><br><span class="line"> -&gt; Starting Proxy</span><br><span class="line"> -&gt; Starting Swarm Manager</span><br><span class="line"> -&gt; Starting Swarm Agent</span><br><span class="line"> -&gt; Starting Controller</span><br><span class="line">......</span><br><span class="line">Digest: sha256:5f065362680fa4565dd150c8da3edd09b79a7a3010d3ceef20093c2a879187e0</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> shipyard/shipyard:latest</span><br><span class="line">Waiting <span class="keyword">for</span> Shipyard on 192.168.48.244:8080</span><br><span class="line"></span><br><span class="line">Shipyard available at http://192.168.48.244:8080</span><br><span class="line">Username: admin Password: shipyard</span><br></pre></td></tr></table></figure><p>登陆拉取镜像，容器启动完成。</p><h3 id="登陆"><a href="#登陆" class="headerlink" title="登陆"></a>登陆</h3><p>通过默认用户密码登陆系统<br><img src="http://static.nsoft.vip/18-12-28/46437989.jpg" alt=""></p><h3 id="容器管理"><a href="#容器管理" class="headerlink" title="容器管理"></a>容器管理</h3><p>从容器列表看shipyard还是能支持swarm的<br><img src="http://static.nsoft.vip/18-12-28/60897773.jpg" alt=""><br>容器的部署，填空题好费劲<br><img src="http://static.nsoft.vip/18-12-28/17896281.jpg" alt=""></p><h3 id="容器详情"><a href="#容器详情" class="headerlink" title="容器详情"></a>容器详情</h3><p><img src="http://static.nsoft.vip/18-12-28/32259239.jpg" alt=""></p><h3 id="镜像管理"><a href="#镜像管理" class="headerlink" title="镜像管理"></a>镜像管理</h3><p><img src="http://static.nsoft.vip/18-12-28/24284176.jpg" alt=""></p><h3 id="安裝节点"><a href="#安裝节点" class="headerlink" title="安裝节点"></a>安裝节点</h3><p>在节点主机上执行如下命令，添加<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -sSL https://raw.githubusercontent.com/shipyard/shipyard-project.com/master/site/themes/shipyard/static/deploy | ACTION=node DISCOVERY=etcd://192.168.48.244:4001 bash -s</span><br></pre></td></tr></table></figure></p><p>执行完如上命令，我在shipyard图形化管理-&gt;节点管理中 并未显示添加的节点，不知道什么原因。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过如上的使用测试，所以还凑合用吧，作者有心无力已停更，所以这个虽然能用，但是如果Docker后续更新了啥这个可能就没法支持了。</p><p><a href="https://github.com/yaonew/docker-training/tree/master/docker-shipyard" target="_blank" rel="noopener">shipyard-deploy</a></p><h2 id="cAdvisor入门"><a href="#cAdvisor入门" class="headerlink" title="cAdvisor入门"></a>cAdvisor入门</h2><p>cAdvisor 是 google 开发的容器监控工具，我们来看看 cAdvisor 功能。</p><p>运行 cAdvisor 容器<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ docker run \</span><br><span class="line">  --volume=/:/rootfs:ro \</span><br><span class="line">  --volume=/var/run:/var/run:rw \</span><br><span class="line">  --volume=/sys:/sys:ro \</span><br><span class="line">  --volume=/var/lib/docker/:/var/lib/docker:ro \</span><br><span class="line">  --publish=8080:8080 \</span><br><span class="line">  --detach=<span class="literal">true</span> \</span><br><span class="line">  --name=cadvisor \</span><br><span class="line">  google/cadvisor:latest</span><br></pre></td></tr></table></figure></p><p>cAdvisor 会显示当前 host 的资源使用情况，包括 CPU、内存、网络、文件系统等。<br>打开速度有点慢<br><img src="http://static.nsoft.vip/18-12-28/48754836.jpg" alt=""><br>点击docker Containers查看运行中的容器列表<br><img src="http://static.nsoft.vip/18-12-28/54849351.jpg" alt=""><br><img src="http://static.nsoft.vip/18-12-28/4125356.jpg" alt=""><br>点击容器连接，可以对当前容器详情进行监控<br><img src="http://static.nsoft.vip/18-12-28/43595564.jpg" alt=""><br><img src="http://static.nsoft.vip/18-12-28/59387056.jpg" alt=""><br>cAdvisor 提供的操作界面略显简陋，而且需要在不同页面之间跳转，打开页面速度稍慢，并且只能监控一个 host，它的一大亮点是它可以将监控到的数据导出给第三方工具如Prometheus，后续继续研究。</p><h2 id="Portainer"><a href="#Portainer" class="headerlink" title="Portainer"></a>Portainer</h2><p>Portainer是一个开源、轻量级Docker管理用户界面，基于Docker API，提供状态显示面板、应用模板快速部署、容器镜像网络数据卷的基本操作（包括上传下载镜像，创建容器等操作）、事件日志显示、容器控制台操作、Swarm集群和服务等集中管理和操作、登录用户管理和控制等功能。功能十分全面，基本能满足中小型企业对容器管理的全部需求。</p><h3 id="单机管理"><a href="#单机管理" class="headerlink" title="单机管理"></a>单机管理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker volume create portainer_data</span><br><span class="line">$ docker run -d -p 9000:9000 --name portainer-test -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer</span><br></pre></td></tr></table></figure><p>执行完成浏览器访问，第一次访问设置管理员密码并登陆<br><img src="http://static.nsoft.vip/18-12-28/80544833.jpg" alt=""><br>选择本地local<br><img src="http://static.nsoft.vip/18-12-28/42469317.jpg" alt=""><br>确定登陆系统后可以对本地主机上的docker容器、镜像、网络进行管理<br><img src="http://static.nsoft.vip/18-12-28/40088382.jpg" alt=""><br>本地主机docker维护<br><img src="http://static.nsoft.vip/18-12-28/42543395.jpg" alt=""></p><h3 id="集群管理"><a href="#集群管理" class="headerlink" title="集群管理"></a>集群管理</h3><p>基于之前我们创建的<a href="https://nsoft.vip/2018/12/05/181205-Docker%E4%B9%8B%E6%97%85-Docker%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%AE%A1%E7%90%86%E5%92%8C%E7%9B%91%E6%8E%A7/">swarm集群</a>，我们可以很方便的将Portainer指挥艇部署在swarm集群上,并对集群进行管理，为避免之前单机测试挂载目录对下面示例的影响（导致新建的portainer无法登陆），我们先删除上面创建的挂载<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker volume rm portainer_data</span><br></pre></td></tr></table></figure></p><p>通过stack创建服务，下载官方yaml文件，并执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl -L https://downloads.portainer.io/portainer-agent-stack.yml -o portainer-agent-stack.yml</span><br><span class="line">$ docker stack deploy --compose-file=portainer-agent-stack.yml portainer</span><br></pre></td></tr></table></figure></p><p>浏览器访问宿主机，如上第一次设置管理员密码并登陆<br><img src="http://static.nsoft.vip/18-12-28/43785463.jpg" alt=""></p><p>对swarm集群主机stack,service,containers进行管理<br><img src="http://static.nsoft.vip/18-12-28/24793369.jpg" alt=""><br><img src="http://static.nsoft.vip/18-12-28/40396286.jpg" alt=""><br><img src="http://static.nsoft.vip/18-12-28/75464079.jpg" alt=""></p><p>swarm详情<br><img src="http://static.nsoft.vip/18-12-28/11767215.jpg" alt=""><br><img src="http://static.nsoft.vip/18-12-28/46750005.jpg" alt=""></p><p>以上实例以ubuntu18.04主机为例测试，window等其他平台安装使用参见<a href="https://www.portainer.io/installation/" target="_blank" rel="noopener">官网文档</a><br>官方演示网址：<a href="http://demo.portainer.io" target="_blank" rel="noopener">http://demo.portainer.io</a> 账号admin 密码 tryportainer</p><p><a href="https://github.com/yaonew/docker-training" target="_blank" rel="noopener">GitHub源码</a></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.portainer.io/" target="_blank" rel="noopener">https://www.portainer.io/</a><br><a href="http://dockone.io/article/1686" target="_blank" rel="noopener">http://dockone.io/article/1686</a><br><a href="https://portainer.readthedocs.io/" target="_blank" rel="noopener">https://portainer.readthedocs.io/</a><br><a href="https://www.fengerzh.com/portainer/" target="_blank" rel="noopener">https://www.fengerzh.com/portainer/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://static.nsoft.vip/18-12-5/24521079.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="微服务" scheme="http://nsoft.vip/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="docker" scheme="http://nsoft.vip/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/docker/"/>
    
    
      <category term="微服务" scheme="http://nsoft.vip/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="docker" scheme="http://nsoft.vip/tags/docker/"/>
    
      <category term="DockerUI" scheme="http://nsoft.vip/tags/DockerUI/"/>
    
      <category term="Shipyard" scheme="http://nsoft.vip/tags/Shipyard/"/>
    
      <category term="cAdvisor" scheme="http://nsoft.vip/tags/cAdvisor/"/>
    
      <category term="Portainer" scheme="http://nsoft.vip/tags/Portainer/"/>
    
  </entry>
  
  <entry>
    <title>Docker之旅-Docker图形化管理和监控(一)</title>
    <link href="http://nsoft.vip/2018/12/05/181205-Docker%E4%B9%8B%E6%97%85-Docker%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%AE%A1%E7%90%86%E5%92%8C%E7%9B%91%E6%8E%A7/"/>
    <id>http://nsoft.vip/2018/12/05/181205-Docker之旅-Docker图形化管理和监控/</id>
    <published>2018-12-05T01:42:50.000Z</published>
    <updated>2018-12-26T06:21:09.121Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://static.nsoft.vip/18-12-5/24521079.jpg" alt=""></p><a id="more"></a><h2 id="Docker管理之官方三剑客"><a href="#Docker管理之官方三剑客" class="headerlink" title="Docker管理之官方三剑客"></a>Docker管理之官方三剑客</h2><h3 id="Docker-Machine"><a href="#Docker-Machine" class="headerlink" title="Docker Machine"></a>Docker Machine</h3><p>Docker Machine 是 Docker 官方提供的一个工具，它可以帮助我们在远程的机器上安装 Docker，或者在虚拟机 host 上直接安装虚拟机并在虚拟机中安装 Docker。我们还可以通过 docker-machine 命令来管理这些虚拟机和 Docker。</p><ul><li>以前你需要登录主机，按照主机及操作系统特有的安装以及配置步骤安装Docker，使其能运行Docker容器。</li><li>现在DockerMachine的产生简化了这一过程，让你可以使用一条命令在你的计算机，公有云平台以及私有数据中心创建及管理Docker主机。</li></ul><h4 id="安装Docker-Machine"><a href="#安装Docker-Machine" class="headerlink" title="安装Docker Machine"></a>安装Docker Machine</h4><p>在macOS和Windows上，Machine会随着<a href="https://docs.docker.com/docker-for-mac/install/" target="_blank" rel="noopener">Docker for Mac</a>, <a href="https://docs.docker.com/docker-for-windows/install/" target="_blank" rel="noopener">Docker for Windows</a>, 或 <a href="https://docs.docker.com/toolbox/overview/" target="_blank" rel="noopener">Docker Toolbox</a>一起安装.</p><h5 id="独立安装Docker-Machine"><a href="#独立安装Docker-Machine" class="headerlink" title="独立安装Docker Machine"></a>独立安装Docker Machine</h5><p>这里以ubuntu 18.04为例，其他系统安装参见官方文档<a href="https://docs.docker.com/machine/overview/" target="_blank" rel="noopener">Docker Machine</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># base=https://github.com/docker/machine/releases/download/v0.16.0 &amp;&amp;</span></span><br><span class="line">  curl -L <span class="variable">$base</span>/docker-machine-$(uname -s)-$(uname -m) &gt;/tmp/docker-machine &amp;&amp;</span><br><span class="line">  sudo install /tmp/docker-machine /usr/<span class="built_in">local</span>/bin/docker-machine</span><br></pre></td></tr></table></figure></p><p>查看 Machine version：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker-machine version</span></span><br><span class="line">docker-machine version 0.16.0, build 702c267f</span><br></pre></td></tr></table></figure></p><h5 id="在远程主机上安装-Docker"><a href="#在远程主机上安装-Docker" class="headerlink" title="在远程主机上安装 Docker"></a>在远程主机上安装 Docker</h5><p>在使用 docker-machine 进行远程安装前我们需要做一些前提准备工作：</p><h6 id="在目标主机上启用root或创建具有sudo权限的普通用户"><a href="#在目标主机上启用root或创建具有sudo权限的普通用户" class="headerlink" title="在目标主机上启用root或创建具有sudo权限的普通用户"></a>在目标主机上启用root或创建具有sudo权限的普通用户</h6><p>启用root ssh 登陆<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#允许root ssh登录</span></span><br><span class="line">$ sudo -i</span><br><span class="line">$ sed -i -e <span class="string">"s/PermitRootLogin without-password/PermitRootLogin yes/g"</span> /etc/ssh/sshd_config</span><br><span class="line"><span class="comment">#重启SSH</span></span><br><span class="line">$ service ssh restart</span><br><span class="line"><span class="comment">#按提示设置root用户密码</span></span><br><span class="line">$ passwd root</span><br></pre></td></tr></table></figure></p><p>或者创建一个具有sudo权限的普通用户,这里以创建一个用户为例<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo adduser worker1</span><br><span class="line">$ sudo usermod -a -G sudo worker1</span><br></pre></td></tr></table></figure></p><h6 id="配置用户ssh免密登录"><a href="#配置用户ssh免密登录" class="headerlink" title="配置用户ssh免密登录"></a>配置用户ssh免密登录</h6><p>启用visiblepw<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo visudo</span><br><span class="line"><span class="comment">#在文件前添加</span></span><br><span class="line">Defaults   visiblepw</span><br><span class="line"><span class="comment">#按Ctrl+O保存 Ctrl+X退出</span></span><br></pre></td></tr></table></figure></p><p>编辑nopasswdsudo<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/sudoers.d/nopasswdsudo</span><br><span class="line">在文件中添加</span><br><span class="line">worker1 ALL=(ALL) NOPASSWD : ALL</span><br></pre></td></tr></table></figure></p><h6 id="把本地用户的-ssh-public-key-添加到目标主机上"><a href="#把本地用户的-ssh-public-key-添加到目标主机上" class="headerlink" title="把本地用户的 ssh public key 添加到目标主机上"></a>把本地用户的 ssh public key 添加到目标主机上</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-copy-id -i ~/.ssh/id_rsa.pub worker1@192.168.48.202</span><br><span class="line"><span class="comment"># 若用户下未生成过key,使用如下命令生成后再执行上条命令</span></span><br><span class="line">$  ssh-keygen</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/root/.ssh/id_rsa): </span><br><span class="line">Created directory <span class="string">'/root/.ssh'</span>.</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:xW6kJVWFItg6Lirdi7G1Jte8+lD3FaA/7BSedCICKt0 root@ubuntu</span><br><span class="line">The key<span class="string">'s randomart image is:</span></span><br><span class="line"><span class="string">+---[RSA 2048]----+</span></span><br><span class="line"><span class="string">|    .  o  o..o.  |</span></span><br><span class="line"><span class="string">| . o .. o+...    |</span></span><br><span class="line"><span class="string">|. o E ..+.O.o    |</span></span><br><span class="line"><span class="string">| .    o. &amp; = .   |</span></span><br><span class="line"><span class="string">|     ...S X .    |</span></span><br><span class="line"><span class="string">|    .... = o     |</span></span><br><span class="line"><span class="string">| ..oo+    o      |</span></span><br><span class="line"><span class="string">|. +=+oo          |</span></span><br><span class="line"><span class="string">| .o+++o.         |</span></span><br><span class="line"><span class="string">+----[SHA256]-----+</span></span><br></pre></td></tr></table></figure><h6 id="在本地主机执行安装命令"><a href="#在本地主机执行安装命令" class="headerlink" title="在本地主机执行安装命令"></a>在本地主机执行安装命令</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ docker-machine create -d generic \</span><br><span class="line">    --generic-ip-address=192.168.48.202 \</span><br><span class="line">    --generic-ssh-user=worker1 \</span><br><span class="line">    --generic-ssh-key ~/.ssh/id_rsa \</span><br><span class="line">    machine-worker1</span><br><span class="line">Running pre-create checks...</span><br><span class="line">Creating machine...</span><br><span class="line">(machine-worker1) Importing SSH key...</span><br><span class="line">Waiting <span class="keyword">for</span> machine to be running, this may take a few minutes...</span><br><span class="line">Detecting operating system of created instance...</span><br><span class="line">Waiting <span class="keyword">for</span> SSH to be available...</span><br><span class="line">Detecting the provisioner...</span><br><span class="line">Provisioning with ubuntu(systemd)...</span><br><span class="line">Installing Docker...</span><br><span class="line">Copying certs to the <span class="built_in">local</span> machine directory...</span><br><span class="line">Copying certs to the remote machine...</span><br><span class="line">Setting Docker configuration on the remote daemon...</span><br><span class="line">Checking connection to Docker...</span><br><span class="line">Docker is up and running!</span><br><span class="line">To see how to connect your Docker Client to the Docker Engine running on this virtual machine, run: docker-machine env machine-worker1</span><br></pre></td></tr></table></figure><p>create 命令创建虚拟主机并安装 Docker<br>-d –driver 的简写形式，主要用来指定使用什么驱动程序来创建目标主机<br>另外支持的驱动详见:<a href="https://docs.docker.com/machine/drivers/" target="_blank" rel="noopener">Machine drivers</a><br>本例中使用 generic 下面以 –generic 开头的三个参数主要是指定操作的目标主机和使用的账户<br>machine-worker1 参数是虚拟机的名称</p><p>检查安装结果<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker-machine ls</span><br><span class="line">NAME              ACTIVE   DRIVER    STATE     URL                         SWARM   DOCKER     ERRORS</span><br><span class="line">machine-worker1   -        generic   Running   tcp://192.168.48.202:2376           v18.09.0</span><br></pre></td></tr></table></figure></p><p>使用本地的客户端连接远程的服务器<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">eval</span> $( docker-machine env machine-worker1)</span><br></pre></td></tr></table></figure></p><p>这样就可以愉快的在本地管理远端的docker了<br>另外docker-machine支持的命令如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Commands:</span><br><span class="line">  active                Print <span class="built_in">which</span> machine is active</span><br><span class="line">  config                Print the connection config <span class="keyword">for</span> machine</span><br><span class="line">  create                Create a machine</span><br><span class="line">  env                   Display the commands to <span class="built_in">set</span> up the environment <span class="keyword">for</span> the Docker client</span><br><span class="line">  inspect               Inspect information about a machine</span><br><span class="line">  ip                    Get the IP address of a machine</span><br><span class="line">  <span class="built_in">kill</span>                  Kill a machine</span><br><span class="line">  ls                    List machines</span><br><span class="line">  provision             Re-provision existing machines</span><br><span class="line">  regenerate-certs      Regenerate TLS Certificates <span class="keyword">for</span> a machine</span><br><span class="line">  restart               Restart a machine</span><br><span class="line">  rm                    Remove a machine</span><br><span class="line">  ssh                   Log into or run a <span class="built_in">command</span> on a machine with SSH.</span><br><span class="line">  scp                   Copy files between machines</span><br><span class="line">  mount                 Mount or unmount a directory from a machine with SSHFS.</span><br><span class="line">  start                 Start a machine</span><br><span class="line">  status                Get the status of a machine</span><br><span class="line">  stop                  Stop a machine</span><br><span class="line">  upgrade               Upgrade a machine to the latest version of Docker</span><br><span class="line">  url                   Get the URL of a machine</span><br><span class="line">  version               Show the Docker Machine version or a machine docker version</span><br><span class="line">  <span class="built_in">help</span>                  Shows a list of commands or <span class="built_in">help</span> <span class="keyword">for</span> one <span class="built_in">command</span></span><br></pre></td></tr></table></figure></p><p> 对于远程管理来说，SSH 的支持是必不可少的！Docker Machine 当然也尽职尽责的完成了任务：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-machine ssh machine-worker1</span><br></pre></td></tr></table></figure></p><p>执行上面的命令，瞬间穿越至目标主机，双击666</p><h3 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h3><p>Docker Compose 是 Docker 官方编排（Orchestration）项目之一，负责快速在集群中部署分布式应用。<br>实际项目中我们不可能就一个docker容器走天下，正常都是要多个容器合作完成任务，如果我们一个一个容器去启动，势必很麻烦头大，docker-compose 可以解决我们的问题，下面简单实例以springboot服务+mysql数据库服务<br>项目结构如下，</p><ul><li>demo 是我们的springboot web工程</li><li>mysql目录，可以加一下针对mysql的配置</li><li>docker-compose.yaml 猪脚，描述如何构建整个服务<br><img src="http://static.nsoft.vip/18-12-21/53100783.jpg" alt=""></li></ul><h4 id="docker-compose-yaml-配置文件"><a href="#docker-compose-yaml-配置文件" class="headerlink" title="docker-compose.yaml 配置文件"></a>docker-compose.yaml 配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">'3'</span></span><br><span class="line">services:</span><br><span class="line">  mysql:</span><br><span class="line">   container_name: demo-mysql</span><br><span class="line">   image: mysql/mysql-server:5.7</span><br><span class="line">   volumes:  </span><br><span class="line">      - ./mysql/data:/var/lib/mysql</span><br><span class="line">   environment:</span><br><span class="line">    MYSQL_DATABASE: demo</span><br><span class="line">    MYSQL_ROOT_PASSWORD: root</span><br><span class="line">    MYSQL_ROOT_HOST: <span class="string">'%'</span></span><br><span class="line">   ports:</span><br><span class="line">   - <span class="string">"3306:3306"</span></span><br><span class="line">   restart: always</span><br><span class="line">    </span><br><span class="line">  demo:</span><br><span class="line">    restart: always</span><br><span class="line">    build: ./demo</span><br><span class="line">    working_dir: /demo</span><br><span class="line">    volumes:</span><br><span class="line">      - /etc/localtime:/etc/localtime:ro</span><br><span class="line">      - ./demo:/demo</span><br><span class="line">      - ~/.m2:/root/.m2</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">"8080:8080"</span></span><br><span class="line">    depends_on:</span><br><span class="line">      - mysql</span><br><span class="line">    <span class="built_in">command</span>: mvn clean spring-boot:run -Dspring-boot.run.profiles=docker</span><br></pre></td></tr></table></figure><ul><li>version: ‘3’： 表示使用第三代语法来构建 docker-compose.yaml 文件。</li><li>services: 用来表示 compose 需要启动的服务，我们可以看出此文件中有2个服务分别为：mysql、demo。</li><li>container_name: 容器名称</li><li>environment: 此节点下的信息会当作环境变量传入容器，此示例中 mysql 服务配置了数据库、密码和权限信息。</li><li>ports: 表示对外开放的端口</li><li>restart: always 表示如果服务启动不成功会一直尝试。</li><li>volumes: 加载本地目录下的配置文件到容器目标地址下</li><li>depends_on：可以配置依赖服务，表示需要先启动 depends_on 下面的服务后，再启动本服务。</li><li>command: mvn clean spring-boot:run -Dspring-boot.run.profiles=docker: 表示以这个命令来启动项目，-Dspring-boot.run.profiles=docker表示使用 application-docker.properties文件配置信息进行启动。</li></ul><h4 id="Spring-Boot-项目配置"><a href="#Spring-Boot-项目配置" class="headerlink" title="Spring Boot 项目配置"></a>Spring Boot 项目配置</h4><p>在demo 目录下也就是和pom.xm文件同级添加Dockerfile文件，文件内容如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FROM maven:3.5-jdk-8</span><br></pre></td></tr></table></figure></p><p>只要这一句，依赖于基础镜像maven3.5和jdk1.8。<br>因为在docker-compose.yaml文件设置了项目启动命令，这里不需要再添加启动命令</p><p>application-docker.properties 添加针对于docker的配置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver</span><br><span class="line">spring.datasource.url=jdbc:mysql://mysql:3306/demo?useUnicode=<span class="literal">true</span>&amp;characterEncoding=utf8&amp;serverTimezone=GMT%2B8</span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=root</span><br></pre></td></tr></table></figure></p><h4 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h4><p>以下命令在docker-compose.yaml 同级目录执行<br>启动服务：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up --build</span><br></pre></td></tr></table></figure></p><p><img src="http://static.nsoft.vip/18-12-21/43057608.jpg" alt=""><br>停止服务:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose down</span><br></pre></td></tr></table></figure></p><p><img src="http://static.nsoft.vip/18-12-21/55843374.jpg" alt=""><br>查看项目中目前的所有容器<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose ps</span><br></pre></td></tr></table></figure></p><p><img src="http://static.nsoft.vip/18-12-21/76050008.jpg" alt=""><br>就是这么简单。</p><p><a href="https://github.com/yaonew/docker-training/tree/master/docker-compose" target="_blank" rel="noopener">项目GitHub源码</a></p><h3 id="Docker-Swarm"><a href="#Docker-Swarm" class="headerlink" title="Docker Swarm"></a>Docker Swarm</h3><p>Swarm是Docker官方提供的一款集群管理工具，其主要作用是把若干台Docker主机抽象为一个整体，并且通过一个入口统一管理这些Docker主机上的各种Docker资源。Swarm和Kubernetes比较类似，但是更加轻，具有的功能也较kubernetes更少一些。Docker Swarm 和 Docker Compose 一样，都是 Docker 官方容器编排项目，但不同的是，Docker Compose 是一个在单个服务器或主机上创建多个容器的工具，而 Docker Swarm 则可以在多个服务器或主机上创建容器集群服务，对于微服务的部署，显然 Docker Swarm 会更加适合。</p><h4 id="Docker-Swarm的获取"><a href="#Docker-Swarm的获取" class="headerlink" title="Docker Swarm的获取"></a>Docker Swarm的获取</h4><p>从Docker(1.12版本以后) swarm 已整体集成在Docker Engine中，这里我们只讨论新版本中docker swarm的使用</p><h4 id="创建一个Swarm的集群"><a href="#创建一个Swarm的集群" class="headerlink" title="创建一个Swarm的集群"></a>创建一个Swarm的集群</h4><p>详细参数参见官方文档<a href="https://docs.docker.com/engine/reference/commandline/swarm_init/#options" target="_blank" rel="noopener">https://docs.docker.com/engine/reference/commandline/swarm_init/#options</a>，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker swarm init [OPTIONS]</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ docker swarm init --listen-addr 0.0.0.0:2377 --advertise-addr 192.168.48.244</span><br><span class="line">Swarm initialized: current node (unegtfborf8ldmn41h89rttzf) is now a manager.</span><br><span class="line"></span><br><span class="line">To add a worker to this swarm, run the following <span class="built_in">command</span>:</span><br><span class="line"></span><br><span class="line">    docker swarm join --token SWMTKN-1-2j9t0uf0a442hks10f4l4bp9fz01j5wkr81twl3mgjyl6fuvva-5i1itkmhe4tehzbqhas4wztns 192.168.48.244:2377</span><br><span class="line"></span><br><span class="line">To add a manager to this swarm, run <span class="string">'docker swarm join-token manager'</span> and follow the instructions.</span><br></pre></td></tr></table></figure><p>–listen-addr 指出的是这个集群暴露给外界调用的HTTPAPI的socket地址<br>–advertise-addr 标志配置了管理节点的 IP 地址。如果你的机器只有一张网卡，可以省略。</p><h4 id="Swarm的集群管理"><a href="#Swarm的集群管理" class="headerlink" title="Swarm的集群管理"></a>Swarm的集群管理</h4><h5 id="向Swarm的集群中添加节点"><a href="#向Swarm的集群中添加节点" class="headerlink" title="向Swarm的集群中添加节点"></a>向Swarm的集群中添加节点</h5><p>分别在第二台、第三台主机上执行以上生成的 docker swarm join –token命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输出添加一个worker节点命令</span></span><br><span class="line">$ docker swarm join-token worker</span><br><span class="line">To add a worker to this swarm, run the following <span class="built_in">command</span>:</span><br><span class="line"></span><br><span class="line">    docker swarm join --token SWMTKN-1-2j9t0uf0a442hks10f4l4bp9fz01j5wkr81twl3mgjyl6fuvva-5i1itkmhe4tehzbqhas4wztns 192.168.48.244:2377</span><br><span class="line"><span class="comment"># 输出添加一个manager节点命令</span></span><br><span class="line">$ docker swarm join-token manager</span><br><span class="line">To add a manager to this swarm, run the following <span class="built_in">command</span>:</span><br><span class="line"></span><br><span class="line">    docker swarm join --token SWMTKN-1-2j9t0uf0a442hks10f4l4bp9fz01j5wkr81twl3mgjyl6fuvva-0f54w8ra5ldg27b8yjwe4kg9r 192.168.48.244:2377</span><br></pre></td></tr></table></figure></p><p>为了不用登陆到每台主机中去执行docker swarm join –token命令，这样太麻烦，我们可以结合上面的docker-machine 命令使用，通过docker-machine create添加两台远程主机<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker-machine ls</span><br><span class="line">NAME              ACTIVE   DRIVER    STATE     URL                         SWARM   DOCKER     ERRORS</span><br><span class="line">machine-worker1   -        generic   Running   tcp://192.168.48.202:2376           v18.09.0   </span><br><span class="line">machine-worker2   -        generic   Running   tcp://192.168.48.203:2376           v18.09.0</span><br></pre></td></tr></table></figure></p><p>分别将machine-worker1，machine-worker2 作为一个节点添加到swarm集群，执行如下命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$  docker-machine ssh machine-worker1 <span class="string">"sudo docker swarm join --token SWMTKN-1-2j9t0uf0a442hks10f4l4bp9fz01j5wkr81twl3mgjyl6fuvva-5i1itkmhe4tehzbqhas4wztns 192.168.48.244:2377"</span></span><br><span class="line">This node joined a swarm as a worker.</span><br><span class="line">$  docker-machine ssh machine-worker2 <span class="string">"sudo docker swarm join --token SWMTKN-1-2j9t0uf0a442hks10f4l4bp9fz01j5wkr81twl3mgjyl6fuvva-5i1itkmhe4tehzbqhas4wztns 192.168.48.244:2377"</span></span><br><span class="line">This node joined a swarm as a worker.</span><br></pre></td></tr></table></figure></p><p>无需登录远程主机，这样两个节点就添加进swarm集群了，查看下当前swarm集群中的节点<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$  docker node ls</span><br><span class="line">ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSION</span><br><span class="line">53bbepypujpr5qi5zzspre7el *   master              Ready               Active              Leader              18.09.0</span><br><span class="line">bifyoaqegffgcmooulu749co5     worker1             Ready               Active                                  18.09.0</span><br><span class="line">d94ktuzewdxl9nkszbibilj24     worker2             Ready               Active                                  18.09.0</span><br></pre></td></tr></table></figure></p><p>这样我们就得到了一个由三个节点组成的小集群，manager本身也自动作为worker一员加入集群</p><h5 id="节点更新"><a href="#节点更新" class="headerlink" title="节点更新"></a>节点更新</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker node update --availability drain worker2</span><br><span class="line">worker2</span><br></pre></td></tr></table></figure><p>可以手动将某个节点的可用性设置为Drain或者active，比如这里将名为worker2的节点设置为drain了之后，可以看到在docker node ls 中出现的新信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker node ls</span><br><span class="line">ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSION</span><br><span class="line">53bbepypujpr5qi5zzspre7el *   master              Ready               Active              Leader              18.09.0</span><br><span class="line">bifyoaqegffgcmooulu749co5     worker1             Ready               Active                                  18.09.0</span><br><span class="line">d94ktuzewdxl9nkszbibilj24     worker2             Ready               Drain                                   18.09.0</span><br></pre></td></tr></table></figure></p><h5 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h5><p>执行命令 docker swarm leave –force<br>这里我们将worker2节点从swarm 集群中移除：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker-machine ssh machine-worker2 <span class="string">"sudo docker swarm leave --force"</span> </span><br><span class="line">Node left the swarm.</span><br></pre></td></tr></table></figure></p><h4 id="构建服务"><a href="#构建服务" class="headerlink" title="构建服务"></a>构建服务</h4><p>在swarm集群中，管理节点是集群中唯一可以执行命令的机器，或授权其他机器作为manager加入群集,worker只是在那里提供服务能力，并且没有权力告诉任何其他机器它能做什么和不能做什么，为了构建下面的集群服务，我们再次执行上面的添加节点操作把worker2节点添加进集群。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker-machine ssh machine-worker2 <span class="string">"sudo docker swarm join --token SWMTKN-1-2j9t0uf0a442hks10f4l4bp9fz01j5wkr81twl3mgjyl6fuvva-5i1itkmhe4tehzbqhas4wztns 192.168.48.244:2377"</span></span><br><span class="line">This node joined a swarm as a worker.</span><br></pre></td></tr></table></figure></p><p>在管理节点执行构建服务命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ docker service create -p 4000:80 --replicas 5 --name helloswarm yaonew/hellowpy:v1</span><br><span class="line">image yaonew/hellowpy:v1 could not be accessed on a registry to record</span><br><span class="line">its digest. Each node will access yaonew/hellowpy:v1 independently,</span><br><span class="line">possibly leading to different nodes running different</span><br><span class="line">versions of the image.</span><br><span class="line"></span><br><span class="line">h926sud2306kg0lirv0dcydwy</span><br><span class="line">overall progress: 5 out of 5 tasks </span><br><span class="line">1/5: running   [==================================================&gt;] </span><br><span class="line">2/5: running   [==================================================&gt;] </span><br><span class="line">3/5: running   [==================================================&gt;] </span><br><span class="line">4/5: running   [==================================================&gt;] </span><br><span class="line">5/5: running   [==================================================&gt;] </span><br><span class="line">verify: Service converged</span><br></pre></td></tr></table></figure></p><p>docker service create 命令创建服务<br>-p 端口映射，将容器80端口映射到宿主机4000端口上<br>–name 标志将服务命名为helloswarm<br>–replicas 标志指定了期望状态为 5 个运行示例<br>yaonew/hellowpy:v1 镜像 这里使用了自己构建的镜像</p><h5 id="查看服务列表"><a href="#查看服务列表" class="headerlink" title="查看服务列表"></a>查看服务列表</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker service ls</span><br><span class="line">ID                  NAME                MODE                REPLICAS            IMAGE                PORTS</span><br><span class="line">h926sud2306k        helloswarm          replicated          5/5                 yaonew/hellowpy:v1</span><br></pre></td></tr></table></figure><h5 id="查看服务详情"><a href="#查看服务详情" class="headerlink" title="查看服务详情"></a>查看服务详情</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ docker service ps helloswarm </span><br><span class="line">ID                  NAME                IMAGE                NODE                DESIRED STATE       CURRENT STATE            ERROR               PORTS</span><br><span class="line">kderyu36u33v        helloswarm.1        yaonew/hellowpy:v1   worker2             Running             Running 15 minutes ago                       </span><br><span class="line">quly9g70410v        helloswarm.2        yaonew/hellowpy:v1   master              Running             Running 15 minutes ago                       </span><br><span class="line">frzcgbjkogia        helloswarm.3        yaonew/hellowpy:v1   worker2             Running             Running 15 minutes ago                       </span><br><span class="line">jr7xux73fpmo        helloswarm.4        yaonew/hellowpy:v1   master              Running             Running 15 minutes ago                       </span><br><span class="line">xpqar72dplms        helloswarm.5        yaonew/hellowpy:v1   worker1             Running             Running 15 minutes ago   </span><br><span class="line">``` </span><br><span class="line">可以看到swarm集群根据算法将期望运行的5个实例分别运行在master、worker1、worker2上，通过浏览器访问http://192.168.48.244:4000 可以看出swarm自动为我们做了负载均衡，每个请求，以循环方式选择5个实例中的一个来响应。</span><br><span class="line"></span><br><span class="line"><span class="comment">##### 伸缩服务</span></span><br><span class="line">``` bash</span><br><span class="line">$ docker service scale helloswarm=10</span><br></pre></td></tr></table></figure><p>通过以上命令可以迅速将helloswarm服务提升至10个实例，之前已经启动的5个实例不受影响，将新构建5个实例，查看服务详情。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ docker service ps helloswarm </span><br><span class="line">ID                  NAME                IMAGE                NODE                DESIRED STATE       CURRENT STATE            ERROR               PORTS</span><br><span class="line">vhyxlovgvjdj        helloswarm.1        yaonew/hellowpy:v1   worker1             Running             Running 9 minutes ago                        </span><br><span class="line">my8fv4gf5pxg        helloswarm.2        yaonew/hellowpy:v1   worker2             Running             Running 9 minutes ago                        </span><br><span class="line">x8p9nuqpmz0p        helloswarm.3        yaonew/hellowpy:v1   master              Running             Running 9 minutes ago                        </span><br><span class="line">zlx5o9m7jyyf        helloswarm.4        yaonew/hellowpy:v1   worker1             Running             Running 9 minutes ago                        </span><br><span class="line">4rbcagnwqn4t        helloswarm.5        yaonew/hellowpy:v1   worker2             Running             Running 9 minutes ago                        </span><br><span class="line">tv4x55ihaq7q        helloswarm.6        yaonew/hellowpy:v1   master              Running             Running 24 seconds ago                       </span><br><span class="line">wvr1dys8psg0        helloswarm.7        yaonew/hellowpy:v1   master              Running             Running 22 seconds ago                       </span><br><span class="line">u7uz9lq8l2cd        helloswarm.8        yaonew/hellowpy:v1   master              Running             Running 23 seconds ago                       </span><br><span class="line">xyt77whcy911        helloswarm.9        yaonew/hellowpy:v1   worker2             Running             Running 30 seconds ago                       </span><br><span class="line">ldi0b1atvzz2        helloswarm.10       yaonew/hellowpy:v1   worker1             Running             Running 30 seconds ago</span><br></pre></td></tr></table></figure></p><h4 id="删除swarm上的服务"><a href="#删除swarm上的服务" class="headerlink" title="删除swarm上的服务"></a>删除swarm上的服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker service rm helloswarm</span><br></pre></td></tr></table></figure><h4 id="通过YAML文件构建服务"><a href="#通过YAML文件构建服务" class="headerlink" title="通过YAML文件构建服务"></a>通过YAML文件构建服务</h4><p>YAML文件，用于定义Docker容器在生产中的行为方式，yaonew/hellowpy:v1 我们自己的镜像，请确保已推送到远程仓库，下面新建docker-compose.yml文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">"3"</span></span><br><span class="line">services:</span><br><span class="line">  web:</span><br><span class="line">    <span class="comment"># replace username/repo:tag with your name and image details</span></span><br><span class="line">    image: yaonew/hellowpy:v1</span><br><span class="line">    deploy:</span><br><span class="line">      replicas: 5</span><br><span class="line">      resources:</span><br><span class="line">        limits:</span><br><span class="line">          cpus: <span class="string">"0.1"</span></span><br><span class="line">          memory: 50M</span><br><span class="line">      restart_policy:</span><br><span class="line">        condition: on-failure</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">"4000:80"</span></span><br><span class="line">    networks:</span><br><span class="line">      - webnet</span><br><span class="line">networks:</span><br><span class="line">  webnet:</span><br></pre></td></tr></table></figure><p>这个docker-compose.yml文件告诉Docker执行以下操作：<br>从注册中心中提取镜像。<br>以此镜像运行5个实例作为一个服务，服务名为web，限制每个实例使用最多10％的CPU（所有核心）和50MB的RAM。<br>如果如果容器出错，立即重启。<br>将主机上的端口4000映射到Web的端口80。<br>指示Web容器通过称为webnet的负载平衡网络共享端口80。<br>默认使用Webnet网络（负载平衡网络）。</p><p>通过yaml文件省去了在命令行添加太多参数的烦恼，运行服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker stack deploy -c docker-compose.yml helloswarm</span><br><span class="line">Creating network helloswarm_webnet</span><br><span class="line">Creating service helloswarm_web</span><br></pre></td></tr></table></figure></p><p>这里创建了一个网络名称为：helloswarm_webnet 创建了一个服务名称：helloswarm_web<br>查看服务详情<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker service ps helloswarm_web </span><br><span class="line">ID                  NAME                IMAGE                NODE                DESIRED STATE       CURRENT STATE                    ERROR               PORTS</span><br><span class="line">v3tzalw6trzg        helloswarm_web.1      yaonew/hellowpy:v1   worker2             Running             Starting 8 seconds ago                               </span><br><span class="line">xa37injkdiov        helloswarm_web.2      yaonew/hellowpy:v1   master              Running             Starting 4 seconds ago                               </span><br><span class="line">y81yo07gzsl7        helloswarm_web.3      yaonew/hellowpy:v1   worker1             Running             Running less than a second ago                       </span><br><span class="line">2ujbxosbiu2z        helloswarm_web.4      yaonew/hellowpy:v1   worker2             Running             Starting 8 seconds ago                               </span><br><span class="line">1fa0jsr09v5i        helloswarm_web.5      yaonew/hellowpy:v1   master              Running             Starting 4 seconds ago</span><br></pre></td></tr></table></figure></p><p>查看容器信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 各主机查看启动容器id</span></span><br><span class="line">$ docker container ls -q</span><br><span class="line"><span class="comment"># 查看所有容器</span></span><br><span class="line">$ docker ps -a</span><br></pre></td></tr></table></figure></p><p>扩展应用<br>我们可以通过更改docker-compose.yml文件，并重新运行docker stack deploy命令来扩展应用程序：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker stack deploy -c docker-compose.yml helloswarm</span><br><span class="line">Updating service helloswarm_web (id: xa3th1y6lwz45ca3c0dpgu872)</span><br><span class="line">image yaonew/hellowpy:v1 could not be accessed on a registry to record</span><br><span class="line">its digest. Each node will access yaonew/hellowpy:v1 independently,</span><br><span class="line">possibly leading to different nodes running different</span><br><span class="line">versions of the image.</span><br></pre></td></tr></table></figure></p><p>Docker执行就地更新，无需杀死任何容器。<br>现在，重新运行docker container ls -q以查看已重新配置的已部署实例。 如果增加实例数量，则会启动更多任务，从而启动更多容器。</p><p>清理退出<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker stack rm helloswarm </span><br><span class="line">Removing service helloswarm_web</span><br><span class="line">Removing network helloswarm_webnet</span><br></pre></td></tr></table></figure></p><p><a href="https://github.com/yaonew/docker-training/tree/master/docker-swarm" target="_blank" rel="noopener">项目GitHub源码</a></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://docs.docker.com/machine/overview/" target="_blank" rel="noopener">https://docs.docker.com/machine/overview/</a><br><a href="http://blog.51cto.com/hashlinux/1772507" target="_blank" rel="noopener">http://blog.51cto.com/hashlinux/1772507</a><br><a href="https://www.cnblogs.com/sparkdev/p/7044950.html" target="_blank" rel="noopener">https://www.cnblogs.com/sparkdev/p/7044950.html</a><br><a href="https://docs.docker.com/compose/overview/" target="_blank" rel="noopener">https://docs.docker.com/compose/overview/</a><br><a href="https://docs.docker.com/engine/reference/commandline/swarm/" target="_blank" rel="noopener">https://docs.docker.com/engine/reference/commandline/swarm/</a><br><a href="https://www.cnblogs.com/franknihao/p/8490416.html" target="_blank" rel="noopener">https://www.cnblogs.com/franknihao/p/8490416.html</a><br><a href="https://blog.csdn.net/u011936655/article/details/81147315" target="_blank" rel="noopener">https://blog.csdn.net/u011936655/article/details/81147315</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://static.nsoft.vip/18-12-5/24521079.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="微服务" scheme="http://nsoft.vip/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="docker" scheme="http://nsoft.vip/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/docker/"/>
    
    
      <category term="微服务" scheme="http://nsoft.vip/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="docker" scheme="http://nsoft.vip/tags/docker/"/>
    
      <category term="Shipyard" scheme="http://nsoft.vip/tags/Shipyard/"/>
    
      <category term="cAdvisor" scheme="http://nsoft.vip/tags/cAdvisor/"/>
    
      <category term="Portainer" scheme="http://nsoft.vip/tags/Portainer/"/>
    
  </entry>
  
  <entry>
    <title>Git常用命令备忘录</title>
    <link href="http://nsoft.vip/2018/11/29/181129-Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://nsoft.vip/2018/11/29/181129-Git常用命令/</id>
    <published>2018-11-29T05:33:02.000Z</published>
    <updated>2018-12-05T02:32:35.742Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://static.nsoft.vip/18-12-5/95855229.jpg" alt=""></p><a id="more"></a><h2 id="备忘教程"><a href="#备忘教程" class="headerlink" title="备忘教程"></a>备忘教程</h2><p><a href="https://learngitbranching.js.org/" title="学习Git教程" target="_blank" rel="noopener">learngitbranching.js.org</a>. </p><h2 id="克隆远程仓库项目"><a href="#克隆远程仓库项目" class="headerlink" title="克隆远程仓库项目"></a>克隆远程仓库项目</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://gitee.com/marspie/git-training.git</span><br></pre></td></tr></table></figure><h2 id="修改提交"><a href="#修改提交" class="headerlink" title="修改提交"></a>修改提交</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> git-training</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">"test"</span> &gt;&gt; a.txt</span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">"test commit"</span></span><br><span class="line">$ git push -u origin master</span><br><span class="line">Enumerating objects: 4, <span class="keyword">done</span>.</span><br><span class="line">Counting objects: 100% (4/4), <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 4 threads</span><br><span class="line">Compressing objects: 100% (2/2), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (3/3), 274 bytes | 137.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">remote: Powered by Gitee.com</span><br><span class="line">To https://gitee.com/marspie/git-training.git</span><br><span class="line">   83f8711..f49cd75  master -&gt; master</span><br><span class="line">Branch <span class="string">'master'</span> <span class="built_in">set</span> up to track remote branch <span class="string">'master'</span> from <span class="string">'origin'</span>.</span><br></pre></td></tr></table></figure><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><h3 id="查看当前分支信息"><a href="#查看当前分支信息" class="headerlink" title="查看当前分支信息"></a>查看当前分支信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* master</span><br><span class="line"></span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Your branch is up to date with <span class="string">'origin/master'</span>.</span><br><span class="line"></span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure><h3 id="创建远程分支"><a href="#创建远程分支" class="headerlink" title="创建远程分支"></a>创建远程分支</h3><p>1、新建本地分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b dev</span><br><span class="line">Switched to a new branch <span class="string">'dev'</span></span><br><span class="line"></span><br><span class="line">$ git branch</span><br><span class="line">* dev</span><br><span class="line">  master</span><br></pre></td></tr></table></figure></p><p>星号(*)表示当前所在分支。现在的状态是成功创建的新的分支并且已经切换到新分支上。</p><p>2、把新建的本地分支push到远程服务器，远程分支与本地分支同名（当然可以随意起名）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin dev:dev</span><br><span class="line">Total 0 (delta 0), reused 0 (delta 0)</span><br><span class="line">remote: Powered by Gitee.com</span><br><span class="line">To https://gitee.com/marspie/git-training.git</span><br><span class="line"> * [new branch]      dev -&gt; dev</span><br></pre></td></tr></table></figure></p><p>3、查看所有分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -a</span><br></pre></td></tr></table></figure></p><p>4、切换分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br></pre></td></tr></table></figure></p><h3 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h3><p>1、推送一个空分支到远程分支，其实就相当于删除远程分支：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin :dev</span><br></pre></td></tr></table></figure></p><p>2、也可以使用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin --delete dev</span><br><span class="line">remote: Powered by Gitee.com</span><br><span class="line">To https://gitee.com/marspie/git-training.git</span><br><span class="line"> - [deleted]         dev</span><br></pre></td></tr></table></figure></p><h3 id="删除本地分支"><a href="#删除本地分支" class="headerlink" title="删除本地分支"></a>删除本地分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -d dev</span><br><span class="line">Deleted branch dev (was f49cd75).</span><br></pre></td></tr></table></figure><h3 id="分支合并"><a href="#分支合并" class="headerlink" title="分支合并"></a>分支合并</h3><p>dev分支的工作成果合并到master分支上<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git merge dev</span><br><span class="line">Updating f49cd75..b7c3423</span><br><span class="line">Fast-forward</span><br><span class="line"> dev.txt | Bin 0 -&gt; 12 bytes</span><br><span class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"> create mode 100644 dev.txt</span><br></pre></td></tr></table></figure></p><h2 id="Git回退"><a href="#Git回退" class="headerlink" title="Git回退"></a>Git回退</h2><p>查看 git 日志<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> -3</span><br><span class="line">commit b9efa3bb30dfe635e40f42ec6a45ada0e06b4712 (HEAD -&gt; dev2)</span><br><span class="line">Author: yaonew &lt;yaonew@126.com&gt;</span><br><span class="line">Date:   Thu Nov 29 14:33:25 2018 +0800</span><br><span class="line"></span><br><span class="line">    dev2 modify</span><br><span class="line"></span><br><span class="line">commit a262f949bbd3fe881e6c5ecdc5c0bb2735b0d8c7 (origin/dev2)</span><br><span class="line">Author: yaonew &lt;yaonew@126.com&gt;</span><br><span class="line">Date:   Thu Nov 29 14:31:01 2018 +0800</span><br><span class="line"></span><br><span class="line">    dev2 commit</span><br><span class="line"></span><br><span class="line">commit b7c342333b482ea3f3b9c3b0231d26fd322ec326 (origin/dev, dev)</span><br><span class="line">Author: yaonew &lt;yaonew@126.com&gt;</span><br><span class="line">Date:   Thu Nov 29 14:19:07 2018 +0800</span><br><span class="line"></span><br><span class="line">    dev branch</span><br></pre></td></tr></table></figure></p><p>回退到指定版本<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard a262f949bbd3fe881e6c5ecdc5</span><br></pre></td></tr></table></figure></p><p>强制提交<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push -f origin dev2</span><br></pre></td></tr></table></figure></p><p>参考<br><a href="https://blog.csdn.net/yeputi1015/article/details/80571204" target="_blank" rel="noopener">https://blog.csdn.net/yeputi1015/article/details/80571204</a><br><a href="https://www.cnblogs.com/wancy86/p/5848024.html" target="_blank" rel="noopener">https://www.cnblogs.com/wancy86/p/5848024.html</a><br><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001375840038939c291467cc7c747b1810aab2fb8863508000" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001375840038939c291467cc7c747b1810aab2fb8863508000</a><br><a href="https://www.cnblogs.com/wangmingshun/p/5425150.html" target="_blank" rel="noopener">https://www.cnblogs.com/wangmingshun/p/5425150.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://static.nsoft.vip/18-12-5/95855229.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="协作" scheme="http://nsoft.vip/categories/%E5%8D%8F%E4%BD%9C/"/>
    
      <category term="git" scheme="http://nsoft.vip/categories/%E5%8D%8F%E4%BD%9C/git/"/>
    
    
      <category term="git" scheme="http://nsoft.vip/tags/git/"/>
    
      <category term="命令" scheme="http://nsoft.vip/tags/%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>一台电脑多个github账号设置</title>
    <link href="http://nsoft.vip/2018/07/21/180721-%E4%B8%80%E5%8F%B0%E7%94%B5%E8%84%91%E5%A4%9A%E4%B8%AAgithub%E8%B4%A6%E5%8F%B7%E8%AE%BE%E7%BD%AE/"/>
    <id>http://nsoft.vip/2018/07/21/180721-一台电脑多个github账号设置/</id>
    <published>2018-07-21T14:16:37.000Z</published>
    <updated>2018-11-28T06:48:38.027Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://static.nsoft.vip/18-7-23/47063187.jpg" alt=""><br>如何在一台电脑上使用多个github账号，由于之前已经配置过一个github账号，最近又注册了了一个账号，显然现在多账号的问题出现在自己面前，于是就扒了下多账号的设置。希望对遇到同样问题的你有一点帮助。</p><a id="more"></a><h3 id="生成多个SSH-Key"><a href="#生成多个SSH-Key" class="headerlink" title="生成多个SSH Key"></a>生成多个SSH Key</h3><p>进入用户家目录Windows 使用Git Bash, Linux 打开terminal. 各系统对应的目录位置如下：<br>Windows目录: C:\Users\用户名.ssh<br>Linux\Mac目录：~/.ssh  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C email</span><br></pre></td></tr></table></figure><p>输入如上命令，email 替换成需要生成key的邮箱回车，由于是多账号，我们需要修改默认的id_rsa 文件的名称，这里我们加上后缀，标实不同的github账号，输入密码部分可以留空或输入，若输入密码后续git push到远程仓库时均需输入此处设置的密码,方便起见我们使用ssh-agent（详见下文），回车若看到如下图所示，表示生成ssh key 成功了，重复如上操作生成多个ssh key。<br><img src="http://static.nsoft.vip/18-7-23/41537601.jpg" alt=""><br>进入用户家目录下的.ssh文件目录下，可以看到我们生成的多组key, id_rsa id_rsa.pub分别对应私钥与公钥<br><img src="http://static.nsoft.vip/18-7-23/55749639.jpg" alt=""></p><h3 id="配置Config文件"><a href="#配置Config文件" class="headerlink" title="配置Config文件"></a>配置Config文件</h3><p>为了让git知道我们用哪个账号提交，这里需要配置config文件，在当前家目录 .ssh文件夹下新建config文件，配置如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 配置github1</span><br><span class="line">Host yaonew.com                 # 自定义的host简称</span><br><span class="line">    HostName github.com         # 主机名可用ip也可以是域名</span><br><span class="line">    IdentityFile C:\\Users\\peeka\\.ssh\\id_rsa_yaonew   # 证书文件路径</span><br><span class="line"># 认证方式 可以设为 publickey,password publickey,keyboard-interactive</span><br><span class="line">    PreferredAuthentications publickey </span><br><span class="line">    User git                    # 登录用户名</span><br><span class="line"></span><br><span class="line"># 配置github2</span><br><span class="line">Host marspie.com </span><br><span class="line">    HostName github.com</span><br><span class="line">    IdentityFile C:\\Users\\peeka\\.ssh\\id_rsa_marspie</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    User git</span><br></pre></td></tr></table></figure><p>配置完以上信息后，git clone的链接应修改为如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 原始clone 地址</span><br><span class="line">git@github.com:yaonew/test1.git</span><br><span class="line">git@github.com:marspie/test2.git</span><br><span class="line"></span><br><span class="line"># 新clone地址</span><br><span class="line">git@yaonew.com:yaonew/test1.git</span><br><span class="line">git@marspie.com:marspie/test2.git</span><br></pre></td></tr></table></figure><h3 id="登陆Github添加公钥"><a href="#登陆Github添加公钥" class="headerlink" title="登陆Github添加公钥"></a>登陆Github添加公钥</h3><p>分别登陆两个github账号，进入Settings –&gt; SSH and GPG keys，拷贝~/.ssh 下.pub公钥文件内容添加至github<br><img src="http://static.nsoft.vip/18-7-23/16798650.jpg" alt=""><br><img src="http://static.nsoft.vip/18-7-23/80424136.jpg" alt=""></p><h3 id="SSH连接测试"><a href="#SSH连接测试" class="headerlink" title="SSH连接测试"></a>SSH连接测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br><span class="line">ssh -T git@marspie.com</span><br></pre></td></tr></table></figure><p><img src="http://static.nsoft.vip/18-7-23/80089082.jpg" alt=""><br>当看到如上信息时测试成功，同时远端github的钥匙已变成绿色<br><img src="http://static.nsoft.vip/18-7-23/28875863.jpg" alt=""></p><h3 id="本地git设置"><a href="#本地git设置" class="headerlink" title="本地git设置"></a>本地git设置</h3><p>这样设置过就OK了吗，显然不行，由于之前使用过一个github账号，并设置了全局git账号，这里需要移除<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 原有全局账号设置</span><br><span class="line">git config --golbal user.name &quot;name&quot;</span><br><span class="line">git config --golbal user.email &quot;xxx@qq.com&quot;</span><br><span class="line"></span><br><span class="line">#全局配置账户、邮箱已经移除</span><br><span class="line">git config --global --unset user.name</span><br><span class="line">git config --global --unset user.email</span><br><span class="line"></span><br><span class="line">#查看全局用户名、全局邮箱</span><br><span class="line">git config --global user.name</span><br><span class="line">git config --global user.email</span><br></pre></td></tr></table></figure></p><p>然后在具体的工程目录下设置用户及邮箱</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name yaonew</span><br><span class="line">git config user.email yaonew@126.com</span><br></pre></td></tr></table></figure><p>分别做相应账号工程下做相应修改并提及<br><img src="http://static.nsoft.vip/18-7-23/39513143.jpg" alt=""><br><img src="http://static.nsoft.vip/18-7-23/56876011.jpg" alt=""></p><h3 id="ssh-agent"><a href="#ssh-agent" class="headerlink" title="ssh-agent"></a>ssh-agent</h3><p>因为我们生成ssh key设置了密码，每次git push 认证时都需要输入密码，显然这不是我们希望的，ssh-agent是一个密钥管理器，运行ssh-agent以后，使用<a href="http://man.linuxde.net/ssh-add" title="ssh-add命令" target="_blank" rel="noopener">ssh-add</a>将私钥交给ssh-agent保管，其他程序需要身份验证的时候可以将验证申请交给ssh-agent来完成整个认证过程。</p><h4 id="打开-ssh-agent"><a href="#打开-ssh-agent" class="headerlink" title="打开 ssh-agent"></a>打开 ssh-agent</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># github官方的bash</span><br><span class="line">ssh-agent -s</span><br><span class="line"># 其它，比如msysgit</span><br><span class="line">eval $(ssh-agent -s)</span><br></pre></td></tr></table></figure><h4 id="添加私钥"><a href="#添加私钥" class="headerlink" title="添加私钥"></a>添加私钥</h4><p>添加秘钥时输入密码后续的认证就交由ssh-agent了，直接提交丝般顺滑 ^_^</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-add ~/.ssh/id_rsa_yaonew</span><br><span class="line">ssh-add ~/.ssh/id_rsa_marspie</span><br></pre></td></tr></table></figure><p><img src="http://static.nsoft.vip/18-7-24/94460676.jpg" alt=""></p><p>愉快的多账号之旅开始了。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://static.nsoft.vip/18-7-23/47063187.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;如何在一台电脑上使用多个github账号，由于之前已经配置过一个github账号，最近又注册了了一个账号，显然现在多账号的问题出现在自己面前，于是就扒了下多账号的设置。希望对遇到同样问题的你有一点帮助。&lt;/p&gt;
    
    </summary>
    
      <category term="协作" scheme="http://nsoft.vip/categories/%E5%8D%8F%E4%BD%9C/"/>
    
      <category term="git" scheme="http://nsoft.vip/categories/%E5%8D%8F%E4%BD%9C/git/"/>
    
    
      <category term="Git" scheme="http://nsoft.vip/tags/Git/"/>
    
      <category term="Linux" scheme="http://nsoft.vip/tags/Linux/"/>
    
      <category term="github" scheme="http://nsoft.vip/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>微服务从入门到放弃之概述</title>
    <link href="http://nsoft.vip/2017/10/12/171012-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%E4%B9%8B%E6%A6%82%E8%BF%B0/"/>
    <id>http://nsoft.vip/2017/10/12/171012-微服务从入门到放弃之概述/</id>
    <published>2017-10-12T06:32:52.000Z</published>
    <updated>2018-12-05T01:45:54.114Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>微服务真的很火，很新，很潮，很多人说到微服务都能侃侃而谈，各种新鲜的名词、概念、框架止不住地蹦出来，但是：什么时候应当实行微服务呢？实行微服务应当要注意些什么呢？，首先我们了解下新生的微服务架构与传统架构有哪些区别。<br><img src="http://static.nsoft.vip/18-11-28/15585315.jpg" alt="QQ截图20171023151415.png"></p><a id="more"></a><h2 id="传统架构"><a href="#传统架构" class="headerlink" title="传统架构"></a>传统架构</h2><h3 id="单体架构"><a href="#单体架构" class="headerlink" title="单体架构"></a>单体架构</h3><p>Web应用发展早期，大部分Web工程将所有的功能模块打包到一起后放到Web容器中运行，很多企业的Jave应用程序打包成war,ear 它们的主要特点：</p><ol><li>一个程序包包含了应用所有功能， 通常称之为单体应用。</li><li>架构单体应用的架构风格， 我们称之为单体架构， 这是一种比较传统的架构风格。</li></ol><p><img src="http://static.nsoft.vip/18-11-28/51749077.jpg" alt="单体架构.png"></p><h4 id="单体架构缺点"><a href="#单体架构缺点" class="headerlink" title="单体架构缺点"></a>单体架构缺点</h4><ul><li>复杂性逐渐变高 - 由于业务的不断修改深入，系统变得越来越庞大，复杂度越来越高。</li><li>技术债务逐渐上升 - 参与项目的人员流动，水平不同，人员往往会埋坑，问题没有得到解决，坑越来越多。</li><li>部署速度逐渐变慢 - 业务模块增多，代码量不断增多，部署启动速度相应的越来越慢。</li><li>阻碍技术创新 - 技术在发展，历史的架构选型注定了系统形态，新的模块需求依然需要使用老旧的技术。</li><li>无法按需伸缩（出现IO或CPU瓶颈时需要兼顾或妥协）</li></ul><h2 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h2><h3 id="微服务是什么"><a href="#微服务是什么" class="headerlink" title="微服务是什么"></a>微服务是什么</h3><p>lMartin Fowler：简而言之，微服务架构风格这种开发方法，是以开发一组小型服务的方式来开发一个独立的应用系统的。其中每个小型服务都运行在自己的进程中，并经常采用HTTP资源API这样轻量的机制来相互通信。这些服务围绕业务功能进行构建，并能通过全自动的部署机制来进行独立部署。这些微服务可以使用不同的语言来编写，并且可以使用不同的数据存储技术。对这些微服务我们仅做最低限度的集中管理。<br>来自：<a href="http://www.martinfowler.com/articles/microservices.html" target="_blank" rel="noopener">http://www.martinfowler.com/articles/microservices.html</a></p><p><img src="http://static.nsoft.vip/18-11-28/11550801.jpg" alt="微服务架构.png"></p><h3 id="微服务解决了什么"><a href="#微服务解决了什么" class="headerlink" title="微服务解决了什么"></a>微服务解决了什么</h3><h3 id="微服务特性"><a href="#微服务特性" class="headerlink" title="微服务特性"></a>微服务特性</h3><ol><li>每个微服务可独立运行在自己的进程里；</li><li>一系列独立运行的微服务共同构建起了整个系统；</li><li>每个服务为独立的业务开发，一个微服务一般完成某个特定的功能，比如：订单管理、用户管理等；</li><li>微服务之间通过一些轻量的通信机制进行通信，例如通过REST API或者RPC的方式进行调用。</li></ol><h3 id="微服务的优点"><a href="#微服务的优点" class="headerlink" title="微服务的优点"></a>微服务的优点</h3><ul><li>启动较快</li><li>局部修改容易部署</li><li>技术栈不受限</li><li>按需伸缩</li><li>DevOps </li></ul><h3 id="微服务带来的挑战"><a href="#微服务带来的挑战" class="headerlink" title="微服务带来的挑战"></a>微服务带来的挑战</h3><ul><li>边界清晰 - 软件架构开发中如何合理的划分边界，边界清晰和技术限制之间做出权衡</li><li>运维要求较高 - 服务之间相互依赖运维需要清晰的知道服务之间的依赖关系</li><li>分布式的复杂性 - 分布式系统固有的复杂性，网络问题，完整的监控，如何保持一致性，事务保障，高可用性等等 </li><li>接口调整成本高 - 一个服务接口的调整可能涉及到多服务需要同时调整</li><li>重复劳动 - 一个个微服务既然名曰”服务”，就得五脏俱全，就得螺蛳壳里做道场, 麻雀虽小五脏全该有的基础功能数据库的访问，工具类使用，IO处理，网络，各个服务里面都得处理。</li></ul><h3 id="微服务设计原则"><a href="#微服务设计原则" class="headerlink" title="微服务设计原则"></a>微服务设计原则</h3><ul><li>单一职责原则-[Single Responsible Principle] ，即每个服务只做一件事，并把这件事做好；</li><li>服务自治原则- 每个微服务需要有自己独立的开发、测试、部署、运维。</li><li>轻量级通信原则 -  通讯协议需要跨平台，跨语言，不要绑定技术栈。</li><li>接口明确原则 - 一个微服务接口的修改可能相关联的微服务也需要跟着修改，这时需要提前规划好，避免接口修改</li></ul><h2 id="总论"><a href="#总论" class="headerlink" title="总论"></a>总论</h2><p>总的来说，从传统架构到SOA再到微服务架构，微服务带来了很多全新的东西，可以解决传统架构的一些问题，但同时对系统的架构技术也提出的更高的要求，实现微服务也需要一定的前提条件，，我们不能一味的认为微服务架构好。微服务这种分开当家当然潇洒，但要知道自己当家也有自己的累。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;微服务真的很火，很新，很潮，很多人说到微服务都能侃侃而谈，各种新鲜的名词、概念、框架止不住地蹦出来，但是：什么时候应当实行微服务呢？实行微服务应当要注意些什么呢？，首先我们了解下新生的微服务架构与传统架构有哪些区别。&lt;br&gt;&lt;img src=&quot;http://static.nsoft.vip/18-11-28/15585315.jpg&quot; alt=&quot;QQ截图20171023151415.png&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="微服务" scheme="http://nsoft.vip/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="微服务" scheme="http://nsoft.vip/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Docker之旅-使用阿里云Docker镜像库加速</title>
    <link href="http://nsoft.vip/2017/09/15/170915-Docker%E4%B9%8B%E6%97%85-%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91Docker%E9%95%9C%E5%83%8F%E5%BA%93%E5%8A%A0%E9%80%9F/"/>
    <id>http://nsoft.vip/2017/09/15/170915-Docker之旅-使用阿里云Docker镜像库加速/</id>
    <published>2017-09-15T06:30:52.000Z</published>
    <updated>2018-12-05T01:45:54.910Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用阿里云Docker镜像库加速"><a href="#使用阿里云Docker镜像库加速" class="headerlink" title="使用阿里云Docker镜像库加速"></a>使用阿里云Docker镜像库加速</h2><p>官方的docker hub 访问实在太慢，国内使用阿里云<a href="https://dev.aliyun.com/search.html" target="_blank" rel="noopener">Docker镜像库</a>,可以大大加快镜像的下载速度，访问Docker镜像库开通了阿里云开发者帐号，进入管理中心，获取您的专属加速器地址。<br><img src="http://static.nsoft.vip/18-11-28/94459845.jpg" alt="阿里云开发者平台.png"></p><a id="more"></a><p>根据操作文档，选择对应您的操作系统，目前提供了Ubuntu、CentOS、Window、Mac系统的操作说明:</p><h2 id="一、Ubuntu"><a href="#一、Ubuntu" class="headerlink" title="一、Ubuntu"></a>一、Ubuntu</h2><h3 id="安装／升级你的Docker客户端"><a href="#安装／升级你的Docker客户端" class="headerlink" title="安装／升级你的Docker客户端"></a>安装／升级你的Docker客户端</h3><p>推荐安装1.10.0以上版本的Docker客户端。<br>或执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL http://acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker-engine/internet | sh -</span><br></pre></td></tr></table></figure><h3 id="使用Docker加速器"><a href="#使用Docker加速器" class="headerlink" title="使用Docker加速器"></a>使用Docker加速器</h3><p>针对Docker客户端版本大于1.10的用户，可以通过修改daemon配置文件/etc/docker/daemon.json来使用加速器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-<span class="string">'EOF'</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [<span class="string">"https://z8b39a7q.mirror.aliyuncs.com"</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="二、CentOS"><a href="#二、CentOS" class="headerlink" title="二、CentOS"></a>二、CentOS</h2><h3 id="安装／升级你的Docker客户端-1"><a href="#安装／升级你的Docker客户端-1" class="headerlink" title="安装／升级你的Docker客户端"></a>安装／升级你的Docker客户端</h3><p>推荐安装1.10.0以上版本的Docker客户端。<br>您可以通过阿里云的镜像仓库下载：<a href="http://mirrors.aliyun.com/help/docker-ce?spm=a2c1q.8351553.0.0.26abf789oI02QT" target="_blank" rel="noopener">docker-ce</a><br>或执行以下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL http://acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker-engine/internet | sh -</span><br><span class="line">``` </span><br><span class="line"><span class="comment">### 如何使用Docker加速器</span></span><br><span class="line">针对Docker客户端版本大于1.10的用户</span><br><span class="line">您可以通过修改daemon配置文件/etc/docker/daemon.json来使用加速器：</span><br><span class="line">``` bash</span><br><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-<span class="string">'EOF'</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [<span class="string">"https://z8b39a7q.mirror.aliyuncs.com"</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line"><span class="comment">## 三、Window</span></span><br><span class="line"><span class="comment">### 安装／升级你的Docker客户端</span></span><br><span class="line">    1. 对于Windows 10以下的用户 推荐使用 Docker Toolbox</span><br><span class="line">        Toolbox的介绍和帮助：mirrors.aliyun.com/<span class="built_in">help</span>/docker-toolbox</span><br><span class="line">        Windows系统的安装文件目录：http://mirrors.aliyun.com/docker-toolbox/windows/docker-toolbox/</span><br><span class="line">    2. 对于Windows 10以上的用户 推荐使用 Docker <span class="keyword">for</span> Windows</span><br><span class="line">        Windows系统的安装文件目录：http://mirrors.aliyun.com/docker-toolbox/windows/docker-for-windows/</span><br><span class="line"><span class="comment">### 如何使用Docker加速器</span></span><br><span class="line">1. 创建一台安装有Docker环境的Linux虚拟机，指定机器名称为default，同时配置Docker加速器地址。</span><br><span class="line">``` bash</span><br><span class="line">docker-machine create --engine-registry-mirror=https://z8b39a7q.mirror.aliyuncs.com -d virtualbox default</span><br><span class="line">``` </span><br><span class="line">2. 查看机器的环境配置，并配置到本地，并通过Docker客户端访问Docker服务。</span><br><span class="line">``` bash</span><br><span class="line">docker-machine env default</span><br><span class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$(docker-machine env default)</span>"</span></span><br><span class="line">docker info</span><br></pre></td></tr></table></figure></p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li><p>Docker for Windows 和 Docker Toolbox是不兼容，如果同时安装两者的话，需要使用hyperv的参数启动。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-machine create --engine-registry-mirror=https://z8b39a7q.mirror.aliyuncs.com -d hyperv default</span><br></pre></td></tr></table></figure></li><li><p>Docker for Windows 有两种运行模式，一种运行Windows相关容器，一种运行传统的Linux容器。同一时间只能选择一种模式运行。</p></li></ol><h2 id="四、Mac"><a href="#四、Mac" class="headerlink" title="四、Mac"></a>四、Mac</h2><h3 id="安装／升级你的Docker客户端-2"><a href="#安装／升级你的Docker客户端-2" class="headerlink" title="安装／升级你的Docker客户端"></a>安装／升级你的Docker客户端</h3><pre><code>1. 对于10.10.3以下的用户 推荐使用 Docker Toolbox    Toolbox的介绍和帮助：mirrors.aliyun.com/help/docker-toolbox    Mac系统的安装文件目录：http://mirrors.aliyun.com/docker-toolbox/mac/docker-toolbox/2. 对于10.10.3以上的用户 推荐使用 Docker for Mac    Mac系统的安装文件目录：http://mirrors.aliyun.com/docker-toolbox/mac/docker-for-mac/</code></pre><h3 id="如何使用Docker加速器"><a href="#如何使用Docker加速器" class="headerlink" title="如何使用Docker加速器"></a>如何使用Docker加速器</h3><ol><li>创建一台安装有Docker环境的Linux虚拟机，指定机器名称为default，同时配置Docker加速器地址。<pre><code class="bash">docker-machine create --engine-registry-mirror=https://z8b39a7q.mirror.aliyuncs.com -d virtualbox default</code></pre></li><li>查看机器的环境配置，并配置到本地，并通过Docker客户端访问Docker服务。<pre><code class="bash">docker-machine env default<span class="built_in">eval</span> <span class="string">"<span class="variable">$(docker-machine env default)</span>"</span>docker info</code></pre></li></ol><p><strong>设置完成，接着我们再试下pull一个镜像，是不是有种飞起来的赶脚O(∩_∩)O~</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;使用阿里云Docker镜像库加速&quot;&gt;&lt;a href=&quot;#使用阿里云Docker镜像库加速&quot; class=&quot;headerlink&quot; title=&quot;使用阿里云Docker镜像库加速&quot;&gt;&lt;/a&gt;使用阿里云Docker镜像库加速&lt;/h2&gt;&lt;p&gt;官方的docker hub 访问实在太慢，国内使用阿里云&lt;a href=&quot;https://dev.aliyun.com/search.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Docker镜像库&lt;/a&gt;,可以大大加快镜像的下载速度，访问Docker镜像库开通了阿里云开发者帐号，进入管理中心，获取您的专属加速器地址。&lt;br&gt;&lt;img src=&quot;http://static.nsoft.vip/18-11-28/94459845.jpg&quot; alt=&quot;阿里云开发者平台.png&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="微服务" scheme="http://nsoft.vip/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="docker" scheme="http://nsoft.vip/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/docker/"/>
    
    
      <category term="微服务" scheme="http://nsoft.vip/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="docker" scheme="http://nsoft.vip/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker之旅-Docker互联</title>
    <link href="http://nsoft.vip/2017/09/11/170911-Docker%E4%B9%8B%E6%97%85-Docker%E4%BA%92%E8%81%94/"/>
    <id>http://nsoft.vip/2017/09/11/170911-Docker之旅-Docker互联/</id>
    <published>2017-09-11T06:29:43.000Z</published>
    <updated>2018-12-05T01:45:56.533Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker的互联方式"><a href="#Docker的互联方式" class="headerlink" title="Docker的互联方式"></a>Docker的互联方式</h2><ul><li>基于Volume的互联</li><li>基于Link的互联</li><li>基于网络的互联</li></ul><a id="more"></a><h2 id="基于Volume的互联"><a href="#基于Volume的互联" class="headerlink" title="基于Volume的互联"></a>基于Volume的互联</h2><p>在docker run 启动一个容器的时候，我们可以通过设置 -v 参数将宿主机目录映射到容器目录，这样容器对映射路径下数据的修改即使在容器被删除的情况下，数据还能够保留。<br><img src="http://static.nsoft.vip/18-11-28/50640757.jpg" alt="run_docker_with_v.png"><br>进入learn目录，在此目录下创建 一个文件夹<br><img src="http://static.nsoft.vip/18-11-28/35404330.jpg" alt="run_docker_with_v2.png"><br>查看容器详情，在Mounts 节点我们可以看到/learn 目录对应的宿主机目录，进入：/var/lib/docker/volumes/858c12a2fed04733b27256ae57a1f76455e9f0030182ad405bf5fd5aa049c54d/_data<br>docker inspect 4bc0f1e4a005<br><img src="http://static.nsoft.vip/18-11-28/5039599.jpg" alt="run_docker_with_v3.png"><br>查看宿主机的目录，我们可以发现我们在容器中创建的 testvolume 文件夹目录<br><img src="http://static.nsoft.vip/18-11-28/84724374.jpg" alt="run_docker_with_v4.png"><br>可以多个容器中的Volume指向宿主机的同一个目录，实现基于文件的的共享访问<br><img src="http://static.nsoft.vip/18-11-28/26996813.jpg" alt="run_docker_with_v5.png"><br><img src="http://static.nsoft.vip/18-11-28/61031998.jpg" alt="run_docker_with_v6.png"><br>基于容器数据的的单主机互联<br><img src="http://static.nsoft.vip/18-11-28/7551785.jpg" alt="run_docker_with_v7.png"></p><h2 id="基于Link的互联"><a href="#基于Link的互联" class="headerlink" title="基于Link的互联"></a>基于Link的互联</h2><p>启用一个mysql docker 容器</p><pre><code class="bash">docker run --rm=<span class="literal">true</span> --name=marspiedb -e MYSQL_ROOT_PASSWORD=123456 mysql</code></pre><p><img src="http://static.nsoft.vip/18-11-28/46517357.jpg" alt="run_docker_link1.png"><br>查看我们创建的marspiedb 详细信息</p><pre><code class="bash"><span class="comment"># docker inspect marspiedb</span></code></pre><p><img src="http://static.nsoft.vip/18-11-28/49657221.jpg" alt="run_docker_link2.png"><br>Docker默认允许container互通，通过-icc=false关闭互通。一旦关闭了互通，只能通过-link name:alias命令连接指定container.<br><img src="http://static.nsoft.vip/18-11-28/48657048.jpg" alt="run_docker_link3.png"><br>– link redis:db的别名，会在/etc/hosts中生成对应的ip映射<br><img src="http://static.nsoft.vip/18-11-28/28455858.jpg" alt="run_docker_link4.png"><br>Link跨主机的互联,使用 Docker远程代理（Ambassador）模式，<a href="https://github.com/gliderlabs/connectable" target="_blank" rel="noopener">https://github.com/gliderlabs/connectable</a><br>socat是一个多功能的网络工具，名字来由是”Socket CAT”</p><h2 id="基于网络的互联"><a href="#基于网络的互联" class="headerlink" title="基于网络的互联"></a>基于网络的互联</h2><ol><li>最常用的方式端口映射，将docker端口映射到宿主机，直接通过宿主机IP：映射端口 访问<pre><code class="bash">docker run --rm=<span class="literal">true</span> --name=marspiedb -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql</code></pre></li><li>直接使用宿主机网络<pre><code class="bash">docker run --rm=<span class="literal">true</span> --net=host --name=marspiedb -e MYSQL_ROOT_PASSWORD=123456 mysql</code></pre></li><li>容器共用一个IP地址<pre><code class="bash">docker run --rm=<span class="literal">true</span> --name=marspiedb -e MYSQL_ROOT_PASSWORD=123456 mysqldocker run --rm=<span class="literal">true</span> --net=container:marspiedb java ip addr</code></pre><img src="http://static.nsoft.vip/18-11-28/73127528.jpg" alt="run_docker_net1.png"><br>同一个IP 使用localhost 就可以很愉快的访问(⊙o⊙)哦<br><img src="http://static.nsoft.vip/18-11-28/84566791.jpg" alt="run_docker_net2.png"></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Docker的互联方式&quot;&gt;&lt;a href=&quot;#Docker的互联方式&quot; class=&quot;headerlink&quot; title=&quot;Docker的互联方式&quot;&gt;&lt;/a&gt;Docker的互联方式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;基于Volume的互联&lt;/li&gt;
&lt;li&gt;基于Link的互联&lt;/li&gt;
&lt;li&gt;基于网络的互联&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="微服务" scheme="http://nsoft.vip/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="docker" scheme="http://nsoft.vip/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/docker/"/>
    
    
      <category term="微服务" scheme="http://nsoft.vip/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="docker" scheme="http://nsoft.vip/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker之旅-Docker镜像制作</title>
    <link href="http://nsoft.vip/2017/07/25/170725-Docker%E4%B9%8B%E6%97%85-Docker%E9%95%9C%E5%83%8F%E5%88%B6%E4%BD%9C/"/>
    <id>http://nsoft.vip/2017/07/25/170725-Docker之旅-Docker镜像制作/</id>
    <published>2017-07-25T06:28:09.000Z</published>
    <updated>2018-12-05T01:45:57.305Z</updated>
    
    <content type="html"><![CDATA[<h2 id="制作自己的Docker镜像"><a href="#制作自己的Docker镜像" class="headerlink" title="制作自己的Docker镜像"></a>制作自己的Docker镜像</h2><p>制作自己的Docker镜像有两种方式</p><ol><li>将容器变成镜像</li><li>通过Buildfile语法制作镜像</li></ol><a id="more"></a><h3 id="将容器变成镜像"><a href="#将容器变成镜像" class="headerlink" title="将容器变成镜像"></a>将容器变成镜像</h3><p>首先我们先从docker镜像仓库拉取一个tomcat镜像，切换到root账号<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker search tomcat</span></span><br><span class="line">NAME                           DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">tomcat                         Apache Tomcat is an open <span class="built_in">source</span> implementa...   1419      [OK]       </span><br><span class="line">tomee                          Apache TomEE is an all-Apache Java EE cert...   38        [OK]       </span><br><span class="line">dordoka/tomcat                 Ubuntu 14.04, Oracle JDK 8 and Tomcat 8 ba...   37                   [OK]</span><br><span class="line">davidcaste/alpine-tomcat       Apache Tomcat 7/8 using Oracle Java 7/8 wi...   19                   [OK]</span><br><span class="line">consol/tomcat-7.0              Tomcat 7.0.57, 8080, <span class="string">"admin/admin"</span>              16                   [OK]</span><br><span class="line">cloudesire/tomcat              Tomcat server, 6/7/8                            15                   [OK]</span><br><span class="line">....</span><br></pre></td></tr></table></figure></p><p>这里会列出镜像仓库 中一堆的tomcat相关的镜像资源，下面我们拉取一个到本地。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker pull dordoka/tomcat</span></span><br><span class="line">//等待一段时间拉取完成</span><br><span class="line"><span class="comment"># docker images</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">dordoka/tomcat      latest              7d9888a99efb        7 months ago        780 MB</span><br></pre></td></tr></table></figure></p><p>启动容器<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker run -it -p 8080:8080 dordoka/tomcat</span></span><br><span class="line">//查看所有容器</span><br><span class="line"><span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                              NAMES</span><br><span class="line">9a987406fc9e        dordoka/tomcat      <span class="string">"/opt/tomcat/bin/c..."</span>   2 minutes ago       Up About a minute   8009/tcp, 0.0.0.0:8080-&gt;8080/tcp   flamboyant_darwin</span><br><span class="line">// 下面我们进入容器，做一些修改</span><br><span class="line"><span class="comment"># docker exec -it 9a987406fc9e /bin/bash</span></span><br><span class="line">root@9a987406fc9e:/opt/tomcat<span class="comment"># cd webapps</span></span><br><span class="line">root@9a987406fc9e:/opt/tomcat/webapps<span class="comment"># ls</span></span><br><span class="line">host-manager  manager</span><br><span class="line">// 接下来在webapps目录下创建一个ROOT目录，并在里面新建一个index.html页面</span><br><span class="line">root@9a987406fc9e:/opt/tomcat/webapps<span class="comment"># mkdir ROOT</span></span><br><span class="line">root@9a987406fc9e:/opt/tomcat/webapps<span class="comment"># cd ROOT/</span></span><br><span class="line">root@9a987406fc9e:/opt/tomcat/webapps/ROOT<span class="comment"># touch index.html</span></span><br><span class="line">// 在Html页面写些内容，比如 Hello World!</span><br><span class="line">root@9a987406fc9e:/opt/tomcat/webapps/ROOT<span class="comment"># vi index.html </span></span><br><span class="line">// 编辑完退出 container</span><br><span class="line">root@9a987406fc9e:/opt/tomcat/webapps/ROOT<span class="comment"># exit</span></span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure></p><p>在宿主机上通过浏览器访问 <a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a> 就能看到我们对于容器的修改。<br><img src="http://static.nsoft.vip/18-11-28/63750209.jpg" alt="docker 容器的修改.png"></p><h3 id="将我们修改好的容器制作成镜像"><a href="#将我们修改好的容器制作成镜像" class="headerlink" title="将我们修改好的容器制作成镜像"></a>将我们修改好的容器制作成镜像</h3><p>通过docker commit <container> [repo:tag] 将容器制作成镜像<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker commit 9a987406fc9e marspie/tomcat:1.0</span></span><br><span class="line">sha256:8887c9ac97bc3f3fc5767bf714f058035f4f89cd24162a57844140d755a505a1</span><br><span class="line">//查看本地镜像，可以看到我们制作好的marspie/tomcat 1.0版</span><br><span class="line"><span class="comment"># docker images</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">marspie/tomcat      1.0                 8887c9ac97bc        49 seconds ago      780 MB</span><br><span class="line">dordoka/tomcat      latest              7d9888a99efb        7 months ago        780 MB</span><br></pre></td></tr></table></figure></container></p><p>将容器制作成镜像的做法：</p><table><tr><th>优点</th><th>缺点</th></tr><tr><td>最方便，最快速</td><td>不规范，无法自动化</td></tr></table><h3 id="Buildfile-制作镜像"><a href="#Buildfile-制作镜像" class="headerlink" title="Buildfile 制作镜像"></a>Buildfile 制作镜像</h3><p>下面我们通过Buildfile文件来制作一个jdk1.8-tomcat8的镜像。</p><ol><li>首先我们从Oracle官网下载: <a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">jdk-8u144-linux-x64.tar.gz</a></li><li>下载Tomcat8 Apache官网下载：<a href="http://tomcat.apache.org/download-80.cgi" target="_blank" rel="noopener">apache-tomcat-8.5.16.tar.gz</a></li><li><p>Buildfile 文件内容如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># VERSION 0.0.1</span></span><br><span class="line"><span class="comment"># ubuntu server </span></span><br><span class="line">FROM ubuntu</span><br><span class="line"><span class="comment"># 签名</span></span><br><span class="line">MAINTAINER MARSPIE <span class="string">"marspie@126.com"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把java与tomcat添加到容器中   </span></span><br><span class="line">ADD jdk-8u144-linux-x64.tar.gz /usr/<span class="built_in">local</span>/</span><br><span class="line">ADD apache-tomcat-8.5.16.tar.gz /usr/<span class="built_in">local</span>/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置java与tomcat环境变量  </span></span><br><span class="line">ENV JAVA_HOME /usr/<span class="built_in">local</span>/jdk1.8.0_144</span><br><span class="line">ENV CLASSPATH <span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line"></span><br><span class="line">ENV TOMCAT_HOME /usr/<span class="built_in">local</span>/apache-tomcat-8.5.16  </span><br><span class="line">ENV PATH <span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$TOMCAT_HOME</span>/lib:<span class="variable">$TOMCAT_HOME</span>/bin  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 容器运行时监听的端口  </span></span><br><span class="line">EXPOSE 8080  </span><br><span class="line">  </span><br><span class="line">ENTRYPOINT [<span class="string">"/usr/local/apache-tomcat-8.5.16/bin/catalina.sh"</span>, <span class="string">"run"</span>]</span><br><span class="line"><span class="comment">#CMD /usr/local/apache-tomcat-8.5.16/bin/catalina.sh run</span></span><br><span class="line">``` </span><br><span class="line">4. 将如上准备的3个文件至于同一目录下</span><br><span class="line">``` bash</span><br><span class="line">[root@bogon docker]<span class="comment"># ls -l</span></span><br><span class="line">total 190372</span><br><span class="line">-rwxrw-rw-. 1 alex alex   9417469 Jul 30 18:28 apache-tomcat-8.5.16.tar.gz</span><br><span class="line">-rw-------. 1 alex alex       654 Jul 30 19:09 Dockerfile</span><br><span class="line">-rwxrw-rw-. 1 alex alex 185515842 Jul 30 18:34 jdk-8u144-linux-x64.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>使用如下命令制作镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[root@bogon docker]<span class="comment"># docker build -t marspie/ubuntu-tomcat8:0.0.2 .</span></span><br><span class="line">Sending build context to Docker daemon 194.9 MB</span><br><span class="line">Step 1/10 : FROM ubuntu</span><br><span class="line"> ---&gt; 14f60031763d</span><br><span class="line">Step 2/10 : MAINTAINER MARSPIE <span class="string">"marspie@126.com"</span></span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 9e2681f280b5</span><br><span class="line">Step 3/10 : ADD jdk-8u144-linux-x64.tar.gz /usr/<span class="built_in">local</span>/</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; e69764710ed4</span><br><span class="line">Step 4/10 : ADD apache-tomcat-8.5.16.tar.gz /usr/<span class="built_in">local</span>/</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 9cef7a3e804b</span><br><span class="line">Step 5/10 : ENV JAVA_HOME /usr/<span class="built_in">local</span>/jdk1.8.0_144</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 54b3e6339868</span><br><span class="line">Step 6/10 : ENV CLASSPATH <span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 463ccbe97778</span><br><span class="line">Step 7/10 : ENV TOMCAT_HOME /usr/<span class="built_in">local</span>/apache-tomcat-8.5.16</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 9455c2777e34</span><br><span class="line">Step 8/10 : ENV PATH <span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$TOMCAT_HOME</span>/lib:<span class="variable">$TOMCAT_HOME</span>/bin</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 5fc99c79cfe5</span><br><span class="line">Step 9/10 : EXPOSE 8080</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 63aa2690221f</span><br><span class="line">Step 10/10 : ENTRYPOINT /usr/<span class="built_in">local</span>/apache-tomcat-8.5.16/bin/catalina.sh run</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> ef7da9894470</span><br><span class="line"> ---&gt; 55eebdf6b21d</span><br><span class="line">Removing intermediate container ef7da9894470</span><br><span class="line">Successfully built 55eebdf6b21d</span><br></pre></td></tr></table></figure></li><li><p>运行下我们制作的tomcat镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker run -it -p 8080:8080 55eebdf6b21d</span></span><br></pre></td></tr></table></figure></li><li><p>测试，通过宿主机浏览器访问：<a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a> 看到tomcat的欢迎页面，好了通过Dockerfile制作镜像成功了。</p></li></ol><h3 id="Docker-镜像的导入导出"><a href="#Docker-镜像的导入导出" class="headerlink" title="Docker 镜像的导入导出"></a>Docker 镜像的导入导出</h3><p>将镜像导出为文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker save -o marspie-ubuntu-tomcat8.0.02.tar marspie/ubuntu-tomcat8:0.0.2</span></span><br></pre></td></tr></table></figure></p><p>完成后通过 ls 命令即可看到文件<br><img src="http://static.nsoft.vip/18-11-28/69873981.jpg" alt="docker_images_save.png"></p><p>将我们打包导出的镜像包上传至另一台虚机<br><img src="http://static.nsoft.vip/18-11-28/10477511.jpg" alt="docker_images_up.png"><br>镜像导入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker load -i marspie-ubuntu-tomcat8.0.02.tar</span></span><br></pre></td></tr></table></figure></p><p><img src="http://static.nsoft.vip/18-11-28/58244929.jpg" alt="docker_images_load.png"><br>这样我们又可以在这台虚机愉快的玩耍了O(∩_∩)O~</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;制作自己的Docker镜像&quot;&gt;&lt;a href=&quot;#制作自己的Docker镜像&quot; class=&quot;headerlink&quot; title=&quot;制作自己的Docker镜像&quot;&gt;&lt;/a&gt;制作自己的Docker镜像&lt;/h2&gt;&lt;p&gt;制作自己的Docker镜像有两种方式&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将容器变成镜像&lt;/li&gt;
&lt;li&gt;通过Buildfile语法制作镜像&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="微服务" scheme="http://nsoft.vip/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="docker" scheme="http://nsoft.vip/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/docker/"/>
    
    
      <category term="微服务" scheme="http://nsoft.vip/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="docker" scheme="http://nsoft.vip/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu 16.04 LTS RabbitMQ 3.6.10 安装配置</title>
    <link href="http://nsoft.vip/2017/06/21/170621-ubuntu-16-04-LTS-RabbitMQ-3-6-10-%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
    <id>http://nsoft.vip/2017/06/21/170621-ubuntu-16-04-LTS-RabbitMQ-3-6-10-安装配置/</id>
    <published>2017-06-21T06:27:09.000Z</published>
    <updated>2019-01-09T07:52:44.261Z</updated>
    
    <content type="html"><![CDATA[<h2 id="RabbitMQ-安装配置"><a href="#RabbitMQ-安装配置" class="headerlink" title="RabbitMQ 安装配置"></a>RabbitMQ 安装配置</h2><p><img src="http://static.nsoft.vip/18-11-28/82919675.jpg" alt="RabbitMQ_.png"><br>RabbitMQ 已经经历了10 来个春夏秋冬，全球超过35000生产部署RabbitMQ，RabbitMQ是最受欢迎的开源消息队列，<br>正如官网的介绍：</p><p>RabbitMQ is the most widely deployed open source message broker</p><p>With more than 35,000 production deployments of RabbitMQ world-wide at small startups and large enterprises, RabbitMQ is the most popular open source message broker.<br><a id="more"></a></p><h2 id="RabbitMQ-安装"><a href="#RabbitMQ-安装" class="headerlink" title="RabbitMQ 安装"></a>RabbitMQ 安装</h2><ol><li>访问<a href="http://www.rabbitmq.com/download.html" target="_blank" rel="noopener">RabbitMQ官网</a> 下载对应系统版本，这里我们下载<a href="http://www.rabbitmq.com/releases/rabbitmq-server/v3.6.10/rabbitmq-server_3.6.10-1_all.deb" target="_blank" rel="noopener">Debian Ubuntu</a> 对应的版本。</li><li><p>将下载的rabbitmq-server_3.6.10-1_all.deb 安装包放于用户家目录下work目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">alex@ubuntu:~$ <span class="built_in">cd</span> work/</span><br><span class="line">alex@ubuntu:~/work$ ls -l</span><br><span class="line">total 4772</span><br><span class="line">-rwxrw-rw- 1 alex alex 4885200 Jun 21 01:29 rabbitmq-server_3.6.10-1_all.deb</span><br><span class="line">alex@ubuntu:~/work$</span><br></pre></td></tr></table></figure></li><li><p>使用 dpkg 命令安装 rabbitmq<br>dpkg 参见：<a href="http://blog.csdn.net/kevinhg/article/details/5934462" target="_blank" rel="noopener">Ubuntu下deb包的安装方法</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">alex@ubuntu:~/work$ sudo dpkg -i rabbitmq-server_3.6.10-1_all.deb </span><br><span class="line">[sudo] password <span class="keyword">for</span> alex: </span><br><span class="line">Selecting previously unselected package rabbitmq-server.</span><br><span class="line">(Reading database ... 208585 files and directories currently installed.)</span><br><span class="line">Preparing to unpack rabbitmq-server_3.6.10-1_all.deb ...</span><br><span class="line">Unpacking rabbitmq-server (3.6.10-1) ...</span><br><span class="line">dpkg: dependency problems prevent configuration of rabbitmq-server:</span><br><span class="line"> rabbitmq-server depends on erlang-nox (&gt;= 1:16.b.3) | esl-erlang; however:</span><br><span class="line">  Package erlang-nox is not installed.</span><br><span class="line">  Package esl-erlang is not installed.</span><br><span class="line"> rabbitmq-server depends on socat; however:</span><br><span class="line">  Package socat is not installed.</span><br><span class="line"></span><br><span class="line">dpkg: error processing package rabbitmq-server (--install):</span><br><span class="line"> dependency problems - leaving unconfigured</span><br><span class="line">Processing triggers <span class="keyword">for</span> man-db (2.7.5-1) ...</span><br><span class="line">Processing triggers <span class="keyword">for</span> systemd (229-4ubuntu10) ...</span><br><span class="line">Processing triggers <span class="keyword">for</span> ureadahead (0.100.0-19) ...</span><br><span class="line">Errors were encountered <span class="keyword">while</span> processing:</span><br><span class="line"> rabbitmq-server</span><br></pre></td></tr></table></figure></li></ol><p>如上rabbitmq-server依赖于erlang-nox，下面安装输入：sudo apt-get install erlang-nox<br>but 依然报错<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">alex@ubuntu:~/work$ sudo apt-get install erlang-nox</span><br><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree       </span><br><span class="line">Reading state information... Done</span><br><span class="line">You might want to run <span class="string">'apt-get -f install'</span> to correct these:</span><br><span class="line">The following packages have unmet dependencies:</span><br><span class="line"> erlang-nox : Depends: erlang-base but it is not going to be installed or</span><br><span class="line">                       erlang-base-hipe but it is not going to be installed</span><br><span class="line">              Depends: erlang-asn1 but it is not going to be installed</span><br><span class="line">              Depends: erlang-corba but it is not going to be installed</span><br><span class="line">              Depends: erlang-crypto but it is not going to be installed</span><br><span class="line">              Depends: erlang-diameter but it is not going to be installed</span><br><span class="line">              Depends: erlang-edoc but it is not going to be installed</span><br><span class="line">              Depends: erlang-eldap but it is not going to be installed</span><br><span class="line">              Depends: erlang-erl-docgen but it is not going to be installed</span><br><span class="line">              Depends: erlang-eunit but it is not going to be installed</span><br><span class="line">              Depends: erlang-ic but it is not going to be installed</span><br><span class="line">              Depends: erlang-inets but it is not going to be installed</span><br><span class="line">              Depends: erlang-mnesia but it is not going to be installed</span><br><span class="line">              Depends: erlang-odbc but it is not going to be installed</span><br><span class="line">              Depends: erlang-os-mon but it is not going to be installed</span><br><span class="line">              Depends: erlang-parsetools but it is not going to be installed</span><br><span class="line">              Depends: erlang-percept but it is not going to be installed</span><br><span class="line">              Depends: erlang-public-key but it is not going to be installed</span><br><span class="line">              Depends: erlang-runtime-tools but it is not going to be installed</span><br><span class="line">              Depends: erlang-snmp but it is not going to be installed</span><br><span class="line">              Depends: erlang-ssh but it is not going to be installed</span><br><span class="line">              Depends: erlang-ssl but it is not going to be installed</span><br><span class="line">              Depends: erlang-syntax-tools but it is not going to be installed</span><br><span class="line">              Depends: erlang-tools but it is not going to be installed</span><br><span class="line">              Depends: erlang-webtool but it is not going to be installed</span><br><span class="line">              Depends: erlang-xmerl but it is not going to be installed</span><br><span class="line"> rabbitmq-server : Depends: socat but it is not going to be installed</span><br><span class="line">E: Unmet dependencies. Try <span class="string">'apt-get -f install'</span> with no packages (or specify a solution).</span><br></pre></td></tr></table></figure></p><p>根据提示，执行 apt-get -f install<br>中途提示：Do you want to continue? [Y/n]  输入 Y<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">alex@ubuntu:~/work$ sudo apt-get -f install</span><br><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree       </span><br><span class="line">Reading state information... Done</span><br><span class="line">Correcting dependencies... Done</span><br><span class="line">The following additional packages will be installed:</span><br><span class="line">  erlang-asn1 erlang-base erlang-corba erlang-crypto erlang-diameter</span><br><span class="line">  erlang-edoc erlang-eldap erlang-erl-docgen erlang-eunit erlang-ic</span><br><span class="line">  erlang-inets erlang-mnesia erlang-nox erlang-odbc erlang-os-mon</span><br><span class="line">  erlang-parsetools erlang-percept erlang-public-key erlang-runtime-tools</span><br><span class="line">  erlang-snmp erlang-ssh erlang-ssl erlang-syntax-tools erlang-tools</span><br><span class="line">  erlang-webtool erlang-xmerl libodbc1 libsctp1 socat</span><br><span class="line">Suggested packages:</span><br><span class="line">  erlang erlang-manpages erlang-doc xsltproc fop erlang-ic-java</span><br><span class="line">  erlang-observer libmyodbc odbc-postgresql tdsodbc unixodbc-bin lksctp-tools</span><br><span class="line">The following NEW packages will be installed:</span><br><span class="line">  erlang-asn1 erlang-base erlang-corba erlang-crypto erlang-diameter</span><br><span class="line">  erlang-edoc erlang-eldap erlang-erl-docgen erlang-eunit erlang-ic</span><br><span class="line">  erlang-inets erlang-mnesia erlang-nox erlang-odbc erlang-os-mon</span><br><span class="line">  erlang-parsetools erlang-percept erlang-public-key erlang-runtime-tools</span><br><span class="line">  erlang-snmp erlang-ssh erlang-ssl erlang-syntax-tools erlang-tools</span><br><span class="line">  erlang-webtool erlang-xmerl libodbc1 libsctp1 socat</span><br><span class="line">0 upgraded, 29 newly installed, 0 to remove and 326 not upgraded.</span><br><span class="line">1 not fully installed or removed.</span><br><span class="line">Need to get 19.6 MB of archives.</span><br><span class="line">After this operation, 36.9 MB of additional disk space will be used.</span><br><span class="line">Do you want to <span class="built_in">continue</span>? [Y/n] Y</span><br><span class="line">....</span><br><span class="line">Adding system user `rabbitmq<span class="string">' (UID 124) ...</span></span><br><span class="line"><span class="string">Adding new user `rabbitmq'</span> (UID 124) with group `rabbitmq<span class="string">' ...</span></span><br><span class="line"><span class="string">Not creating home directory `/var/lib/rabbitmq'</span>.</span><br><span class="line">Setting up libsctp1:amd64 (1.0.16+dfsg-3) ...</span><br><span class="line">Processing triggers <span class="keyword">for</span> libc-bin (2.23-0ubuntu9) ...</span><br><span class="line">Processing triggers <span class="keyword">for</span> systemd (229-4ubuntu10) ...</span><br><span class="line">Processing triggers <span class="keyword">for</span> ureadahead (0.100.0-19) ...</span><br></pre></td></tr></table></figure></p><p>再次输入：sudo dpkg -i rabbitmq-server_3.6.10-1_all.deb<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">alex@ubuntu:~/work$ sudo dpkg -i rabbitmq-server_3.6.10-1_all.deb </span><br><span class="line">(Reading database ... 210659 files and directories currently installed.)</span><br><span class="line">Preparing to unpack rabbitmq-server_3.6.10-1_all.deb ...</span><br><span class="line">Unpacking rabbitmq-server (3.6.10-1) over (3.6.10-1) ...</span><br><span class="line">Setting up rabbitmq-server (3.6.10-1) ...</span><br><span class="line">Processing triggers <span class="keyword">for</span> man-db (2.7.5-1) ...</span><br><span class="line">Processing triggers <span class="keyword">for</span> systemd (229-4ubuntu10) ...</span><br><span class="line">Processing triggers <span class="keyword">for</span> ureadahead (0.100.0-19) ...</span><br></pre></td></tr></table></figure></p><p>显然如上结果，表示 rabbitmq-server 安装完成，启动rabbitmq-server 服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 启动 rabbitmq-server</span><br><span class="line">alex@ubuntu:~/work$ sudo service rabbitmq-server start</span><br><span class="line">// 停止 rabbitmq-server</span><br><span class="line">alex@ubuntu:~/work$ sudo service rabbitmq-server stop</span><br><span class="line">// 重启 rabbitmq-server</span><br><span class="line">alex@ubuntu:~/work$ sudo service rabbitmq-server restart</span><br></pre></td></tr></table></figure></p><ol start="4"><li>若通过终端安装程序sudo apt-get install xxx时出错：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install erlang-nox</span><br><span class="line">E: Could not get lock /var/lib/dpkg/lock - open (11: Resource temporarily unavailable)</span><br><span class="line">E: Unable to lock the administration directory (/var/lib/dpkg/), is another process using it</span><br></pre></td></tr></table></figure></li></ol><p>通过如下强制解锁,命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo rm /var/lib/dpkg/lock</span><br></pre></td></tr></table></figure></p><p>再次输入安装命令，可能会会提示 “E: dpkg 被中断，您必须手工运行 sudo dpkg –configure -a 解决此问题”<br>按照提示执行：sudo dpkg –configure -a  </p><h2 id="RabbitMQ-管理插件-management-plugin"><a href="#RabbitMQ-管理插件-management-plugin" class="headerlink" title="RabbitMQ 管理插件 management plugin"></a>RabbitMQ 管理插件 management plugin</h2><p>RabbitMQ 默认已经集成了management plugin，通过命令enable即可<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/lib/rabbitmq/bin/</span><br><span class="line">$ sudo rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_management</span><br><span class="line">The following plugins have been enabled:</span><br><span class="line">  amqp_client</span><br><span class="line">  cowlib</span><br><span class="line">  cowboy</span><br><span class="line">  rabbitmq_web_dispatch</span><br><span class="line">  rabbitmq_management_agent</span><br><span class="line">  rabbitmq_management</span><br><span class="line"></span><br><span class="line">Applying plugin configuration to rabbit@ubuntu... started 6 plugins.</span><br><span class="line">.....</span><br></pre></td></tr></table></figure></p><p>当显示如上信息，打开浏览器访问：<a href="http://localhost:15672" target="_blank" rel="noopener">http://localhost:15672</a><br>输入默认用户名/密码：guest/guest 登陆Web管理页：<br><img src="http://static.nsoft.vip/18-11-28/79670555.jpg" alt="RabbitMQ_Web.png"></p><p>guest用户只能从localhost地址登录，如果要配置远程登录，必须创建用户</p><ol><li>通过Web管理页面添加用户并设置权限，点击用户进入授权页面，默认直接点击”set permission”即可</li><li>通过命令添加用户,并分配权限：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sudo rabbitmqctl add_user admin admin</span><br><span class="line">Creating user <span class="string">"admin"</span></span><br><span class="line">$ sudo rabbitmqctl set_user_tags admin administrator</span><br><span class="line">Setting tags <span class="keyword">for</span> user <span class="string">"admin"</span> to [administrator]</span><br><span class="line">$ sudo rabbitmqctl set_permissions -p / admin <span class="string">".*"</span> <span class="string">".*"</span> <span class="string">".*"</span></span><br><span class="line">Setting permissions <span class="keyword">for</span> user <span class="string">"admin"</span> <span class="keyword">in</span> vhost <span class="string">"/"</span></span><br></pre></td></tr></table></figure></li></ol><p>设置完成后，RabbitMQ就可以远程通过 <a href="http://rabbitmq_ip:15672" target="_blank" rel="noopener">http://rabbitmq_ip:15672</a> 访问了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;RabbitMQ-安装配置&quot;&gt;&lt;a href=&quot;#RabbitMQ-安装配置&quot; class=&quot;headerlink&quot; title=&quot;RabbitMQ 安装配置&quot;&gt;&lt;/a&gt;RabbitMQ 安装配置&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://static.nsoft.vip/18-11-28/82919675.jpg&quot; alt=&quot;RabbitMQ_.png&quot;&gt;&lt;br&gt;RabbitMQ 已经经历了10 来个春夏秋冬，全球超过35000生产部署RabbitMQ，RabbitMQ是最受欢迎的开源消息队列，&lt;br&gt;正如官网的介绍：&lt;/p&gt;
&lt;p&gt;RabbitMQ is the most widely deployed open source message broker&lt;/p&gt;
&lt;p&gt;With more than 35,000 production deployments of RabbitMQ world-wide at small startups and large enterprises, RabbitMQ is the most popular open source message broker.&lt;br&gt;
    
    </summary>
    
      <category term="高性能架构" scheme="http://nsoft.vip/categories/%E9%AB%98%E6%80%A7%E8%83%BD%E6%9E%B6%E6%9E%84/"/>
    
      <category term="RabbitMQ" scheme="http://nsoft.vip/categories/%E9%AB%98%E6%80%A7%E8%83%BD%E6%9E%B6%E6%9E%84/RabbitMQ/"/>
    
    
      <category term="RabbitMQ" scheme="http://nsoft.vip/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>Error: Module version mismatch. Expected 48, got 46.</title>
    <link href="http://nsoft.vip/2017/06/05/170605-Error-Module-version-mismatch-Expected-48-got-46/"/>
    <id>http://nsoft.vip/2017/06/05/170605-Error-Module-version-mismatch-Expected-48-got-46/</id>
    <published>2017-06-05T06:25:53.000Z</published>
    <updated>2018-11-28T07:17:09.457Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> 是一个简单地、轻量地、基于Node的一个静态博客框架。 <a href="http://jaredforsyth.com/hexo-admin/" target="_blank" rel="noopener">Hexo Admin Plugin</a> 是可以为Hexo提供后台管理的插件，今天安装了一下hexo-admin的修改版：<a href="https://xbotao.github.io/hexo-admin-qiniu/" target="_blank" rel="noopener">hexo-admin-qiniu</a><br>进入之前安装的blog目录</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save hexo-admin-qiniu</span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line">$ hexo server -d</span><br><span class="line">Error: Module version mismatch. Expected 48, got 46.</span><br><span class="line">    at Error (native)</span><br><span class="line">    at Object.Module._extensions..node (module.js:597:18)</span><br><span class="line">    at Module.load (module.js:487:32)</span><br><span class="line">    at tryModuleLoad (module.js:446:12)</span><br><span class="line">    at Function.Module._load (module.js:438:3)</span><br><span class="line">    at Module.require (module.js:497:17)</span><br><span class="line">    at require (internal/module.js:20:19)</span><br><span class="line">    at Object.&lt;anonymous&gt; (/usr/<span class="built_in">local</span>/lib/node_modules/hexo-cli/node_modules/hexo-log/node_modules/bunyan/node_modules/dtrace-provider/dtrace-provider.js:17:23)</span><br><span class="line">    at Module._compile (module.js:570:32)</span><br><span class="line">    at Object.Module._extensions..js (module.js:579:10)</span><br><span class="line">    at Module.load (module.js:487:32)</span><br><span class="line">    at tryModuleLoad (module.js:446:12)</span><br><span class="line">    at Function.Module._load (module.js:438:3)</span><br><span class="line">    at Module.require (module.js:497:17)</span><br><span class="line">    at require (internal/module.js:20:19)</span><br><span class="line">    at Object.&lt;anonymous&gt; (/usr/<span class="built_in">local</span>/lib/node_modules/hexo-cli/node_modules/hexo-log/node_modules/bunyan/lib/bunyan.js:79:18)</span><br></pre></td></tr></table></figure><p>错误提示模块的版本不匹配，可能是因为hexo版本 与很多模块更新不匹配了,尝试删除所有模块，重新安装无果</p><pre><code class="bash">$ rm -rf node_modules$ npm install</code></pre><p>所以我们重新安装配置下Hexo,解决方法：执行以下代码：</p><pre><code class="bash">$ npm install hexo --no-optional$ npm install hexo-cli -gnpm WARN checkPermissions Missing write access to /usr/<span class="built_in">local</span>/lib/node_modules/hexo-cli/node_modules/bluebirdnpm WARN checkPermissions Missing write access to /usr/<span class="built_in">local</span>/lib/node_modules/hexo-cli/node_modules/chalk/node_modules/has-ansi/node_modules/ansi-regexnpm WARN checkPermissions Missing write access to /usr/<span class="built_in">local</span>/lib/node_modules/hexo-cli/node_modules/chalk/node_modules/strip-ansi/node_modules/ansi-regexnpm WARN checkPermissions Missing write access to /usr/<span class="built_in">local</span>/lib/node_modules/hexo-cli/node_modules/hexo-fs/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/arr-diff/node_modules/arr-flatten....npm ERR! Darwin 16.6.0npm ERR! argv <span class="string">"/usr/local/bin/node"</span> <span class="string">"/usr/local/bin/npm"</span> <span class="string">"install"</span> <span class="string">"hexo-cli"</span> <span class="string">"-g"</span>npm ERR! node v6.10.1npm ERR! npm  v3.10.10npm ERR! path /usr/<span class="built_in">local</span>/lib/node_modules/hexo-cli/node_modules/bluebirdnpm ERR! code EACCESnpm ERR! errno -13npm ERR! syscall accessnpm ERR! Error: EACCES: permission denied, access <span class="string">'/usr/local/lib/node_modules/hexo-cli/node_modules/bluebird'</span>npm ERR!     at Error (native)npm ERR!  { Error: EACCES: permission denied, access <span class="string">'/usr/local/lib/node_modules/hexo-cli/node_modules/bluebird'</span>npm ERR!     at Error (native)npm ERR!   errno: -13,npm ERR!   code: <span class="string">'EACCES'</span>,npm ERR!   syscall: <span class="string">'access'</span>,npm ERR!   path: <span class="string">'/usr/local/lib/node_modules/hexo-cli/node_modules/bluebird'</span> }npm ERR! npm ERR! Please try running this <span class="built_in">command</span> again as root/Administrator.npm ERR! Please include the following file with any support request:npm ERR!     /Users/alex/Projects/blog/npm-debug.log</code></pre><p>分析错误由于权限问题，重新执行</p><pre><code class="bash">$ sudo npm install --unsafe-perm --verbose -g hexoPassword:....</code></pre><p>安装完成，执行启动hexo</p><pre><code class="bash">$ hexo server -dINFO  Start processingINFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</code></pre><p>启动正常，浏览器访问：<a href="http://localhost:4000/admin" target="_blank" rel="noopener">http://localhost:4000/admin</a>  现在可以愉快的写博客了<br><img src="http://static.nsoft.vip/18-11-28/61834621.jpg" alt="image.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt; 是一个简单地、轻量地、基于Node的一个静态博客框架。 &lt;a href=&quot;http://jaredforsyth.com/hexo-admin/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo Admin Plugin&lt;/a&gt; 是可以为Hexo提供后台管理的插件，今天安装了一下hexo-admin的修改版：&lt;a href=&quot;https://xbotao.github.io/hexo-admin-qiniu/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hexo-admin-qiniu&lt;/a&gt;&lt;br&gt;进入之前安装的blog目录&lt;/p&gt;
    
    </summary>
    
      <category term="其他" scheme="http://nsoft.vip/categories/%E5%85%B6%E4%BB%96/"/>
    
      <category term="博客" scheme="http://nsoft.vip/categories/%E5%85%B6%E4%BB%96/%E5%8D%9A%E5%AE%A2/"/>
    
    
  </entry>
  
  <entry>
    <title>Mac之Git账号的坑</title>
    <link href="http://nsoft.vip/2017/06/04/170604-Mac%E4%B9%8BGit%E8%B4%A6%E5%8F%B7%E7%9A%84%E5%9D%91/"/>
    <id>http://nsoft.vip/2017/06/04/170604-Mac之Git账号的坑/</id>
    <published>2017-06-04T06:24:27.000Z</published>
    <updated>2018-12-05T01:45:58.930Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Permission-to-xxx-xxxxx-git-denied-to-username"><a href="#Permission-to-xxx-xxxxx-git-denied-to-username" class="headerlink" title="Permission to xxx/xxxxx.git denied to username."></a>Permission to xxx/xxxxx.git denied to username.</h2><p>之前使用mac终端中的git时，输入了用户名和密码，现在换了新的用户名密码后，clone下来的代码，修改后push 却提示 remote: Permission to marspie/marspie-demo.git denied to yaonew.<br>fatal: unable to access ‘<a href="https://github.com/marspie/marspie-demo.git/&#39;" target="_blank" rel="noopener">https://github.com/marspie/marspie-demo.git/&#39;</a>: The requested URL returned error: 403<br> 其中yaonew是我第一次使用的用户名，现在已经使用了新的用户了。尝试重新 ssh-keygen 生成密钥，github添加新的密钥，无果。</p><a id="more"></a><p>经过网络搜索，有提出同样问题的，但是回复寥寥无几且没有能真正解决问题的，于是变化思路查找：Mac多Git账号配置，找到了一个帖子：<a href="http://suqianghotel.com/2016/09/13/mac-mulit-git-account-config/" target="_blank" rel="noopener">http://suqianghotel.com/2016/09/13/mac-mulit-git-account-config/</a> 在文章的末尾找到了GitHub 官网的帮助文档：<br><a href="https://help.github.com/articles/updating-credentials-from-the-osx-keychain/" target="_blank" rel="noopener">GitHub help</a></p><h2 id="Updating-credentials-from-the-OSX-Keychain"><a href="#Updating-credentials-from-the-OSX-Keychain" class="headerlink" title="Updating credentials from the OSX Keychain"></a>Updating credentials from the OSX Keychain</h2><p>You’ll need to update your saved username and password in the git-credential-osxkeychain helper if you change your password or username on GitHub.</p><h2 id="Updating-your-credentials-via-Keychain-Access"><a href="#Updating-your-credentials-via-Keychain-Access" class="headerlink" title="Updating your credentials via Keychain Access"></a>Updating your credentials via Keychain Access</h2><ol><li>In Finder, search for the Keychain Access app. </li><li>In Keychain Access, search for github.com.</li><li>Find the “internet password” entry for github.com. </li><li>Edit or delete the entry accordingly.</li></ol><h2 id="Deleting-your-credentials-via-the-command-line"><a href="#Deleting-your-credentials-via-the-command-line" class="headerlink" title="Deleting your credentials via the command line"></a>Deleting your credentials via the command line</h2><p>Through the command line, you can use the credential helper directly to erase the keychain entry.</p><p>To do this, type the following command:</p><pre><code class="bash">$ git credential-osxkeychain erasehost=github.comprotocol=https[Press Return]</code></pre><p>If it’s successful, nothing will print out. To test that it works, try and clone a repository from GitHub. If you are prompted for a password, the keychain entry was deleted.</p><h2 id="重新-git-push"><a href="#重新-git-push" class="headerlink" title="重新 git push"></a>重新 git push</h2><pre><code class="bash">$ git push origin masterUsername <span class="keyword">for</span> <span class="string">'https://github.com'</span>: marspiePassword <span class="keyword">for</span> <span class="string">'https://marspie@github.com'</span>: Counting objects: 8, <span class="keyword">done</span>.Delta compression using up to 8 threads.Compressing objects: 100% (8/8), <span class="keyword">done</span>.Writing objects: 100% (8/8), 628 bytes | 0 bytes/s, <span class="keyword">done</span>.Total 8 (delta 5), reused 0 (delta 0)remote: Resolving deltas: 100% (5/5), completed with 5 <span class="built_in">local</span> objects.To https://github.com/marspie/marspie-demo.git   32fe0cd..0a71a8a  master -&gt; master</code></pre><p>OK 搞定， tag!</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Permission-to-xxx-xxxxx-git-denied-to-username&quot;&gt;&lt;a href=&quot;#Permission-to-xxx-xxxxx-git-denied-to-username&quot; class=&quot;headerlink&quot; title=&quot;Permission to xxx/xxxxx.git denied to username.&quot;&gt;&lt;/a&gt;Permission to xxx/xxxxx.git denied to username.&lt;/h2&gt;&lt;p&gt;之前使用mac终端中的git时，输入了用户名和密码，现在换了新的用户名密码后，clone下来的代码，修改后push 却提示 remote: Permission to marspie/marspie-demo.git denied to yaonew.&lt;br&gt;fatal: unable to access ‘&lt;a href=&quot;https://github.com/marspie/marspie-demo.git/&amp;#39;&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/marspie/marspie-demo.git/&amp;#39;&lt;/a&gt;: The requested URL returned error: 403&lt;br&gt; 其中yaonew是我第一次使用的用户名，现在已经使用了新的用户了。尝试重新 ssh-keygen 生成密钥，github添加新的密钥，无果。&lt;/p&gt;
    
    </summary>
    
      <category term="协作" scheme="http://nsoft.vip/categories/%E5%8D%8F%E4%BD%9C/"/>
    
      <category term="git" scheme="http://nsoft.vip/categories/%E5%8D%8F%E4%BD%9C/git/"/>
    
    
      <category term="git" scheme="http://nsoft.vip/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Docker之旅-Docker入门</title>
    <link href="http://nsoft.vip/2017/04/09/170409-Docker%E4%B9%8B%E6%97%85-Docker%E5%85%A5%E9%97%A8/"/>
    <id>http://nsoft.vip/2017/04/09/170409-Docker之旅-Docker入门/</id>
    <published>2017-04-09T06:23:18.000Z</published>
    <updated>2018-12-28T04:27:54.114Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker组件-C-S架构"><a href="#Docker组件-C-S架构" class="headerlink" title="Docker组件 (C/S架构)"></a>Docker组件 (C/S架构)</h2><ol><li>docker client ：Docker客户端</li><li>docker server ：Docker daemon 主要组成部分 接收client 请求 并按照路由规则实现路由分发</li><li>docker image  : docker 镜像运行之后变成容器（docker run）</li><li>docker registry: registry是docker镜像的中央存储仓库（pull /push）</li></ol><a id="more"></a><h2 id="Docker镜像构建"><a href="#Docker镜像构建" class="headerlink" title="Docker镜像构建"></a>Docker镜像构建</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -t registry_url/namespace/marspie/centos:7.1[latest] .[.代表Dockerfile在当前路径下]</span><br></pre></td></tr></table></figure><h2 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h2><p>Usage: docker run [OPTIONS] IMAGE [COMMAND] [ARG…]<br>docker run  -it (交互模式)  —name base marspie/centos:7.1<br>            -d 后端运行<br>            -p host_point：container_point<br>            -P 随机分配端口映射<br>            -v host_dir:container_dir 容器目录与宿主机目录映射</p><h2 id="查看所有container"><a href="#查看所有container" class="headerlink" title="查看所有container"></a>查看所有container</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker ps （只能查看UP状态的container）</span><br><span class="line">$ docker ps -a</span><br></pre></td></tr></table></figure><h2 id="进入docker容器"><a href="#进入docker容器" class="headerlink" title="进入docker容器"></a>进入docker容器</h2><p>只有UP状态的docker容器可以进入访问<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> -it website(container_id/container_name) /bin/bash</span><br></pre></td></tr></table></figure></p><p>退出<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">exit</span></span><br></pre></td></tr></table></figure></p><h2 id="删除docker容器"><a href="#删除docker容器" class="headerlink" title="删除docker容器"></a>删除docker容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker rm  -f(强制删除)  名字/id</span><br></pre></td></tr></table></figure><h2 id="停止docker容器"><a href="#停止docker容器" class="headerlink" title="停止docker容器"></a>停止docker容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker stop （container_id/container_name）</span><br><span class="line"><span class="comment"># 停止所有容器</span></span><br><span class="line">$ docker stop $(docker ps -qa)</span><br></pre></td></tr></table></figure><h2 id="查看所有镜像"><a href="#查看所有镜像" class="headerlink" title="查看所有镜像"></a>查看所有镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker images</span><br></pre></td></tr></table></figure><h2 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker rmi (image_id/image_name)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Docker组件-C-S架构&quot;&gt;&lt;a href=&quot;#Docker组件-C-S架构&quot; class=&quot;headerlink&quot; title=&quot;Docker组件 (C/S架构)&quot;&gt;&lt;/a&gt;Docker组件 (C/S架构)&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;docker client ：Docker客户端&lt;/li&gt;
&lt;li&gt;docker server ：Docker daemon 主要组成部分 接收client 请求 并按照路由规则实现路由分发&lt;/li&gt;
&lt;li&gt;docker image  : docker 镜像运行之后变成容器（docker run）&lt;/li&gt;
&lt;li&gt;docker registry: registry是docker镜像的中央存储仓库（pull /push）&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="微服务" scheme="http://nsoft.vip/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="docker" scheme="http://nsoft.vip/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/docker/"/>
    
    
      <category term="微服务" scheme="http://nsoft.vip/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="docker" scheme="http://nsoft.vip/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Thinking change 2017</title>
    <link href="http://nsoft.vip/2017/03/27/170327-Thinking-change-2017/"/>
    <id>http://nsoft.vip/2017/03/27/170327-Thinking-change-2017/</id>
    <published>2017-03-27T06:21:07.000Z</published>
    <updated>2018-12-30T02:47:14.955Z</updated>
    
    <content type="html"><![CDATA[<p>2017年已过三个月，作为程序猿、码农的IT群中的一员，是该抽空思考下…</p><a id="more"></a><h2 id="一"><a href="#一" class="headerlink" title="一"></a>一</h2><p>平时有空喜欢逛下头条，这张职业规范图中是否有一天发展路线适合我，值得思考，虽然现在还处于E象限，I象限是我的终极目标了，呵呵！<br><img src="http://static.nsoft.vip/18-11-28/48083627.jpg" alt="11f70003e11ce6ff2752.jpg"></p><h2 id="二"><a href="#二" class="headerlink" title="二"></a>二</h2><p>读书，显然读书能增加个人的知识面，当然不能只局限于工作相关的书籍，其他领域也要多涉及，正如一位牛人所说，如何让别人觉得你牛逼呢，跟JAVA的开发聊PHP，跟PHP的开发聊JAVA, 跟python的开发人员聊c++，那如果聊天的对象都懂点呢？ 那就跟他聊历史O(∩_∩)O哈哈~，所以要让自己在别人眼中牛逼，各方面知识都要有所涉及。<br>当然现在这种知识飞速发展的时代，真正能静下心来看书主动学习的人并不是很多，我们可以借用别人的大脑学习，各种听书的APP，总归听比看方便多少，以及别人的一些领会，可以都我们的学习有一点启发。<br>2017时刻提醒自己多读些书。</p><h2 id="三"><a href="#三" class="headerlink" title="三"></a>三</h2><p>运动，有个好的身体才能更好的学习，生活，工作，每个星期至少运动个两到三次吧，打打球、跑跑步、爬爬山都可以，该行动了，为了改变，以前太懒，现在为了更好的自己，我需要这么做。</p><h2 id="四"><a href="#四" class="headerlink" title="四"></a>四</h2><p>创作，拓展自己的思维，发布一些作品，比如一个开源项目，创作一本漫画，或者作为自媒体多写些文章，创作来源于生活，是的我应该好好生活，提高自己从现在开始。</p><h2 id="五"><a href="#五" class="headerlink" title="五"></a>五</h2><p>程序猿的世界往往比较简单，不是在coding,就是在去coding的路上，丰富自己的生活，尝试一些跨界的事物，增加一些兴趣爱好，学学书法，让自已这颗浮躁的心安静下来。</p><p>2017 为了更好的自己thinking change.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2017年已过三个月，作为程序猿、码农的IT群中的一员，是该抽空思考下…&lt;/p&gt;
    
    </summary>
    
      <category term="其他" scheme="http://nsoft.vip/categories/%E5%85%B6%E4%BB%96/"/>
    
      <category term="随笔" scheme="http://nsoft.vip/categories/%E5%85%B6%E4%BB%96/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="其他" scheme="http://nsoft.vip/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>文档书写工具-gitbook介绍</title>
    <link href="http://nsoft.vip/2017/03/25/170325-%E6%96%87%E6%A1%A3%E4%B9%A6%E5%86%99%E5%B7%A5%E5%85%B7-gitbook%E4%BB%8B%E7%BB%8D/"/>
    <id>http://nsoft.vip/2017/03/25/170325-文档书写工具-gitbook介绍/</id>
    <published>2017-03-25T06:19:16.000Z</published>
    <updated>2018-11-28T07:15:09.811Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是gitbook"><a href="#什么是gitbook" class="headerlink" title="什么是gitbook"></a>什么是gitbook</h2><p>gitbook 是基于Node.js的命令行工具，可以使用github、git Markdown 书写电子书，可以作为自己知识的积累，书写API文档，将平时学习生活中的文字记录，出版电子书等等。</p><a id="more"></a><h2 id="gitbook安装"><a href="#gitbook安装" class="headerlink" title="gitbook安装"></a>gitbook安装</h2><p>gitbook基于Node.js所以第一步安装Node.js的支持，访问<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Nodejs官网</a>下载对应版本安装</p><h3 id="验证安装"><a href="#验证安装" class="headerlink" title="验证安装"></a>验证安装</h3><p>打开命令行终端</p><pre><code class="bash">$ node -vv6.10.1</code></pre><p>若能打印出Nodejs版本，表示安装成功</p><h3 id="gitbook命令行安装"><a href="#gitbook命令行安装" class="headerlink" title="gitbook命令行安装"></a>gitbook命令行安装</h3><pre><code class="bash">$ npm install -g gitbook-cli</code></pre><p>安装完成接着输入 gitbook -V 查看版本</p><pre><code class="bash">$ gitbook -VCLI version: 2.3.0</code></pre><h3 id="gitbook-常用命令"><a href="#gitbook-常用命令" class="headerlink" title="gitbook 常用命令"></a>gitbook 常用命令</h3><pre><code class="bash">//初始化图书$ gitbook init//生成html，生成路径图书文件目录下_book文件夹$ gitbook build//网页浏览器查看图书$ gitbook serve//linux下可生成pdf文件，需安装pdf依赖$ npm install gitbook-pdf -g$ gitbook pdf</code></pre><h2 id="gitbook客户端-GitBook-Editor"><a href="#gitbook客户端-GitBook-Editor" class="headerlink" title="gitbook客户端 GitBook Editor"></a>gitbook客户端 GitBook Editor</h2><p>有了gitbook客户端可以方便的管理书写我们的电子书，官方下载<a href="https://www.gitbook.com/editor" target="_blank" rel="noopener">GitBook Editor</a> 总得使用下来感受还可以，初始化打开启动稍慢，gitbook文档与GitHub可以实现同步，简单一个按钮 publish&amp;Sync 可以将文档保存至gitbook以及同步至GitHub，perfect。<br><img src="http://static.nsoft.vip/18-11-28/69961518.jpg" alt="火狐截图_2017-03-25T02-49-36.625Z.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是gitbook&quot;&gt;&lt;a href=&quot;#什么是gitbook&quot; class=&quot;headerlink&quot; title=&quot;什么是gitbook&quot;&gt;&lt;/a&gt;什么是gitbook&lt;/h2&gt;&lt;p&gt;gitbook 是基于Node.js的命令行工具，可以使用github、git Markdown 书写电子书，可以作为自己知识的积累，书写API文档，将平时学习生活中的文字记录，出版电子书等等。&lt;/p&gt;
    
    </summary>
    
      <category term="其他" scheme="http://nsoft.vip/categories/%E5%85%B6%E4%BB%96/"/>
    
      <category term="工具" scheme="http://nsoft.vip/categories/%E5%85%B6%E4%BB%96/%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
  <entry>
    <title>170324-Docker之旅-CentOS7中安装Docker</title>
    <link href="http://nsoft.vip/2017/03/24/170324-Docker%E4%B9%8B%E6%97%85-CentOS7%E4%B8%AD%E5%AE%89%E8%A3%85Docker/"/>
    <id>http://nsoft.vip/2017/03/24/170324-Docker之旅-CentOS7中安装Docker/</id>
    <published>2017-03-24T11:17:20.000Z</published>
    <updated>2018-12-05T01:46:01.764Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CentOS7中安装Docker服务支持"><a href="#CentOS7中安装Docker服务支持" class="headerlink" title="CentOS7中安装Docker服务支持"></a>CentOS7中安装Docker服务支持</h2><a id="more"></a><h2 id="yum-update"><a href="#yum-update" class="headerlink" title="yum update"></a>yum update</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum update</span><br></pre></td></tr></table></figure><h2 id="Get-Docker-CE-on-CentOS"><a href="#Get-Docker-CE-on-CentOS" class="headerlink" title="Get Docker CE on CentOS"></a>Get Docker CE on CentOS</h2><p>You can install Docker CE on CentOS in just three steps.<br>Enterprise customers can also install Docker EE for CentOS.<br>Prerequisites</p><p>Docker CE is supported on CentOS 7.3 64-bit.</p><h3 id="1-Set-up-the-repository"><a href="#1-Set-up-the-repository" class="headerlink" title="1. Set up the repository"></a>1. Set up the repository</h3><p>Set up the Docker CE repository on CentOS:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install -y yum-utils</span><br><span class="line"></span><br><span class="line">$ sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line">$ sudo yum makecache fast</span><br></pre></td></tr></table></figure><h3 id="2-Get-Docker-CE"><a href="#2-Get-Docker-CE" class="headerlink" title="2. Get Docker CE"></a>2. Get Docker CE</h3><p>Install the latest version of Docker CE on CentOS:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum -y install docker-ce</span><br></pre></td></tr></table></figure></p><p>Start Docker:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl start docker</span><br></pre></td></tr></table></figure></p><h3 id="3-Test-your-Docker-CE-installation"><a href="#3-Test-your-Docker-CE-installation" class="headerlink" title="3. Test your Docker CE installation"></a>3. Test your Docker CE installation</h3><p>Test your installation:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run hello-world</span><br></pre></td></tr></table></figure></p><p>设置为开机自启<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo chkconfig docker on</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CentOS7中安装Docker服务支持&quot;&gt;&lt;a href=&quot;#CentOS7中安装Docker服务支持&quot; class=&quot;headerlink&quot; title=&quot;CentOS7中安装Docker服务支持&quot;&gt;&lt;/a&gt;CentOS7中安装Docker服务支持&lt;/h2&gt;
    
    </summary>
    
      <category term="微服务" scheme="http://nsoft.vip/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="docker" scheme="http://nsoft.vip/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/docker/"/>
    
    
      <category term="微服务" scheme="http://nsoft.vip/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="docker" scheme="http://nsoft.vip/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker之旅-介绍</title>
    <link href="http://nsoft.vip/2017/03/24/170324-Docker%E4%B9%8B%E6%97%85-%E4%BB%8B%E7%BB%8D/"/>
    <id>http://nsoft.vip/2017/03/24/170324-Docker之旅-介绍/</id>
    <published>2017-03-24T06:15:24.000Z</published>
    <updated>2018-12-05T01:46:01.057Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker是什么"><a href="#Docker是什么" class="headerlink" title="Docker是什么"></a>Docker是什么</h2><p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口,自2013年发行以来此项虚拟化容器技术得到了广泛发展。</p><a id="more"></a><p>从2016年Docker明确了将会在企业级方面重点跟进，2017年3月之后Docker分为两个版本Docker Community Edition(docker-ce)、Docker Enterprise Edition(docker-ee)</p><h3 id="CE与EE区别"><a href="#CE与EE区别" class="headerlink" title="CE与EE区别"></a>CE与EE区别</h3><p><img src="http://static.nsoft.vip/18-11-28/36914909.jpg" alt="火狐截图_2017-03-24T08-02-51.399Z.png"></p><h3 id="收费方式"><a href="#收费方式" class="headerlink" title="收费方式"></a>收费方式</h3><p><img src="http://static.nsoft.vip/18-11-28/93190151.jpg" alt="火狐截图_2017-03-24T07-59-46.425Z.png"></p><h3 id="土豪伙伴"><a href="#土豪伙伴" class="headerlink" title="土豪伙伴"></a>土豪伙伴</h3><p>土豪小伙伴早已跟上<br><img src="http://static.nsoft.vip/18-11-28/20531175.jpg" alt="火狐截图_2017-03-24T08-21-13.392Z.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Docker是什么&quot;&gt;&lt;a href=&quot;#Docker是什么&quot; class=&quot;headerlink&quot; title=&quot;Docker是什么&quot;&gt;&lt;/a&gt;Docker是什么&lt;/h2&gt;&lt;p&gt;Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口,自2013年发行以来此项虚拟化容器技术得到了广泛发展。&lt;/p&gt;
    
    </summary>
    
      <category term="微服务" scheme="http://nsoft.vip/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="docker" scheme="http://nsoft.vip/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/docker/"/>
    
    
      <category term="微服务" scheme="http://nsoft.vip/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="docker" scheme="http://nsoft.vip/tags/docker/"/>
    
  </entry>
  
</feed>
