<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Alex.Yao&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yao.com/"/>
  <updated>2018-11-28T06:48:38.027Z</updated>
  <id>http://yao.com/</id>
  
  <author>
    <name>Alex.Yao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一台电脑多个github账号设置</title>
    <link href="http://yao.com/2018/07/21/180721-%E4%B8%80%E5%8F%B0%E7%94%B5%E8%84%91%E5%A4%9A%E4%B8%AAgithub%E8%B4%A6%E5%8F%B7%E8%AE%BE%E7%BD%AE/"/>
    <id>http://yao.com/2018/07/21/180721-一台电脑多个github账号设置/</id>
    <published>2018-07-21T14:16:37.000Z</published>
    <updated>2018-11-28T06:48:38.027Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://static.nsoft.vip/18-7-23/47063187.jpg" alt=""><br>如何在一台电脑上使用多个github账号，由于之前已经配置过一个github账号，最近又注册了了一个账号，显然现在多账号的问题出现在自己面前，于是就扒了下多账号的设置。希望对遇到同样问题的你有一点帮助。</p><a id="more"></a><h3 id="生成多个SSH-Key"><a href="#生成多个SSH-Key" class="headerlink" title="生成多个SSH Key"></a>生成多个SSH Key</h3><p>进入用户家目录Windows 使用Git Bash, Linux 打开terminal. 各系统对应的目录位置如下：<br>Windows目录: C:\Users\用户名.ssh<br>Linux\Mac目录：~/.ssh  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C email</span><br></pre></td></tr></table></figure><p>输入如上命令，email 替换成需要生成key的邮箱回车，由于是多账号，我们需要修改默认的id_rsa 文件的名称，这里我们加上后缀，标实不同的github账号，输入密码部分可以留空或输入，若输入密码后续git push到远程仓库时均需输入此处设置的密码,方便起见我们使用ssh-agent（详见下文），回车若看到如下图所示，表示生成ssh key 成功了，重复如上操作生成多个ssh key。<br><img src="http://static.nsoft.vip/18-7-23/41537601.jpg" alt=""><br>进入用户家目录下的.ssh文件目录下，可以看到我们生成的多组key, id_rsa id_rsa.pub分别对应私钥与公钥<br><img src="http://static.nsoft.vip/18-7-23/55749639.jpg" alt=""></p><h3 id="配置Config文件"><a href="#配置Config文件" class="headerlink" title="配置Config文件"></a>配置Config文件</h3><p>为了让git知道我们用哪个账号提交，这里需要配置config文件，在当前家目录 .ssh文件夹下新建config文件，配置如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 配置github1</span><br><span class="line">Host yaonew.com                 # 自定义的host简称</span><br><span class="line">    HostName github.com         # 主机名可用ip也可以是域名</span><br><span class="line">    IdentityFile C:\\Users\\peeka\\.ssh\\id_rsa_yaonew   # 证书文件路径</span><br><span class="line"># 认证方式 可以设为 publickey,password publickey,keyboard-interactive</span><br><span class="line">    PreferredAuthentications publickey </span><br><span class="line">    User git                    # 登录用户名</span><br><span class="line"></span><br><span class="line"># 配置github2</span><br><span class="line">Host marspie.com </span><br><span class="line">    HostName github.com</span><br><span class="line">    IdentityFile C:\\Users\\peeka\\.ssh\\id_rsa_marspie</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    User git</span><br></pre></td></tr></table></figure><p>配置完以上信息后，git clone的链接应修改为如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 原始clone 地址</span><br><span class="line">git@github.com:yaonew/test1.git</span><br><span class="line">git@github.com:marspie/test2.git</span><br><span class="line"></span><br><span class="line"># 新clone地址</span><br><span class="line">git@yaonew.com:yaonew/test1.git</span><br><span class="line">git@marspie.com:marspie/test2.git</span><br></pre></td></tr></table></figure><h3 id="登陆Github添加公钥"><a href="#登陆Github添加公钥" class="headerlink" title="登陆Github添加公钥"></a>登陆Github添加公钥</h3><p>分别登陆两个github账号，进入Settings –&gt; SSH and GPG keys，拷贝~/.ssh 下.pub公钥文件内容添加至github<br><img src="http://static.nsoft.vip/18-7-23/16798650.jpg" alt=""><br><img src="http://static.nsoft.vip/18-7-23/80424136.jpg" alt=""></p><h3 id="SSH连接测试"><a href="#SSH连接测试" class="headerlink" title="SSH连接测试"></a>SSH连接测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br><span class="line">ssh -T git@marspie.com</span><br></pre></td></tr></table></figure><p><img src="http://static.nsoft.vip/18-7-23/80089082.jpg" alt=""><br>当看到如上信息时测试成功，同时远端github的钥匙已变成绿色<br><img src="http://static.nsoft.vip/18-7-23/28875863.jpg" alt=""></p><h3 id="本地git设置"><a href="#本地git设置" class="headerlink" title="本地git设置"></a>本地git设置</h3><p>这样设置过就OK了吗，显然不行，由于之前使用过一个github账号，并设置了全局git账号，这里需要移除<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 原有全局账号设置</span><br><span class="line">git config --golbal user.name &quot;name&quot;</span><br><span class="line">git config --golbal user.email &quot;xxx@qq.com&quot;</span><br><span class="line"></span><br><span class="line">#全局配置账户、邮箱已经移除</span><br><span class="line">git config --global --unset user.name</span><br><span class="line">git config --global --unset user.email</span><br><span class="line"></span><br><span class="line">#查看全局用户名、全局邮箱</span><br><span class="line">git config --global user.name</span><br><span class="line">git config --global user.email</span><br></pre></td></tr></table></figure></p><p>然后在具体的工程目录下设置用户及邮箱</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name yaonew</span><br><span class="line">git config user.email yaonew@126.com</span><br></pre></td></tr></table></figure><p>分别做相应账号工程下做相应修改并提及<br><img src="http://static.nsoft.vip/18-7-23/39513143.jpg" alt=""><br><img src="http://static.nsoft.vip/18-7-23/56876011.jpg" alt=""></p><h3 id="ssh-agent"><a href="#ssh-agent" class="headerlink" title="ssh-agent"></a>ssh-agent</h3><p>因为我们生成ssh key设置了密码，每次git push 认证时都需要输入密码，显然这不是我们希望的，ssh-agent是一个密钥管理器，运行ssh-agent以后，使用<a href="http://man.linuxde.net/ssh-add" title="ssh-add命令" target="_blank" rel="noopener">ssh-add</a>将私钥交给ssh-agent保管，其他程序需要身份验证的时候可以将验证申请交给ssh-agent来完成整个认证过程。</p><h4 id="打开-ssh-agent"><a href="#打开-ssh-agent" class="headerlink" title="打开 ssh-agent"></a>打开 ssh-agent</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># github官方的bash</span><br><span class="line">ssh-agent -s</span><br><span class="line"># 其它，比如msysgit</span><br><span class="line">eval $(ssh-agent -s)</span><br></pre></td></tr></table></figure><h4 id="添加私钥"><a href="#添加私钥" class="headerlink" title="添加私钥"></a>添加私钥</h4><p>添加秘钥时输入密码后续的认证就交由ssh-agent了，直接提交丝般顺滑 ^_^</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-add ~/.ssh/id_rsa_yaonew</span><br><span class="line">ssh-add ~/.ssh/id_rsa_marspie</span><br></pre></td></tr></table></figure><p><img src="http://static.nsoft.vip/18-7-24/94460676.jpg" alt=""></p><p>愉快的多账号之旅开始了。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://static.nsoft.vip/18-7-23/47063187.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;如何在一台电脑上使用多个github账号，由于之前已经配置过一个github账号，最近又注册了了一个账号，显然现在多账号的问题出现在自己面前，于是就扒了下多账号的设置。希望对遇到同样问题的你有一点帮助。&lt;/p&gt;
    
    </summary>
    
      <category term="协作" scheme="http://yao.com/categories/%E5%8D%8F%E4%BD%9C/"/>
    
      <category term="git" scheme="http://yao.com/categories/%E5%8D%8F%E4%BD%9C/git/"/>
    
    
      <category term="Git" scheme="http://yao.com/tags/Git/"/>
    
      <category term="Linux" scheme="http://yao.com/tags/Linux/"/>
    
      <category term="github" scheme="http://yao.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>微服务从入门到放弃之概述</title>
    <link href="http://yao.com/2017/10/12/171012-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%E4%B9%8B%E6%A6%82%E8%BF%B0/"/>
    <id>http://yao.com/2017/10/12/171012-微服务从入门到放弃之概述/</id>
    <published>2017-10-12T06:32:52.000Z</published>
    <updated>2018-11-28T07:35:22.651Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>微服务真的很火，很新，很潮，很多人说到微服务都能侃侃而谈，各种新鲜的名词、概念、框架止不住地蹦出来，但是：什么时候应当实行微服务呢？实行微服务应当要注意些什么呢？，首先我们了解下新生的微服务架构与传统架构有哪些区别。<br><img src="http://static.nsoft.vip/18-11-28/15585315.jpg" alt="QQ截图20171023151415.png"></p><a id="more"></a><h2 id="传统架构"><a href="#传统架构" class="headerlink" title="传统架构"></a>传统架构</h2><h3 id="单体架构"><a href="#单体架构" class="headerlink" title="单体架构"></a>单体架构</h3><p>Web应用发展早期，大部分Web工程将所有的功能模块打包到一起后放到Web容器中运行，很多企业的Jave应用程序打包成war,ear 它们的主要特点：</p><ol><li>一个程序包包含了应用所有功能， 通常称之为单体应用。</li><li>架构单体应用的架构风格， 我们称之为单体架构， 这是一种比较传统的架构风格。</li></ol><p><img src="http://static.nsoft.vip/18-11-28/51749077.jpg" alt="单体架构.png"></p><h4 id="单体架构缺点"><a href="#单体架构缺点" class="headerlink" title="单体架构缺点"></a>单体架构缺点</h4><ul><li>复杂性逐渐变高 - 由于业务的不断修改深入，系统变得越来越庞大，复杂度越来越高。</li><li>技术债务逐渐上升 - 参与项目的人员流动，水平不同，人员往往会埋坑，问题没有得到解决，坑越来越多。</li><li>部署速度逐渐变慢 - 业务模块增多，代码量不断增多，部署启动速度相应的越来越慢。</li><li>阻碍技术创新 - 技术在发展，历史的架构选型注定了系统形态，新的模块需求依然需要使用老旧的技术。</li><li>无法按需伸缩（出现IO或CPU瓶颈时需要兼顾或妥协）</li></ul><h2 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h2><h3 id="微服务是什么"><a href="#微服务是什么" class="headerlink" title="微服务是什么"></a>微服务是什么</h3><p>lMartin Fowler：简而言之，微服务架构风格这种开发方法，是以开发一组小型服务的方式来开发一个独立的应用系统的。其中每个小型服务都运行在自己的进程中，并经常采用HTTP资源API这样轻量的机制来相互通信。这些服务围绕业务功能进行构建，并能通过全自动的部署机制来进行独立部署。这些微服务可以使用不同的语言来编写，并且可以使用不同的数据存储技术。对这些微服务我们仅做最低限度的集中管理。<br>来自：<a href="http://www.martinfowler.com/articles/microservices.html" target="_blank" rel="noopener">http://www.martinfowler.com/articles/microservices.html</a></p><p><img src="http://static.nsoft.vip/18-11-28/11550801.jpg" alt="微服务架构.png"></p><h3 id="微服务解决了什么"><a href="#微服务解决了什么" class="headerlink" title="微服务解决了什么"></a>微服务解决了什么</h3><h3 id="微服务特性"><a href="#微服务特性" class="headerlink" title="微服务特性"></a>微服务特性</h3><ol><li>每个微服务可独立运行在自己的进程里；</li><li>一系列独立运行的微服务共同构建起了整个系统；</li><li>每个服务为独立的业务开发，一个微服务一般完成某个特定的功能，比如：订单管理、用户管理等；</li><li>微服务之间通过一些轻量的通信机制进行通信，例如通过REST API或者RPC的方式进行调用。</li></ol><h3 id="微服务的优点"><a href="#微服务的优点" class="headerlink" title="微服务的优点"></a>微服务的优点</h3><ul><li>启动较快</li><li>局部修改容易部署</li><li>技术栈不受限</li><li>按需伸缩</li><li>DevOps </li></ul><h3 id="微服务带来的挑战"><a href="#微服务带来的挑战" class="headerlink" title="微服务带来的挑战"></a>微服务带来的挑战</h3><ul><li>边界清晰 - 软件架构开发中如何合理的划分边界，边界清晰和技术限制之间做出权衡</li><li>运维要求较高 - 服务之间相互依赖运维需要清晰的知道服务之间的依赖关系</li><li>分布式的复杂性 - 分布式系统固有的复杂性，网络问题，完整的监控，如何保持一致性，事务保障，高可用性等等 </li><li>接口调整成本高 - 一个服务接口的调整可能涉及到多服务需要同时调整</li><li>重复劳动 - 一个个微服务既然名曰”服务”，就得五脏俱全，就得螺蛳壳里做道场, 麻雀虽小五脏全该有的基础功能数据库的访问，工具类使用，IO处理，网络，各个服务里面都得处理。</li></ul><h3 id="微服务设计原则"><a href="#微服务设计原则" class="headerlink" title="微服务设计原则"></a>微服务设计原则</h3><ul><li>单一职责原则-[Single Responsible Principle] ，即每个服务只做一件事，并把这件事做好；</li><li>服务自治原则- 每个微服务需要有自己独立的开发、测试、部署、运维。</li><li>轻量级通信原则 -  通讯协议需要跨平台，跨语言，不要绑定技术栈。</li><li>接口明确原则 - 一个微服务接口的修改可能相关联的微服务也需要跟着修改，这时需要提前规划好，避免接口修改</li></ul><h2 id="总论"><a href="#总论" class="headerlink" title="总论"></a>总论</h2><p>总的来说，从传统架构到SOA再到微服务架构，微服务带来了很多全新的东西，可以解决传统架构的一些问题，但同时对系统的架构技术也提出的更高的要求，实现微服务也需要一定的前提条件，，我们不能一味的认为微服务架构好。微服务这种分开当家当然潇洒，但要知道自己当家也有自己的累。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;微服务真的很火，很新，很潮，很多人说到微服务都能侃侃而谈，各种新鲜的名词、概念、框架止不住地蹦出来，但是：什么时候应当实行微服务呢？实行微服务应当要注意些什么呢？，首先我们了解下新生的微服务架构与传统架构有哪些区别。&lt;br&gt;&lt;img src=&quot;http://static.nsoft.vip/18-11-28/15585315.jpg&quot; alt=&quot;QQ截图20171023151415.png&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="微服务" scheme="http://yao.com/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
  </entry>
  
  <entry>
    <title>Docker之旅-使用阿里云Docker镜像库加速</title>
    <link href="http://yao.com/2017/09/15/170915-Docker%E4%B9%8B%E6%97%85-%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91Docker%E9%95%9C%E5%83%8F%E5%BA%93%E5%8A%A0%E9%80%9F/"/>
    <id>http://yao.com/2017/09/15/170915-Docker之旅-使用阿里云Docker镜像库加速/</id>
    <published>2017-09-15T06:30:52.000Z</published>
    <updated>2018-11-28T07:33:52.859Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用阿里云Docker镜像库加速"><a href="#使用阿里云Docker镜像库加速" class="headerlink" title="使用阿里云Docker镜像库加速"></a>使用阿里云Docker镜像库加速</h2><p>官方的docker hub 访问实在太慢，国内使用阿里云<a href="https://dev.aliyun.com/search.html" target="_blank" rel="noopener">Docker镜像库</a>,可以大大加快镜像的下载速度，访问Docker镜像库开通了阿里云开发者帐号，进入管理中心，获取您的专属加速器地址。<br><img src="http://static.nsoft.vip/18-11-28/94459845.jpg" alt="阿里云开发者平台.png"></p><a id="more"></a><p>根据操作文档，选择对应您的操作系统，目前提供了Ubuntu、CentOS、Window、Mac系统的操作说明:</p><h2 id="一、Ubuntu"><a href="#一、Ubuntu" class="headerlink" title="一、Ubuntu"></a>一、Ubuntu</h2><h3 id="安装／升级你的Docker客户端"><a href="#安装／升级你的Docker客户端" class="headerlink" title="安装／升级你的Docker客户端"></a>安装／升级你的Docker客户端</h3><p>推荐安装1.10.0以上版本的Docker客户端。<br>或执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL http://acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker-engine/internet | sh -</span><br></pre></td></tr></table></figure><h3 id="使用Docker加速器"><a href="#使用Docker加速器" class="headerlink" title="使用Docker加速器"></a>使用Docker加速器</h3><p>针对Docker客户端版本大于1.10的用户，可以通过修改daemon配置文件/etc/docker/daemon.json来使用加速器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-<span class="string">'EOF'</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [<span class="string">"https://z8b39a7q.mirror.aliyuncs.com"</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="二、CentOS"><a href="#二、CentOS" class="headerlink" title="二、CentOS"></a>二、CentOS</h2><h3 id="安装／升级你的Docker客户端-1"><a href="#安装／升级你的Docker客户端-1" class="headerlink" title="安装／升级你的Docker客户端"></a>安装／升级你的Docker客户端</h3><p>推荐安装1.10.0以上版本的Docker客户端。<br>您可以通过阿里云的镜像仓库下载：<a href="http://mirrors.aliyun.com/help/docker-ce?spm=a2c1q.8351553.0.0.26abf789oI02QT" target="_blank" rel="noopener">docker-ce</a><br>或执行以下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL http://acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker-engine/internet | sh -</span><br><span class="line">``` </span><br><span class="line"><span class="comment">### 如何使用Docker加速器</span></span><br><span class="line">针对Docker客户端版本大于1.10的用户</span><br><span class="line">您可以通过修改daemon配置文件/etc/docker/daemon.json来使用加速器：</span><br><span class="line">``` bash</span><br><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-<span class="string">'EOF'</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [<span class="string">"https://z8b39a7q.mirror.aliyuncs.com"</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line"><span class="comment">## 三、Window</span></span><br><span class="line"><span class="comment">### 安装／升级你的Docker客户端</span></span><br><span class="line">    1. 对于Windows 10以下的用户 推荐使用 Docker Toolbox</span><br><span class="line">        Toolbox的介绍和帮助：mirrors.aliyun.com/<span class="built_in">help</span>/docker-toolbox</span><br><span class="line">        Windows系统的安装文件目录：http://mirrors.aliyun.com/docker-toolbox/windows/docker-toolbox/</span><br><span class="line">    2. 对于Windows 10以上的用户 推荐使用 Docker <span class="keyword">for</span> Windows</span><br><span class="line">        Windows系统的安装文件目录：http://mirrors.aliyun.com/docker-toolbox/windows/docker-for-windows/</span><br><span class="line"><span class="comment">### 如何使用Docker加速器</span></span><br><span class="line">1. 创建一台安装有Docker环境的Linux虚拟机，指定机器名称为default，同时配置Docker加速器地址。</span><br><span class="line">``` bash</span><br><span class="line">docker-machine create --engine-registry-mirror=https://z8b39a7q.mirror.aliyuncs.com -d virtualbox default</span><br><span class="line">``` </span><br><span class="line">2. 查看机器的环境配置，并配置到本地，并通过Docker客户端访问Docker服务。</span><br><span class="line">``` bash</span><br><span class="line">docker-machine env default</span><br><span class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$(docker-machine env default)</span>"</span></span><br><span class="line">docker info</span><br></pre></td></tr></table></figure></p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li><p>Docker for Windows 和 Docker Toolbox是不兼容，如果同时安装两者的话，需要使用hyperv的参数启动。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-machine create --engine-registry-mirror=https://z8b39a7q.mirror.aliyuncs.com -d hyperv default</span><br></pre></td></tr></table></figure></li><li><p>Docker for Windows 有两种运行模式，一种运行Windows相关容器，一种运行传统的Linux容器。同一时间只能选择一种模式运行。</p></li></ol><h2 id="四、Mac"><a href="#四、Mac" class="headerlink" title="四、Mac"></a>四、Mac</h2><h3 id="安装／升级你的Docker客户端-2"><a href="#安装／升级你的Docker客户端-2" class="headerlink" title="安装／升级你的Docker客户端"></a>安装／升级你的Docker客户端</h3><pre><code>1. 对于10.10.3以下的用户 推荐使用 Docker Toolbox    Toolbox的介绍和帮助：mirrors.aliyun.com/help/docker-toolbox    Mac系统的安装文件目录：http://mirrors.aliyun.com/docker-toolbox/mac/docker-toolbox/2. 对于10.10.3以上的用户 推荐使用 Docker for Mac    Mac系统的安装文件目录：http://mirrors.aliyun.com/docker-toolbox/mac/docker-for-mac/</code></pre><h3 id="如何使用Docker加速器"><a href="#如何使用Docker加速器" class="headerlink" title="如何使用Docker加速器"></a>如何使用Docker加速器</h3><ol><li>创建一台安装有Docker环境的Linux虚拟机，指定机器名称为default，同时配置Docker加速器地址。<pre><code class="bash">docker-machine create --engine-registry-mirror=https://z8b39a7q.mirror.aliyuncs.com -d virtualbox default</code></pre></li><li>查看机器的环境配置，并配置到本地，并通过Docker客户端访问Docker服务。<pre><code class="bash">docker-machine env default<span class="built_in">eval</span> <span class="string">"<span class="variable">$(docker-machine env default)</span>"</span>docker info</code></pre></li></ol><p><strong>设置完成，接着我们再试下pull一个镜像，是不是有种飞起来的赶脚O(∩_∩)O~</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;使用阿里云Docker镜像库加速&quot;&gt;&lt;a href=&quot;#使用阿里云Docker镜像库加速&quot; class=&quot;headerlink&quot; title=&quot;使用阿里云Docker镜像库加速&quot;&gt;&lt;/a&gt;使用阿里云Docker镜像库加速&lt;/h2&gt;&lt;p&gt;官方的docker hub 访问实在太慢，国内使用阿里云&lt;a href=&quot;https://dev.aliyun.com/search.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Docker镜像库&lt;/a&gt;,可以大大加快镜像的下载速度，访问Docker镜像库开通了阿里云开发者帐号，进入管理中心，获取您的专属加速器地址。&lt;br&gt;&lt;img src=&quot;http://static.nsoft.vip/18-11-28/94459845.jpg&quot; alt=&quot;阿里云开发者平台.png&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="微服务" scheme="http://yao.com/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="docker" scheme="http://yao.com/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/docker/"/>
    
    
  </entry>
  
  <entry>
    <title>Docker之旅-Docker互联</title>
    <link href="http://yao.com/2017/09/11/170911-Docker%E4%B9%8B%E6%97%85-Docker%E4%BA%92%E8%81%94/"/>
    <id>http://yao.com/2017/09/11/170911-Docker之旅-Docker互联/</id>
    <published>2017-09-11T06:29:43.000Z</published>
    <updated>2018-11-28T07:33:08.732Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker的互联方式"><a href="#Docker的互联方式" class="headerlink" title="Docker的互联方式"></a>Docker的互联方式</h2><ul><li>基于Volume的互联</li><li>基于Link的互联</li><li>基于网络的互联</li></ul><a id="more"></a><h2 id="基于Volume的互联"><a href="#基于Volume的互联" class="headerlink" title="基于Volume的互联"></a>基于Volume的互联</h2><p>在docker run 启动一个容器的时候，我们可以通过设置 -v 参数将宿主机目录映射到容器目录，这样容器对映射路径下数据的修改即使在容器被删除的情况下，数据还能够保留。<br><img src="http://static.nsoft.vip/18-11-28/50640757.jpg" alt="run_docker_with_v.png"><br>进入learn目录，在此目录下创建 一个文件夹<br><img src="http://static.nsoft.vip/18-11-28/35404330.jpg" alt="run_docker_with_v2.png"><br>查看容器详情，在Mounts 节点我们可以看到/learn 目录对应的宿主机目录，进入：/var/lib/docker/volumes/858c12a2fed04733b27256ae57a1f76455e9f0030182ad405bf5fd5aa049c54d/_data<br>docker inspect 4bc0f1e4a005<br><img src="http://static.nsoft.vip/18-11-28/5039599.jpg" alt="run_docker_with_v3.png"><br>查看宿主机的目录，我们可以发现我们在容器中创建的 testvolume 文件夹目录<br><img src="http://static.nsoft.vip/18-11-28/84724374.jpg" alt="run_docker_with_v4.png"><br>可以多个容器中的Volume指向宿主机的同一个目录，实现基于文件的的共享访问<br><img src="http://static.nsoft.vip/18-11-28/26996813.jpg" alt="run_docker_with_v5.png"><br><img src="http://static.nsoft.vip/18-11-28/61031998.jpg" alt="run_docker_with_v6.png"><br>基于容器数据的的单主机互联<br><img src="http://static.nsoft.vip/18-11-28/7551785.jpg" alt="run_docker_with_v7.png"></p><h2 id="基于Link的互联"><a href="#基于Link的互联" class="headerlink" title="基于Link的互联"></a>基于Link的互联</h2><p>启用一个mysql docker 容器</p><pre><code class="bash">docker run --rm=<span class="literal">true</span> --name=marspiedb -e MYSQL_ROOT_PASSWORD=123456 mysql</code></pre><p><img src="http://static.nsoft.vip/18-11-28/46517357.jpg" alt="run_docker_link1.png"><br>查看我们创建的marspiedb 详细信息</p><pre><code class="bash"><span class="comment"># docker inspect marspiedb</span></code></pre><p><img src="http://static.nsoft.vip/18-11-28/49657221.jpg" alt="run_docker_link2.png"><br>Docker默认允许container互通，通过-icc=false关闭互通。一旦关闭了互通，只能通过-link name:alias命令连接指定container.<br><img src="http://static.nsoft.vip/18-11-28/48657048.jpg" alt="run_docker_link3.png"><br>– link redis:db的别名，会在/etc/hosts中生成对应的ip映射<br><img src="http://static.nsoft.vip/18-11-28/28455858.jpg" alt="run_docker_link4.png"><br>Link跨主机的互联,使用 Docker远程代理（Ambassador）模式，<a href="https://github.com/gliderlabs/connectable" target="_blank" rel="noopener">https://github.com/gliderlabs/connectable</a><br>socat是一个多功能的网络工具，名字来由是”Socket CAT”</p><h2 id="基于网络的互联"><a href="#基于网络的互联" class="headerlink" title="基于网络的互联"></a>基于网络的互联</h2><ol><li>最常用的方式端口映射，将docker端口映射到宿主机，直接通过宿主机IP：映射端口 访问<pre><code class="bash">docker run --rm=<span class="literal">true</span> --name=marspiedb -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql</code></pre></li><li>直接使用宿主机网络<pre><code class="bash">docker run --rm=<span class="literal">true</span> --net=host --name=marspiedb -e MYSQL_ROOT_PASSWORD=123456 mysql</code></pre></li><li>容器共用一个IP地址<pre><code class="bash">docker run --rm=<span class="literal">true</span> --name=marspiedb -e MYSQL_ROOT_PASSWORD=123456 mysqldocker run --rm=<span class="literal">true</span> --net=container:marspiedb java ip addr</code></pre><img src="http://static.nsoft.vip/18-11-28/73127528.jpg" alt="run_docker_net1.png"><br>同一个IP 使用localhost 就可以很愉快的访问(⊙o⊙)哦<br><img src="http://static.nsoft.vip/18-11-28/84566791.jpg" alt="run_docker_net2.png"></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Docker的互联方式&quot;&gt;&lt;a href=&quot;#Docker的互联方式&quot; class=&quot;headerlink&quot; title=&quot;Docker的互联方式&quot;&gt;&lt;/a&gt;Docker的互联方式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;基于Volume的互联&lt;/li&gt;
&lt;li&gt;基于Link的互联&lt;/li&gt;
&lt;li&gt;基于网络的互联&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="微服务" scheme="http://yao.com/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="docker" scheme="http://yao.com/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/docker/"/>
    
    
  </entry>
  
  <entry>
    <title>Docker之旅-Docker镜像制作</title>
    <link href="http://yao.com/2017/07/25/170725-Docker%E4%B9%8B%E6%97%85-Docker%E9%95%9C%E5%83%8F%E5%88%B6%E4%BD%9C/"/>
    <id>http://yao.com/2017/07/25/170725-Docker之旅-Docker镜像制作/</id>
    <published>2017-07-25T06:28:09.000Z</published>
    <updated>2018-11-28T07:24:41.963Z</updated>
    
    <content type="html"><![CDATA[<h2 id="制作自己的Docker镜像"><a href="#制作自己的Docker镜像" class="headerlink" title="制作自己的Docker镜像"></a>制作自己的Docker镜像</h2><p>制作自己的Docker镜像有两种方式</p><ol><li>将容器变成镜像</li><li>通过Buildfile语法制作镜像</li></ol><a id="more"></a><h3 id="将容器变成镜像"><a href="#将容器变成镜像" class="headerlink" title="将容器变成镜像"></a>将容器变成镜像</h3><p>首先我们先从docker镜像仓库拉取一个tomcat镜像，切换到root账号<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker search tomcat</span></span><br><span class="line">NAME                           DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">tomcat                         Apache Tomcat is an open <span class="built_in">source</span> implementa...   1419      [OK]       </span><br><span class="line">tomee                          Apache TomEE is an all-Apache Java EE cert...   38        [OK]       </span><br><span class="line">dordoka/tomcat                 Ubuntu 14.04, Oracle JDK 8 and Tomcat 8 ba...   37                   [OK]</span><br><span class="line">davidcaste/alpine-tomcat       Apache Tomcat 7/8 using Oracle Java 7/8 wi...   19                   [OK]</span><br><span class="line">consol/tomcat-7.0              Tomcat 7.0.57, 8080, <span class="string">"admin/admin"</span>              16                   [OK]</span><br><span class="line">cloudesire/tomcat              Tomcat server, 6/7/8                            15                   [OK]</span><br><span class="line">....</span><br></pre></td></tr></table></figure></p><p>这里会列出镜像仓库 中一堆的tomcat相关的镜像资源，下面我们拉取一个到本地。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker pull dordoka/tomcat</span></span><br><span class="line">//等待一段时间拉取完成</span><br><span class="line"><span class="comment"># docker images</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">dordoka/tomcat      latest              7d9888a99efb        7 months ago        780 MB</span><br></pre></td></tr></table></figure></p><p>启动容器<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker run -it -p 8080:8080 dordoka/tomcat</span></span><br><span class="line">//查看所有容器</span><br><span class="line"><span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                              NAMES</span><br><span class="line">9a987406fc9e        dordoka/tomcat      <span class="string">"/opt/tomcat/bin/c..."</span>   2 minutes ago       Up About a minute   8009/tcp, 0.0.0.0:8080-&gt;8080/tcp   flamboyant_darwin</span><br><span class="line">// 下面我们进入容器，做一些修改</span><br><span class="line"><span class="comment"># docker exec -it 9a987406fc9e /bin/bash</span></span><br><span class="line">root@9a987406fc9e:/opt/tomcat<span class="comment"># cd webapps</span></span><br><span class="line">root@9a987406fc9e:/opt/tomcat/webapps<span class="comment"># ls</span></span><br><span class="line">host-manager  manager</span><br><span class="line">// 接下来在webapps目录下创建一个ROOT目录，并在里面新建一个index.html页面</span><br><span class="line">root@9a987406fc9e:/opt/tomcat/webapps<span class="comment"># mkdir ROOT</span></span><br><span class="line">root@9a987406fc9e:/opt/tomcat/webapps<span class="comment"># cd ROOT/</span></span><br><span class="line">root@9a987406fc9e:/opt/tomcat/webapps/ROOT<span class="comment"># touch index.html</span></span><br><span class="line">// 在Html页面写些内容，比如 Hello World!</span><br><span class="line">root@9a987406fc9e:/opt/tomcat/webapps/ROOT<span class="comment"># vi index.html </span></span><br><span class="line">// 编辑完退出 container</span><br><span class="line">root@9a987406fc9e:/opt/tomcat/webapps/ROOT<span class="comment"># exit</span></span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure></p><p>在宿主机上通过浏览器访问 <a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a> 就能看到我们对于容器的修改。<br><img src="http://static.nsoft.vip/18-11-28/63750209.jpg" alt="docker 容器的修改.png"></p><h3 id="将我们修改好的容器制作成镜像"><a href="#将我们修改好的容器制作成镜像" class="headerlink" title="将我们修改好的容器制作成镜像"></a>将我们修改好的容器制作成镜像</h3><p>通过docker commit <container> [repo:tag] 将容器制作成镜像<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker commit 9a987406fc9e marspie/tomcat:1.0</span></span><br><span class="line">sha256:8887c9ac97bc3f3fc5767bf714f058035f4f89cd24162a57844140d755a505a1</span><br><span class="line">//查看本地镜像，可以看到我们制作好的marspie/tomcat 1.0版</span><br><span class="line"><span class="comment"># docker images</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">marspie/tomcat      1.0                 8887c9ac97bc        49 seconds ago      780 MB</span><br><span class="line">dordoka/tomcat      latest              7d9888a99efb        7 months ago        780 MB</span><br></pre></td></tr></table></figure></container></p><p>将容器制作成镜像的做法：</p><table style="border-right:1px solid #3c3c3c;border-bottom:1px solid #3c3c3c;width:98%"><br>  <tr><br>    <th width="50%," bgcolor="yellow" style="border-left:1px solid #3c3c3c;border-top:1px solid #3c3c3c">优点</th><br>    <th width="50%," bgcolor="yellow" style="border-left:1px solid #3c3c3c;border-top:1px solid #3c3c3c">缺点</th><br>  </tr><br>  <tr><br>    <td style="border-left:1px solid #3c3c3c;border-top:1px solid #3c3c3c"> 最方便，最快速</td><br>    <td style="border-left:1px solid #3c3c3c;border-top:1px solid #3c3c3c"> 不规范，无法自动化 </td><br>  </tr><br></table><h3 id="Buildfile-制作镜像"><a href="#Buildfile-制作镜像" class="headerlink" title="Buildfile 制作镜像"></a>Buildfile 制作镜像</h3><p>下面我们通过Buildfile文件来制作一个jdk1.8-tomcat8的镜像。</p><ol><li>首先我们从Oracle官网下载: <a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">jdk-8u144-linux-x64.tar.gz</a></li><li>下载Tomcat8 Apache官网下载：<a href="http://tomcat.apache.org/download-80.cgi" target="_blank" rel="noopener">apache-tomcat-8.5.16.tar.gz</a></li><li><p>Buildfile 文件内容如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># VERSION 0.0.1</span></span><br><span class="line"><span class="comment"># ubuntu server </span></span><br><span class="line">FROM ubuntu</span><br><span class="line"><span class="comment"># 签名</span></span><br><span class="line">MAINTAINER MARSPIE <span class="string">"marspie@126.com"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把java与tomcat添加到容器中   </span></span><br><span class="line">ADD jdk-8u144-linux-x64.tar.gz /usr/<span class="built_in">local</span>/</span><br><span class="line">ADD apache-tomcat-8.5.16.tar.gz /usr/<span class="built_in">local</span>/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置java与tomcat环境变量  </span></span><br><span class="line">ENV JAVA_HOME /usr/<span class="built_in">local</span>/jdk1.8.0_144</span><br><span class="line">ENV CLASSPATH <span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line"></span><br><span class="line">ENV TOMCAT_HOME /usr/<span class="built_in">local</span>/apache-tomcat-8.5.16  </span><br><span class="line">ENV PATH <span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$TOMCAT_HOME</span>/lib:<span class="variable">$TOMCAT_HOME</span>/bin  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 容器运行时监听的端口  </span></span><br><span class="line">EXPOSE 8080  </span><br><span class="line">  </span><br><span class="line">ENTRYPOINT [<span class="string">"/usr/local/apache-tomcat-8.5.16/bin/catalina.sh"</span>, <span class="string">"run"</span>]</span><br><span class="line"><span class="comment">#CMD /usr/local/apache-tomcat-8.5.16/bin/catalina.sh run</span></span><br><span class="line">``` </span><br><span class="line">4. 将如上准备的3个文件至于同一目录下</span><br><span class="line">``` bash</span><br><span class="line">[root@bogon docker]<span class="comment"># ls -l</span></span><br><span class="line">total 190372</span><br><span class="line">-rwxrw-rw-. 1 alex alex   9417469 Jul 30 18:28 apache-tomcat-8.5.16.tar.gz</span><br><span class="line">-rw-------. 1 alex alex       654 Jul 30 19:09 Dockerfile</span><br><span class="line">-rwxrw-rw-. 1 alex alex 185515842 Jul 30 18:34 jdk-8u144-linux-x64.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>使用如下命令制作镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[root@bogon docker]<span class="comment"># docker build -t marspie/ubuntu-tomcat8:0.0.2 .</span></span><br><span class="line">Sending build context to Docker daemon 194.9 MB</span><br><span class="line">Step 1/10 : FROM ubuntu</span><br><span class="line"> ---&gt; 14f60031763d</span><br><span class="line">Step 2/10 : MAINTAINER MARSPIE <span class="string">"marspie@126.com"</span></span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 9e2681f280b5</span><br><span class="line">Step 3/10 : ADD jdk-8u144-linux-x64.tar.gz /usr/<span class="built_in">local</span>/</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; e69764710ed4</span><br><span class="line">Step 4/10 : ADD apache-tomcat-8.5.16.tar.gz /usr/<span class="built_in">local</span>/</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 9cef7a3e804b</span><br><span class="line">Step 5/10 : ENV JAVA_HOME /usr/<span class="built_in">local</span>/jdk1.8.0_144</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 54b3e6339868</span><br><span class="line">Step 6/10 : ENV CLASSPATH <span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 463ccbe97778</span><br><span class="line">Step 7/10 : ENV TOMCAT_HOME /usr/<span class="built_in">local</span>/apache-tomcat-8.5.16</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 9455c2777e34</span><br><span class="line">Step 8/10 : ENV PATH <span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$TOMCAT_HOME</span>/lib:<span class="variable">$TOMCAT_HOME</span>/bin</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 5fc99c79cfe5</span><br><span class="line">Step 9/10 : EXPOSE 8080</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 63aa2690221f</span><br><span class="line">Step 10/10 : ENTRYPOINT /usr/<span class="built_in">local</span>/apache-tomcat-8.5.16/bin/catalina.sh run</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> ef7da9894470</span><br><span class="line"> ---&gt; 55eebdf6b21d</span><br><span class="line">Removing intermediate container ef7da9894470</span><br><span class="line">Successfully built 55eebdf6b21d</span><br></pre></td></tr></table></figure></li><li><p>运行下我们制作的tomcat镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker run -it -p 8080:8080 55eebdf6b21d</span></span><br></pre></td></tr></table></figure></li><li><p>测试，通过宿主机浏览器访问：<a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a> 看到tomcat的欢迎页面，好了通过Dockerfile制作镜像成功了。</p></li></ol><h3 id="Docker-镜像的导入导出"><a href="#Docker-镜像的导入导出" class="headerlink" title="Docker 镜像的导入导出"></a>Docker 镜像的导入导出</h3><p>将镜像导出为文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#docker save -o marspie-ubuntu-tomcat8.0.02.tar marspie/ubuntu-tomcat8:0.0.2</span></span><br></pre></td></tr></table></figure></p><p>完成后通过 ls 命令即可看到文件<br><img src="http://static.nsoft.vip/18-11-28/69873981.jpg" alt="docker_images_save.png"></p><p>将我们打包导出的镜像包上传至另一台虚机<br><img src="http://static.nsoft.vip/18-11-28/10477511.jpg" alt="docker_images_up.png"><br>镜像导入<br>docker load<br><img src="http://static.nsoft.vip/18-11-28/58244929.jpg" alt="docker_images_load.png"><br>这样我们又可以在这台虚机愉快的玩耍了O(∩_∩)O~</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;制作自己的Docker镜像&quot;&gt;&lt;a href=&quot;#制作自己的Docker镜像&quot; class=&quot;headerlink&quot; title=&quot;制作自己的Docker镜像&quot;&gt;&lt;/a&gt;制作自己的Docker镜像&lt;/h2&gt;&lt;p&gt;制作自己的Docker镜像有两种方式&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将容器变成镜像&lt;/li&gt;
&lt;li&gt;通过Buildfile语法制作镜像&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="微服务" scheme="http://yao.com/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="docker" scheme="http://yao.com/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/docker/"/>
    
    
  </entry>
  
  <entry>
    <title>ubuntu 16.04 LTS RabbitMQ 3.6.10 安装配置</title>
    <link href="http://yao.com/2017/06/21/170621-ubuntu-16-04-LTS-RabbitMQ-3-6-10-%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
    <id>http://yao.com/2017/06/21/170621-ubuntu-16-04-LTS-RabbitMQ-3-6-10-安装配置/</id>
    <published>2017-06-21T06:27:09.000Z</published>
    <updated>2018-11-28T07:18:38.319Z</updated>
    
    <content type="html"><![CDATA[<h2 id="RabbitMQ-安装配置"><a href="#RabbitMQ-安装配置" class="headerlink" title="RabbitMQ 安装配置"></a>RabbitMQ 安装配置</h2><p><img src="http://static.nsoft.vip/18-11-28/82919675.jpg" alt="RabbitMQ_.png"><br>RabbitMQ 已经经历了10 来个春夏秋冬，全球超过35000生产部署RabbitMQ，RabbitMQ是最受欢迎的开源消息队列，<br>正如官网的介绍：</p><p>RabbitMQ is the most widely deployed open source message broker</p><p>With more than 35,000 production deployments of RabbitMQ world-wide at small startups and large enterprises, RabbitMQ is the most popular open source message broker.<br><a id="more"></a></p><h2 id="RabbitMQ-安装"><a href="#RabbitMQ-安装" class="headerlink" title="RabbitMQ 安装"></a>RabbitMQ 安装</h2><ol><li>访问<a href="http://www.rabbitmq.com/download.html" target="_blank" rel="noopener">RabbitMQ官网</a> 下载对应系统版本，这里我们下载<a href="http://www.rabbitmq.com/releases/rabbitmq-server/v3.6.10/rabbitmq-server_3.6.10-1_all.deb" target="_blank" rel="noopener">Debian Ubuntu</a> 对应的版本。</li><li>将下载的rabbitmq-server_3.6.10-1_all.deb 安装包放于用户家目录下work目录。<pre><code class="bash">alex@ubuntu:~$ <span class="built_in">cd</span> work/alex@ubuntu:~/work$ ls -ltotal 4772-rwxrw-rw- 1 alex alex 4885200 Jun 21 01:29 rabbitmq-server_3.6.10-1_all.debalex@ubuntu:~/work$ </code></pre></li><li>使用 dpkg 命令安装 rabbitmq<br>dpkg 参见：<a href="http://blog.csdn.net/kevinhg/article/details/5934462" target="_blank" rel="noopener">Ubuntu下deb包的安装方法</a><br><code>`</code> bash<br>alex@ubuntu:~/work$ sudo dpkg -i rabbitmq-server_3.6.10-1_all.deb<br>[sudo] password for alex:<br>Selecting previously unselected package rabbitmq-server.<br>(Reading database … 208585 files and directories currently installed.)<br>Preparing to unpack rabbitmq-server_3.6.10-1_all.deb …<br>Unpacking rabbitmq-server (3.6.10-1) …<br>dpkg: dependency problems prevent configuration of rabbitmq-server:<br>rabbitmq-server depends on erlang-nox (&gt;= 1:16.b.3) | esl-erlang; however:<br>Package erlang-nox is not installed.<br>Package esl-erlang is not installed.<br>rabbitmq-server depends on socat; however:<br>Package socat is not installed.</li></ol><p>dpkg: error processing package rabbitmq-server (–install):<br> dependency problems - leaving unconfigured<br>Processing triggers for man-db (2.7.5-1) …<br>Processing triggers for systemd (229-4ubuntu10) …<br>Processing triggers for ureadahead (0.100.0-19) …<br>Errors were encountered while processing:<br> rabbitmq-server</p><pre><code>如上rabbitmq-server依赖于erlang-nox，下面安装输入：sudo apt-get install erlang-noxbut 依然报错``` bashalex@ubuntu:~/work$ sudo apt-get install erlang-noxReading package lists... DoneBuilding dependency tree       Reading state information... DoneYou might want to run &apos;apt-get -f install&apos; to correct these:The following packages have unmet dependencies: erlang-nox : Depends: erlang-base but it is not going to be installed or                       erlang-base-hipe but it is not going to be installed              Depends: erlang-asn1 but it is not going to be installed              Depends: erlang-corba but it is not going to be installed              Depends: erlang-crypto but it is not going to be installed              Depends: erlang-diameter but it is not going to be installed              Depends: erlang-edoc but it is not going to be installed              Depends: erlang-eldap but it is not going to be installed              Depends: erlang-erl-docgen but it is not going to be installed              Depends: erlang-eunit but it is not going to be installed              Depends: erlang-ic but it is not going to be installed              Depends: erlang-inets but it is not going to be installed              Depends: erlang-mnesia but it is not going to be installed              Depends: erlang-odbc but it is not going to be installed              Depends: erlang-os-mon but it is not going to be installed              Depends: erlang-parsetools but it is not going to be installed              Depends: erlang-percept but it is not going to be installed              Depends: erlang-public-key but it is not going to be installed              Depends: erlang-runtime-tools but it is not going to be installed              Depends: erlang-snmp but it is not going to be installed              Depends: erlang-ssh but it is not going to be installed              Depends: erlang-ssl but it is not going to be installed              Depends: erlang-syntax-tools but it is not going to be installed              Depends: erlang-tools but it is not going to be installed              Depends: erlang-webtool but it is not going to be installed              Depends: erlang-xmerl but it is not going to be installed rabbitmq-server : Depends: socat but it is not going to be installedE: Unmet dependencies. Try &apos;apt-get -f install&apos; with no packages (or specify a solution).</code></pre><p>根据提示，执行 apt-get -f install<br>中途提示：Do you want to continue? [Y/n]  输入 Y </p><pre><code class="bash">alex@ubuntu:~/work$ sudo apt-get -f installReading package lists... DoneBuilding dependency tree       Reading state information... DoneCorrecting dependencies... DoneThe following additional packages will be installed:  erlang-asn1 erlang-base erlang-corba erlang-crypto erlang-diameter  erlang-edoc erlang-eldap erlang-erl-docgen erlang-eunit erlang-ic  erlang-inets erlang-mnesia erlang-nox erlang-odbc erlang-os-mon  erlang-parsetools erlang-percept erlang-public-key erlang-runtime-tools  erlang-snmp erlang-ssh erlang-ssl erlang-syntax-tools erlang-tools  erlang-webtool erlang-xmerl libodbc1 libsctp1 socatSuggested packages:  erlang erlang-manpages erlang-doc xsltproc fop erlang-ic-java  erlang-observer libmyodbc odbc-postgresql tdsodbc unixodbc-bin lksctp-toolsThe following NEW packages will be installed:  erlang-asn1 erlang-base erlang-corba erlang-crypto erlang-diameter  erlang-edoc erlang-eldap erlang-erl-docgen erlang-eunit erlang-ic  erlang-inets erlang-mnesia erlang-nox erlang-odbc erlang-os-mon  erlang-parsetools erlang-percept erlang-public-key erlang-runtime-tools  erlang-snmp erlang-ssh erlang-ssl erlang-syntax-tools erlang-tools  erlang-webtool erlang-xmerl libodbc1 libsctp1 socat0 upgraded, 29 newly installed, 0 to remove and 326 not upgraded.1 not fully installed or removed.Need to get 19.6 MB of archives.After this operation, 36.9 MB of additional disk space will be used.Do you want to <span class="built_in">continue</span>? [Y/n] Y....Adding system user `rabbitmq<span class="string">' (UID 124) ...</span><span class="string">Adding new user `rabbitmq'</span> (UID 124) with group `rabbitmq<span class="string">' ...</span><span class="string">Not creating home directory `/var/lib/rabbitmq'</span>.Setting up libsctp1:amd64 (1.0.16+dfsg-3) ...Processing triggers <span class="keyword">for</span> libc-bin (2.23-0ubuntu9) ...Processing triggers <span class="keyword">for</span> systemd (229-4ubuntu10) ...Processing triggers <span class="keyword">for</span> ureadahead (0.100.0-19) ...</code></pre><p>再次输入：sudo dpkg -i rabbitmq-server_3.6.10-1_all.deb </p><pre><code class="bash">alex@ubuntu:~/work$ sudo dpkg -i rabbitmq-server_3.6.10-1_all.deb (Reading database ... 210659 files and directories currently installed.)Preparing to unpack rabbitmq-server_3.6.10-1_all.deb ...Unpacking rabbitmq-server (3.6.10-1) over (3.6.10-1) ...Setting up rabbitmq-server (3.6.10-1) ...Processing triggers <span class="keyword">for</span> man-db (2.7.5-1) ...Processing triggers <span class="keyword">for</span> systemd (229-4ubuntu10) ...Processing triggers <span class="keyword">for</span> ureadahead (0.100.0-19) ...</code></pre><p>显然如上结果，表示 rabbitmq-server 安装完成，启动rabbitmq-server 服务</p><pre><code class="bash">// 启动 rabbitmq-serveralex@ubuntu:~/work$ sudo service rabbitmq-server start// 停止 rabbitmq-serveralex@ubuntu:~/work$ sudo service rabbitmq-server stop// 重启 rabbitmq-serveralex@ubuntu:~/work$ sudo service rabbitmq-server restart</code></pre><ol start="4"><li>若通过终端安装程序sudo apt-get install xxx时出错：<pre><code class="bash">sudo apt-get install erlang-noxE: Could not get lock /var/lib/dpkg/lock - open (11: Resource temporarily unavailable)E: Unable to lock the administration directory (/var/lib/dpkg/), is another process using it </code></pre>通过如下强制解锁,命令<pre><code class="bash">$ sudo rm /var/lib/dpkg/lock</code></pre>再次输入安装命令，可能会会提示 “E: dpkg 被中断，您必须手工运行 sudo dpkg –configure -a 解决此问题”<br>按照提示执行：sudo dpkg –configure -a  </li></ol><h2 id="RabbitMQ-管理插件-management-plugin"><a href="#RabbitMQ-管理插件-management-plugin" class="headerlink" title="RabbitMQ 管理插件 management plugin"></a>RabbitMQ 管理插件 management plugin</h2><p>RabbitMQ 默认已经集成了management plugin，通过命令enable即可</p><pre><code class="bash">$ <span class="built_in">cd</span> /usr/lib/rabbitmq/bin/$ sudo rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_managementThe following plugins have been enabled:  amqp_client  cowlib  cowboy  rabbitmq_web_dispatch  rabbitmq_management_agent  rabbitmq_managementApplying plugin configuration to rabbit@ubuntu... started 6 plugins......</code></pre><p>当显示如上信息，打开浏览器访问：<a href="http://localhost:15672" target="_blank" rel="noopener">http://localhost:15672</a><br>输入默认用户名/密码：guest/guest 登陆Web管理页：<br><img src="http://static.nsoft.vip/18-11-28/79670555.jpg" alt="RabbitMQ_Web.png"></p><p>guest用户只能从localhost地址登录，如果要配置远程登录，必须创建用户</p><ol><li>通过Web管理页面添加用户并设置权限，点击用户进入授权页面，默认直接点击”set permission”即可</li><li>通过命令添加用户,并分配权限：<pre><code>$ sudo rabbitmqctl add_user admin adminCreating user &quot;admin&quot;$ sudo rabbitmqctl set_user_tags admin administratorSetting tags for user &quot;admin&quot; to [administrator]$ sudo rabbitmqctl set_permissions -p / admin &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;Setting permissions for user &quot;admin&quot; in vhost &quot;/&quot;</code></pre>设置完成后，RabbitMQ就可以远程通过 <a href="http://rabbitmq_ip:15672" target="_blank" rel="noopener">http://rabbitmq_ip:15672</a> 访问了。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;RabbitMQ-安装配置&quot;&gt;&lt;a href=&quot;#RabbitMQ-安装配置&quot; class=&quot;headerlink&quot; title=&quot;RabbitMQ 安装配置&quot;&gt;&lt;/a&gt;RabbitMQ 安装配置&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://static.nsoft.vip/18-11-28/82919675.jpg&quot; alt=&quot;RabbitMQ_.png&quot;&gt;&lt;br&gt;RabbitMQ 已经经历了10 来个春夏秋冬，全球超过35000生产部署RabbitMQ，RabbitMQ是最受欢迎的开源消息队列，&lt;br&gt;正如官网的介绍：&lt;/p&gt;
&lt;p&gt;RabbitMQ is the most widely deployed open source message broker&lt;/p&gt;
&lt;p&gt;With more than 35,000 production deployments of RabbitMQ world-wide at small startups and large enterprises, RabbitMQ is the most popular open source message broker.&lt;br&gt;
    
    </summary>
    
      <category term="高性能架构" scheme="http://yao.com/categories/%E9%AB%98%E6%80%A7%E8%83%BD%E6%9E%B6%E6%9E%84/"/>
    
      <category term="rabbitmq" scheme="http://yao.com/categories/%E9%AB%98%E6%80%A7%E8%83%BD%E6%9E%B6%E6%9E%84/rabbitmq/"/>
    
    
  </entry>
  
  <entry>
    <title>Error: Module version mismatch. Expected 48, got 46.</title>
    <link href="http://yao.com/2017/06/05/170605-Error-Module-version-mismatch-Expected-48-got-46/"/>
    <id>http://yao.com/2017/06/05/170605-Error-Module-version-mismatch-Expected-48-got-46/</id>
    <published>2017-06-05T06:25:53.000Z</published>
    <updated>2018-11-28T07:17:09.457Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> 是一个简单地、轻量地、基于Node的一个静态博客框架。 <a href="http://jaredforsyth.com/hexo-admin/" target="_blank" rel="noopener">Hexo Admin Plugin</a> 是可以为Hexo提供后台管理的插件，今天安装了一下hexo-admin的修改版：<a href="https://xbotao.github.io/hexo-admin-qiniu/" target="_blank" rel="noopener">hexo-admin-qiniu</a><br>进入之前安装的blog目录</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save hexo-admin-qiniu</span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line">$ hexo server -d</span><br><span class="line">Error: Module version mismatch. Expected 48, got 46.</span><br><span class="line">    at Error (native)</span><br><span class="line">    at Object.Module._extensions..node (module.js:597:18)</span><br><span class="line">    at Module.load (module.js:487:32)</span><br><span class="line">    at tryModuleLoad (module.js:446:12)</span><br><span class="line">    at Function.Module._load (module.js:438:3)</span><br><span class="line">    at Module.require (module.js:497:17)</span><br><span class="line">    at require (internal/module.js:20:19)</span><br><span class="line">    at Object.&lt;anonymous&gt; (/usr/<span class="built_in">local</span>/lib/node_modules/hexo-cli/node_modules/hexo-log/node_modules/bunyan/node_modules/dtrace-provider/dtrace-provider.js:17:23)</span><br><span class="line">    at Module._compile (module.js:570:32)</span><br><span class="line">    at Object.Module._extensions..js (module.js:579:10)</span><br><span class="line">    at Module.load (module.js:487:32)</span><br><span class="line">    at tryModuleLoad (module.js:446:12)</span><br><span class="line">    at Function.Module._load (module.js:438:3)</span><br><span class="line">    at Module.require (module.js:497:17)</span><br><span class="line">    at require (internal/module.js:20:19)</span><br><span class="line">    at Object.&lt;anonymous&gt; (/usr/<span class="built_in">local</span>/lib/node_modules/hexo-cli/node_modules/hexo-log/node_modules/bunyan/lib/bunyan.js:79:18)</span><br></pre></td></tr></table></figure><p>错误提示模块的版本不匹配，可能是因为hexo版本 与很多模块更新不匹配了,尝试删除所有模块，重新安装无果</p><pre><code class="bash">$ rm -rf node_modules$ npm install</code></pre><p>所以我们重新安装配置下Hexo,解决方法：执行以下代码：</p><pre><code class="bash">$ npm install hexo --no-optional$ npm install hexo-cli -gnpm WARN checkPermissions Missing write access to /usr/<span class="built_in">local</span>/lib/node_modules/hexo-cli/node_modules/bluebirdnpm WARN checkPermissions Missing write access to /usr/<span class="built_in">local</span>/lib/node_modules/hexo-cli/node_modules/chalk/node_modules/has-ansi/node_modules/ansi-regexnpm WARN checkPermissions Missing write access to /usr/<span class="built_in">local</span>/lib/node_modules/hexo-cli/node_modules/chalk/node_modules/strip-ansi/node_modules/ansi-regexnpm WARN checkPermissions Missing write access to /usr/<span class="built_in">local</span>/lib/node_modules/hexo-cli/node_modules/hexo-fs/node_modules/chokidar/node_modules/anymatch/node_modules/micromatch/node_modules/arr-diff/node_modules/arr-flatten....npm ERR! Darwin 16.6.0npm ERR! argv <span class="string">"/usr/local/bin/node"</span> <span class="string">"/usr/local/bin/npm"</span> <span class="string">"install"</span> <span class="string">"hexo-cli"</span> <span class="string">"-g"</span>npm ERR! node v6.10.1npm ERR! npm  v3.10.10npm ERR! path /usr/<span class="built_in">local</span>/lib/node_modules/hexo-cli/node_modules/bluebirdnpm ERR! code EACCESnpm ERR! errno -13npm ERR! syscall accessnpm ERR! Error: EACCES: permission denied, access <span class="string">'/usr/local/lib/node_modules/hexo-cli/node_modules/bluebird'</span>npm ERR!     at Error (native)npm ERR!  { Error: EACCES: permission denied, access <span class="string">'/usr/local/lib/node_modules/hexo-cli/node_modules/bluebird'</span>npm ERR!     at Error (native)npm ERR!   errno: -13,npm ERR!   code: <span class="string">'EACCES'</span>,npm ERR!   syscall: <span class="string">'access'</span>,npm ERR!   path: <span class="string">'/usr/local/lib/node_modules/hexo-cli/node_modules/bluebird'</span> }npm ERR! npm ERR! Please try running this <span class="built_in">command</span> again as root/Administrator.npm ERR! Please include the following file with any support request:npm ERR!     /Users/alex/Projects/blog/npm-debug.log</code></pre><p>分析错误由于权限问题，重新执行</p><pre><code class="bash">$ sudo npm install --unsafe-perm --verbose -g hexoPassword:....</code></pre><p>安装完成，执行启动hexo</p><pre><code class="bash">$ hexo server -dINFO  Start processingINFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</code></pre><p>启动正常，浏览器访问：<a href="http://localhost:4000/admin" target="_blank" rel="noopener">http://localhost:4000/admin</a>  现在可以愉快的写博客了<br><img src="http://static.nsoft.vip/18-11-28/61834621.jpg" alt="image.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt; 是一个简单地、轻量地、基于Node的一个静态博客框架。 &lt;a href=&quot;http://jaredforsyth.com/hexo-admin/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo Admin Plugin&lt;/a&gt; 是可以为Hexo提供后台管理的插件，今天安装了一下hexo-admin的修改版：&lt;a href=&quot;https://xbotao.github.io/hexo-admin-qiniu/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hexo-admin-qiniu&lt;/a&gt;&lt;br&gt;进入之前安装的blog目录&lt;/p&gt;
    
    </summary>
    
      <category term="其他" scheme="http://yao.com/categories/%E5%85%B6%E4%BB%96/"/>
    
      <category term="博客" scheme="http://yao.com/categories/%E5%85%B6%E4%BB%96/%E5%8D%9A%E5%AE%A2/"/>
    
    
  </entry>
  
  <entry>
    <title>Mac之Git账号的坑</title>
    <link href="http://yao.com/2017/06/04/170604-Mac%E4%B9%8BGit%E8%B4%A6%E5%8F%B7%E7%9A%84%E5%9D%91/"/>
    <id>http://yao.com/2017/06/04/170604-Mac之Git账号的坑/</id>
    <published>2017-06-04T06:24:27.000Z</published>
    <updated>2018-11-28T07:00:11.989Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Permission-to-xxx-xxxxx-git-denied-to-username"><a href="#Permission-to-xxx-xxxxx-git-denied-to-username" class="headerlink" title="Permission to xxx/xxxxx.git denied to username."></a>Permission to xxx/xxxxx.git denied to username.</h2><p>之前使用mac终端中的git时，输入了用户名和密码，现在换了新的用户名密码后，clone下来的代码，修改后push 却提示 remote: Permission to marspie/marspie-demo.git denied to yaonew.<br>fatal: unable to access ‘<a href="https://github.com/marspie/marspie-demo.git/&#39;" target="_blank" rel="noopener">https://github.com/marspie/marspie-demo.git/&#39;</a>: The requested URL returned error: 403<br> 其中yaonew是我第一次使用的用户名，现在已经使用了新的用户了。尝试重新 ssh-keygen 生成密钥，github添加新的密钥，无果。</p><a id="more"></a><p>经过网络搜索，有提出同样问题的，但是回复寥寥无几且没有能真正解决问题的，于是变化思路查找：Mac多Git账号配置，找到了一个帖子：<a href="http://suqianghotel.com/2016/09/13/mac-mulit-git-account-config/" target="_blank" rel="noopener">http://suqianghotel.com/2016/09/13/mac-mulit-git-account-config/</a> 在文章的末尾找到了GitHub 官网的帮助文档：<br><a href="https://help.github.com/articles/updating-credentials-from-the-osx-keychain/" target="_blank" rel="noopener">GitHub help</a></p><h2 id="Updating-credentials-from-the-OSX-Keychain"><a href="#Updating-credentials-from-the-OSX-Keychain" class="headerlink" title="Updating credentials from the OSX Keychain"></a>Updating credentials from the OSX Keychain</h2><p>You’ll need to update your saved username and password in the git-credential-osxkeychain helper if you change your password or username on GitHub.</p><h2 id="Updating-your-credentials-via-Keychain-Access"><a href="#Updating-your-credentials-via-Keychain-Access" class="headerlink" title="Updating your credentials via Keychain Access"></a>Updating your credentials via Keychain Access</h2><ol><li>In Finder, search for the Keychain Access app. </li><li>In Keychain Access, search for github.com.</li><li>Find the “internet password” entry for github.com. </li><li>Edit or delete the entry accordingly.</li></ol><h2 id="Deleting-your-credentials-via-the-command-line"><a href="#Deleting-your-credentials-via-the-command-line" class="headerlink" title="Deleting your credentials via the command line"></a>Deleting your credentials via the command line</h2><p>Through the command line, you can use the credential helper directly to erase the keychain entry.</p><p>To do this, type the following command:</p><pre><code class="bash">$ git credential-osxkeychain erasehost=github.comprotocol=https[Press Return]</code></pre><p>If it’s successful, nothing will print out. To test that it works, try and clone a repository from GitHub. If you are prompted for a password, the keychain entry was deleted.</p><h2 id="重新-git-push"><a href="#重新-git-push" class="headerlink" title="重新 git push"></a>重新 git push</h2><pre><code class="bash">$ git push origin masterUsername <span class="keyword">for</span> <span class="string">'https://github.com'</span>: marspiePassword <span class="keyword">for</span> <span class="string">'https://marspie@github.com'</span>: Counting objects: 8, <span class="keyword">done</span>.Delta compression using up to 8 threads.Compressing objects: 100% (8/8), <span class="keyword">done</span>.Writing objects: 100% (8/8), 628 bytes | 0 bytes/s, <span class="keyword">done</span>.Total 8 (delta 5), reused 0 (delta 0)remote: Resolving deltas: 100% (5/5), completed with 5 <span class="built_in">local</span> objects.To https://github.com/marspie/marspie-demo.git   32fe0cd..0a71a8a  master -&gt; master</code></pre><p>OK 搞定， tag!</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Permission-to-xxx-xxxxx-git-denied-to-username&quot;&gt;&lt;a href=&quot;#Permission-to-xxx-xxxxx-git-denied-to-username&quot; class=&quot;headerlink&quot; title=&quot;Permission to xxx/xxxxx.git denied to username.&quot;&gt;&lt;/a&gt;Permission to xxx/xxxxx.git denied to username.&lt;/h2&gt;&lt;p&gt;之前使用mac终端中的git时，输入了用户名和密码，现在换了新的用户名密码后，clone下来的代码，修改后push 却提示 remote: Permission to marspie/marspie-demo.git denied to yaonew.&lt;br&gt;fatal: unable to access ‘&lt;a href=&quot;https://github.com/marspie/marspie-demo.git/&amp;#39;&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/marspie/marspie-demo.git/&amp;#39;&lt;/a&gt;: The requested URL returned error: 403&lt;br&gt; 其中yaonew是我第一次使用的用户名，现在已经使用了新的用户了。尝试重新 ssh-keygen 生成密钥，github添加新的密钥，无果。&lt;/p&gt;
    
    </summary>
    
      <category term="协作" scheme="http://yao.com/categories/%E5%8D%8F%E4%BD%9C/"/>
    
      <category term="git" scheme="http://yao.com/categories/%E5%8D%8F%E4%BD%9C/git/"/>
    
    
  </entry>
  
  <entry>
    <title>Docker之旅-Docker入门</title>
    <link href="http://yao.com/2017/04/09/170409-Docker%E4%B9%8B%E6%97%85-Docker%E5%85%A5%E9%97%A8/"/>
    <id>http://yao.com/2017/04/09/170409-Docker之旅-Docker入门/</id>
    <published>2017-04-09T06:23:18.000Z</published>
    <updated>2018-11-28T06:44:31.223Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker组件-C-S架构"><a href="#Docker组件-C-S架构" class="headerlink" title="Docker组件 (C/S架构)"></a>Docker组件 (C/S架构)</h2><ol><li>docker client ：Docker客户端</li><li>docker server ：Docker daemon 主要组成部分 接收client 请求 并按照路由规则实现路由分发</li><li>docker image  : docker 镜像运行之后变成容器（docker run）</li><li>docker registry: registry是docker镜像的中央存储仓库（pull /push）</li></ol><a id="more"></a><h2 id="Docker镜像构建"><a href="#Docker镜像构建" class="headerlink" title="Docker镜像构建"></a>Docker镜像构建</h2><p>docker build -t registry_url/namespace/marspie/centos:7.1[latest] .[.代表Dockerfile在当前路径下]</p><h2 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h2><p>Usage: docker run [OPTIONS] IMAGE [COMMAND] [ARG…]<br>docker run  -it (交互模式)  —name base marspie/centos:7.1<br>            -d 后端运行<br>            -p host_point：container_point<br>            -P 随机分配端口映射<br>            -v host_dir:container_dir 容器目录与宿主机目录映射</p><h2 id="查看所有container"><a href="#查看所有container" class="headerlink" title="查看所有container"></a>查看所有container</h2><p>docker ps （只能查看UP状态的container）<br>docker ps -a</p><h2 id="进入docker容器"><a href="#进入docker容器" class="headerlink" title="进入docker容器"></a>进入docker容器</h2><p>只有UP状态的docker容器可以进入访问<br>docker exec -it website(container_id/container_name) /bin/bash<br>退出<br>exit</p><h2 id="删除docker容器"><a href="#删除docker容器" class="headerlink" title="删除docker容器"></a>删除docker容器</h2><p>docker rm  -f(强制删除)  名字/id</p><h2 id="停止docker容器"><a href="#停止docker容器" class="headerlink" title="停止docker容器"></a>停止docker容器</h2><p>docker stop （container_id/container_name）</p><h2 id="查看所有镜像"><a href="#查看所有镜像" class="headerlink" title="查看所有镜像"></a>查看所有镜像</h2><p>docker images</p><h2 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h2><p>docker rmi (image_id/image_name)</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Docker组件-C-S架构&quot;&gt;&lt;a href=&quot;#Docker组件-C-S架构&quot; class=&quot;headerlink&quot; title=&quot;Docker组件 (C/S架构)&quot;&gt;&lt;/a&gt;Docker组件 (C/S架构)&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;docker client ：Docker客户端&lt;/li&gt;
&lt;li&gt;docker server ：Docker daemon 主要组成部分 接收client 请求 并按照路由规则实现路由分发&lt;/li&gt;
&lt;li&gt;docker image  : docker 镜像运行之后变成容器（docker run）&lt;/li&gt;
&lt;li&gt;docker registry: registry是docker镜像的中央存储仓库（pull /push）&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="微服务" scheme="http://yao.com/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="docker" scheme="http://yao.com/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/docker/"/>
    
    
  </entry>
  
  <entry>
    <title>Thinking change 2017</title>
    <link href="http://yao.com/2017/03/27/170327-Thinking-change-2017/"/>
    <id>http://yao.com/2017/03/27/170327-Thinking-change-2017/</id>
    <published>2017-03-27T06:21:07.000Z</published>
    <updated>2018-11-28T07:16:04.548Z</updated>
    
    <content type="html"><![CDATA[<p>2017年已过三个月，作为程序猿、码农的IT群中的一员，是该抽空思考下…</p><a id="more"></a><h2 id="一"><a href="#一" class="headerlink" title="一"></a>一</h2><p>平时有空喜欢逛下头条，这张职业规范图中是否有一天发展路线适合我，值得思考，虽然现在还处于E象限，I象限是我的终极目标了，呵呵！<br><img src="http://static.nsoft.vip/18-11-28/48083627.jpg" alt="11f70003e11ce6ff2752.jpg"></p><h2 id="二"><a href="#二" class="headerlink" title="二"></a>二</h2><p>读书，显然读书能增加个人的知识面，当然不能只局限于工作相关的书籍，其他领域也要多涉及，正如一位牛人所说，如何让别人觉得你牛逼呢，跟JAVA的开发聊PHP，跟PHP的开发聊JAVA, 跟python的开发人员聊c++，那如果聊天的对象都懂点呢？ 那就跟他聊历史O(∩_∩)O哈哈~，所以要让自己在别人眼中牛逼，各方面知识都要有所涉及。<br>当然现在这种知识飞速发展的时代，真正能静下心来看书主动学习的人并不是很多，我们可以借用别人的大脑学习，各种听书的APP，总归听比看方便多少，以及别人的一些领会，可以都我们的学习有一点启发。<br>2017时刻提醒自己多读些书。</p><h2 id="三"><a href="#三" class="headerlink" title="三"></a>三</h2><p>运动，有个好的身体才能更好的学习，生活，工作，每个星期至少运动个两到三次吧，打打球、跑跑步、爬爬山都可以，该行动了，为了改变，以前太懒，现在为了更好的自己，我需要这么做。</p><h2 id="四"><a href="#四" class="headerlink" title="四"></a>四</h2><p>创作，拓展自己的思维，发布一些作品，比如一个开源项目，创作一本漫画，或者作为自媒体多写些文章，创作来源于生活，是的我应该好好生活，提高自己从现在开始。</p><h2 id="五"><a href="#五" class="headerlink" title="五"></a>五</h2><p>程序猿的世界往往比较简单，不是在coding,就是在去coding的路上，丰富自己的生活，尝试一些跨界的事物，增加一些兴趣爱好，学学书法，让自已这颗浮躁的心安静下来。</p><p>2017 为了更好的自己thinking change.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2017年已过三个月，作为程序猿、码农的IT群中的一员，是该抽空思考下…&lt;/p&gt;
    
    </summary>
    
      <category term="其他" scheme="http://yao.com/categories/%E5%85%B6%E4%BB%96/"/>
    
      <category term="随笔" scheme="http://yao.com/categories/%E5%85%B6%E4%BB%96/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>文档书写工具-gitbook介绍</title>
    <link href="http://yao.com/2017/03/25/170325-%E6%96%87%E6%A1%A3%E4%B9%A6%E5%86%99%E5%B7%A5%E5%85%B7-gitbook%E4%BB%8B%E7%BB%8D/"/>
    <id>http://yao.com/2017/03/25/170325-文档书写工具-gitbook介绍/</id>
    <published>2017-03-25T06:19:16.000Z</published>
    <updated>2018-11-28T07:15:09.811Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是gitbook"><a href="#什么是gitbook" class="headerlink" title="什么是gitbook"></a>什么是gitbook</h2><p>gitbook 是基于Node.js的命令行工具，可以使用github、git Markdown 书写电子书，可以作为自己知识的积累，书写API文档，将平时学习生活中的文字记录，出版电子书等等。</p><a id="more"></a><h2 id="gitbook安装"><a href="#gitbook安装" class="headerlink" title="gitbook安装"></a>gitbook安装</h2><p>gitbook基于Node.js所以第一步安装Node.js的支持，访问<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Nodejs官网</a>下载对应版本安装</p><h3 id="验证安装"><a href="#验证安装" class="headerlink" title="验证安装"></a>验证安装</h3><p>打开命令行终端</p><pre><code class="bash">$ node -vv6.10.1</code></pre><p>若能打印出Nodejs版本，表示安装成功</p><h3 id="gitbook命令行安装"><a href="#gitbook命令行安装" class="headerlink" title="gitbook命令行安装"></a>gitbook命令行安装</h3><pre><code class="bash">$ npm install -g gitbook-cli</code></pre><p>安装完成接着输入 gitbook -V 查看版本</p><pre><code class="bash">$ gitbook -VCLI version: 2.3.0</code></pre><h3 id="gitbook-常用命令"><a href="#gitbook-常用命令" class="headerlink" title="gitbook 常用命令"></a>gitbook 常用命令</h3><pre><code class="bash">//初始化图书$ gitbook init//生成html，生成路径图书文件目录下_book文件夹$ gitbook build//网页浏览器查看图书$ gitbook serve//linux下可生成pdf文件，需安装pdf依赖$ npm install gitbook-pdf -g$ gitbook pdf</code></pre><h2 id="gitbook客户端-GitBook-Editor"><a href="#gitbook客户端-GitBook-Editor" class="headerlink" title="gitbook客户端 GitBook Editor"></a>gitbook客户端 GitBook Editor</h2><p>有了gitbook客户端可以方便的管理书写我们的电子书，官方下载<a href="https://www.gitbook.com/editor" target="_blank" rel="noopener">GitBook Editor</a> 总得使用下来感受还可以，初始化打开启动稍慢，gitbook文档与GitHub可以实现同步，简单一个按钮 publish&amp;Sync 可以将文档保存至gitbook以及同步至GitHub，perfect。<br><img src="http://static.nsoft.vip/18-11-28/69961518.jpg" alt="火狐截图_2017-03-25T02-49-36.625Z.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是gitbook&quot;&gt;&lt;a href=&quot;#什么是gitbook&quot; class=&quot;headerlink&quot; title=&quot;什么是gitbook&quot;&gt;&lt;/a&gt;什么是gitbook&lt;/h2&gt;&lt;p&gt;gitbook 是基于Node.js的命令行工具，可以使用github、git Markdown 书写电子书，可以作为自己知识的积累，书写API文档，将平时学习生活中的文字记录，出版电子书等等。&lt;/p&gt;
    
    </summary>
    
      <category term="其他" scheme="http://yao.com/categories/%E5%85%B6%E4%BB%96/"/>
    
      <category term="工具" scheme="http://yao.com/categories/%E5%85%B6%E4%BB%96/%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
  <entry>
    <title>170324-Docker之旅-CentOS7中安装Docker</title>
    <link href="http://yao.com/2017/03/24/170324-Docker%E4%B9%8B%E6%97%85-CentOS7%E4%B8%AD%E5%AE%89%E8%A3%85Docker/"/>
    <id>http://yao.com/2017/03/24/170324-Docker之旅-CentOS7中安装Docker/</id>
    <published>2017-03-24T11:17:20.000Z</published>
    <updated>2018-11-28T06:43:21.497Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CentOS7中安装Docker服务支持"><a href="#CentOS7中安装Docker服务支持" class="headerlink" title="CentOS7中安装Docker服务支持"></a>CentOS7中安装Docker服务支持</h2><a id="more"></a><h2 id="yum-update"><a href="#yum-update" class="headerlink" title="yum update"></a>yum update</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum update</span><br></pre></td></tr></table></figure><h2 id="Get-Docker-CE-on-CentOS"><a href="#Get-Docker-CE-on-CentOS" class="headerlink" title="Get Docker CE on CentOS"></a>Get Docker CE on CentOS</h2><p>You can install Docker CE on CentOS in just three steps.<br>Enterprise customers can also install Docker EE for CentOS.<br>Prerequisites</p><p>Docker CE is supported on CentOS 7.3 64-bit.</p><h3 id="1-Set-up-the-repository"><a href="#1-Set-up-the-repository" class="headerlink" title="1. Set up the repository"></a>1. Set up the repository</h3><p>Set up the Docker CE repository on CentOS:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install -y yum-utils</span><br><span class="line"></span><br><span class="line">$ sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line">$ sudo yum makecache fast</span><br></pre></td></tr></table></figure><h3 id="2-Get-Docker-CE"><a href="#2-Get-Docker-CE" class="headerlink" title="2. Get Docker CE"></a>2. Get Docker CE</h3><p>Install the latest version of Docker CE on CentOS:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum -y install docker-ce</span><br></pre></td></tr></table></figure></p><p>Start Docker:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl start docker</span><br></pre></td></tr></table></figure></p><h3 id="3-Test-your-Docker-CE-installation"><a href="#3-Test-your-Docker-CE-installation" class="headerlink" title="3. Test your Docker CE installation"></a>3. Test your Docker CE installation</h3><p>Test your installation:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run hello-world</span><br></pre></td></tr></table></figure></p><p>设置为开机自启<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo chkconfig docker on</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CentOS7中安装Docker服务支持&quot;&gt;&lt;a href=&quot;#CentOS7中安装Docker服务支持&quot; class=&quot;headerlink&quot; title=&quot;CentOS7中安装Docker服务支持&quot;&gt;&lt;/a&gt;CentOS7中安装Docker服务支持&lt;/h2&gt;
    
    </summary>
    
      <category term="微服务" scheme="http://yao.com/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="docker" scheme="http://yao.com/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/docker/"/>
    
    
  </entry>
  
  <entry>
    <title>Docker之旅-介绍</title>
    <link href="http://yao.com/2017/03/24/170324-Docker%E4%B9%8B%E6%97%85-%E4%BB%8B%E7%BB%8D/"/>
    <id>http://yao.com/2017/03/24/170324-Docker之旅-介绍/</id>
    <published>2017-03-24T06:15:24.000Z</published>
    <updated>2018-11-28T07:14:11.057Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker是什么"><a href="#Docker是什么" class="headerlink" title="Docker是什么"></a>Docker是什么</h2><p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口,自2013年发行以来此项虚拟化容器技术得到了广泛发展。</p><a id="more"></a><p>从2016年Docker明确了将会在企业级方面重点跟进，2017年3月之后Docker分为两个版本Docker Community Edition(docker-ce)、Docker Enterprise Edition(docker-ee)</p><h3 id="CE与EE区别"><a href="#CE与EE区别" class="headerlink" title="CE与EE区别"></a>CE与EE区别</h3><p><img src="http://static.nsoft.vip/18-11-28/36914909.jpg" alt="火狐截图_2017-03-24T08-02-51.399Z.png"></p><h3 id="收费方式"><a href="#收费方式" class="headerlink" title="收费方式"></a>收费方式</h3><p><img src="http://static.nsoft.vip/18-11-28/93190151.jpg" alt="火狐截图_2017-03-24T07-59-46.425Z.png"></p><h3 id="土豪伙伴"><a href="#土豪伙伴" class="headerlink" title="土豪伙伴"></a>土豪伙伴</h3><p>土豪小伙伴早已跟上<br><img src="http://static.nsoft.vip/18-11-28/20531175.jpg" alt="火狐截图_2017-03-24T08-21-13.392Z.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Docker是什么&quot;&gt;&lt;a href=&quot;#Docker是什么&quot; class=&quot;headerlink&quot; title=&quot;Docker是什么&quot;&gt;&lt;/a&gt;Docker是什么&lt;/h2&gt;&lt;p&gt;Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口,自2013年发行以来此项虚拟化容器技术得到了广泛发展。&lt;/p&gt;
    
    </summary>
    
      <category term="微服务" scheme="http://yao.com/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="docker" scheme="http://yao.com/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/docker/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux 介绍</title>
    <link href="http://yao.com/2017/03/18/170318-Linux-%E4%BB%8B%E7%BB%8D/"/>
    <id>http://yao.com/2017/03/18/170318-Linux-介绍/</id>
    <published>2017-03-18T14:08:09.000Z</published>
    <updated>2018-11-28T06:42:24.176Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://static.nsoft.vip/17-3-18-49739535.png" alt=""><br>Linux是一套免费使用和自由传播的<a href="https://baike.baidu.com/item/%E7%B1%BBUnix" target="_blank" rel="noopener">类Unix</a><a href="https://baike.baidu.com/item/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/192" target="_blank" rel="noopener">操作系统</a>，是一个基于<a href="https://baike.baidu.com/item/POSIX" target="_blank" rel="noopener">POSIX</a>和<a href="https://baike.baidu.com/item/UNIX" target="_blank" rel="noopener">UNIX</a>的多用户、多任务、支持多线程和多CPU的操作系统。它能运行主要的UNIX工具软件、应用程序和网络协议。它支持[32位]和[64位]硬件。Linux继承了[Unix]以[网络]为核心的设计思想，是一个性能稳定的多用户网络操作系统</p><a id="more"></a><h2 id="Linux介绍"><a href="#Linux介绍" class="headerlink" title="Linux介绍"></a>Linux介绍</h2><p>Linux核心理念：万物皆目录<br>文件Linux: 是一个内核，而不是一个操作系统；因此我们平时常说的“操作系统是 Windows\Mac还是Linux?<br>作者芬兰研究生 LINUS<br>Unix Like : 很像Unix的操作系统</p><h3 id="Linux学习方法"><a href="#Linux学习方法" class="headerlink" title="Linux学习方法"></a>Linux学习方法</h3><ul><li>做笔记</li><li>多实验</li><li>理解记忆</li></ul><h3 id="Linux优点"><a href="#Linux优点" class="headerlink" title="Linux优点"></a>Linux优点</h3><ul><li>开放的学习环境</li><li>漏洞快速修补</li><li>内核只有几百K，适合嵌入式</li></ul><h3 id="Linux缺点"><a href="#Linux缺点" class="headerlink" title="Linux缺点"></a>Linux缺点</h3><ul><li>有些专业软件没有Linux版本</li></ul><h3 id="Linux-分支"><a href="#Linux-分支" class="headerlink" title="Linux 分支"></a>Linux 分支</h3><ul><li>Redhat</li><li>centos 2014 被红帽收购 XFS文件系统</li><li>Fedora 红帽公司的桌面版</li><li>中国红旗</li></ul><h3 id="RHCE-redhat"><a href="#RHCE-redhat" class="headerlink" title="RHCE redhat"></a>RHCE redhat</h3><p>考题全英文<br><img src="http://static.nsoft.vip/17-3-18-16778539.png" alt=""></p><h3 id="从事工作"><a href="#从事工作" class="headerlink" title="从事工作"></a>从事工作</h3><p>1、linux运维<br>2、运维开发<br>3、mysqlDBA<br>4、安全运维<br>5、大数据运维云计算运维<br>6、架构师</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://static.nsoft.vip/17-3-18-49739535.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;Linux是一套免费使用和自由传播的&lt;a href=&quot;https://baike.baidu.com/item/%E7%B1%BBUnix&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;类Unix&lt;/a&gt;&lt;a href=&quot;https://baike.baidu.com/item/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/192&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;操作系统&lt;/a&gt;，是一个基于&lt;a href=&quot;https://baike.baidu.com/item/POSIX&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;POSIX&lt;/a&gt;和&lt;a href=&quot;https://baike.baidu.com/item/UNIX&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;UNIX&lt;/a&gt;的多用户、多任务、支持多线程和多CPU的操作系统。它能运行主要的UNIX工具软件、应用程序和网络协议。它支持[32位]和[64位]硬件。Linux继承了[Unix]以[网络]为核心的设计思想，是一个性能稳定的多用户网络操作系统&lt;/p&gt;
    
    </summary>
    
      <category term="架构师" scheme="http://yao.com/categories/%E6%9E%B6%E6%9E%84%E5%B8%88/"/>
    
      <category term="linux" scheme="http://yao.com/categories/%E6%9E%B6%E6%9E%84%E5%B8%88/linux/"/>
    
    
      <category term="IT" scheme="http://yao.com/tags/IT/"/>
    
      <category term="Linux" scheme="http://yao.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>1024 程序猿们的节日礼物？</title>
    <link href="http://yao.com/2016/10/24/161024-%E7%A8%8B%E5%BA%8F%E7%8C%BF%E4%BB%AC%E7%9A%84%E8%8A%82%E6%97%A5/"/>
    <id>http://yao.com/2016/10/24/161024-程序猿们的节日/</id>
    <published>2016-10-24T12:56:20.000Z</published>
    <updated>2018-11-28T06:59:59.445Z</updated>
    
    <content type="html"><![CDATA[<p>今天1024了，虽然刚从安吉游玩回来，拖着疲惫的身体，但任然想着是不是能为程序猿朋友们谋求些节日礼物，这是怎样一种精神，O(∩_∩)O哈哈~<br>在这里先祝程序员们，节日快乐！<br>什么是程序猿们最想要的节日礼物呢？<br>HTML贺卡？<br>鼠标键盘？<br>耳机？<br>各种智能设备？<br>女朋友？<br>好吧，打开siri 来个妞吧，然而，竟然她也无能为力，<br><img src="http://static.nsoft.vip/16-10-24-75662996.jpg" alt=""><br>呵呵，能够把握机会的程序猿回这么跟自己❤️爱的妹子说： 1024了你该给我个礼物了吧！<br>扯个淡，各位晚安😁！</p>]]></content>
    
    <summary type="html">
    
      10月24日，程序猿们的节日，期望的节日礼物在哪里...
    
    </summary>
    
      <category term="其他" scheme="http://yao.com/categories/%E5%85%B6%E4%BB%96/"/>
    
      <category term="随笔" scheme="http://yao.com/categories/%E5%85%B6%E4%BB%96/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="1024" scheme="http://yao.com/tags/1024/"/>
    
      <category term="节日" scheme="http://yao.com/tags/%E8%8A%82%E6%97%A5/"/>
    
      <category term="程序猿" scheme="http://yao.com/tags/%E7%A8%8B%E5%BA%8F%E7%8C%BF/"/>
    
  </entry>
  
  <entry>
    <title>十一假期随笔</title>
    <link href="http://yao.com/2016/10/04/161004-%E5%8D%81%E4%B8%80%E5%81%87%E6%9C%9F%E9%9A%8F%E7%AC%94/"/>
    <id>http://yao.com/2016/10/04/161004-十一假期随笔/</id>
    <published>2016-10-04T14:16:37.000Z</published>
    <updated>2018-11-28T06:42:34.240Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://static.nsoft.vip/16-10-4-5439538.jpg" alt=""></p><p>开心假期，不谈枯燥的技术，只谈风月 O(∩_∩)O~<br><a id="more"></a><br>国庆长假回到我那亲爱的家乡中国茧都-东台富安。<br>这里盛产桑蚕，这里有特色的鱼汤面。<br>这里有我最思恋的亲人，有我亲梅逐马的“情人”。<br>虽然目“堵”了一路的回家车队壮观，也难没灭回家的热情。<br>此时正当是秋蚕上山结茧的时候，父母们已忙的昏天黑地。<br>作为都是农民的父母，是通过养蚕来供我上学读书，<br>所以对于蚕总是有种特殊的感情！<br>养蚕的辛苦，只有养蚕人才能体会，假期了回家看看，<br>看看鬓发日益霜白的父亲母亲，看看可爱的蚕宝宝！<br>看看即将丰收的稻田，看看久未联络的亲人朋友！</p><p>祝富（gui）安（kang）！<br>                            Alex · 富安</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://static.nsoft.vip/16-10-4-5439538.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;开心假期，不谈枯燥的技术，只谈风月 O(∩_∩)O~&lt;br&gt;
    
    </summary>
    
      <category term="其他" scheme="http://yao.com/categories/%E5%85%B6%E4%BB%96/"/>
    
      <category term="随笔" scheme="http://yao.com/categories/%E5%85%B6%E4%BB%96/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="十一" scheme="http://yao.com/tags/%E5%8D%81%E4%B8%80/"/>
    
      <category term="假期" scheme="http://yao.com/tags/%E5%81%87%E6%9C%9F/"/>
    
      <category term="随笔" scheme="http://yao.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb整合Discuz实现单点登录</title>
    <link href="http://yao.com/2016/09/26/160926-JavaWeb%E6%95%B4%E5%90%88Discuz%E5%AE%9E%E7%8E%B0%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/"/>
    <id>http://yao.com/2016/09/26/160926-JavaWeb整合Discuz实现单点登录/</id>
    <published>2016-09-26T07:40:21.000Z</published>
    <updated>2018-11-28T06:40:11.986Z</updated>
    
    <content type="html"><![CDATA[<p>为了丰富员工业余生活，增多交流机会，于是在公司搭建了论坛方便大家灌水，目前公司中企业级应用是基于JAVAEE的产品，论坛选用了比较受欢迎的Discuz 3.2, 为了避免二次登陆使用单点登陆解决，虽然查找了各种资料做集成，但是其中还是遇到了些问题，翻墙发现了：<br><a href="https://code.google.com/p/discuz-ucenter-api-for-java" target="_blank" rel="noopener">discuz-ucenter-api-for-java</a><br>因为被墙，在国内无法访问code.google.com，已将测试代码做了部分调整上传至GitHub:<br><a href="https://github.com/yaonew/discuz-ucenter_api_for_java" target="_blank" rel="noopener">https://github.com/yaonew/discuz-ucenter_api_for_java</a></p><h2 id="第一步配置config-properties"><a href="#第一步配置config-properties" class="headerlink" title="第一步配置config.properties"></a>第一步配置config.properties</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">UC_API = http://你的discuz地址/uc_server  如http://localhost/bbs/uc_server</span><br><span class="line">UC_IP = 正常情况下留空即可</span><br><span class="line">UC_KEY = N3M117R45aWfqfe4xcu0OfTcAT3r4K6f2KRoUOFYT（与ucenter通信的密钥，这里自己设定，需与discuz ucenter 一致）</span><br><span class="line">UC_APPID = 2    //appID为UCenter中应用管理中的ID，见UCenter设置</span><br><span class="line">UC_CONNECT = 正常情况下留空即可</span><br></pre></td></tr></table></figure><h2 id="第二步-配置web-xml-添加如下"><a href="#第二步-配置web-xml-添加如下" class="headerlink" title="第二步 配置web.xml,添加如下"></a>第二步 配置web.xml,添加如下</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">    &lt;servlet-name&gt;api&lt;/servlet-name&gt;</span><br><span class="line">    &lt;servlet-class&gt;com.fivestars.interfaces.bbs.api.UC&lt;/servlet-class&gt;</span><br><span class="line">    &lt;load-on-startup&gt;2&lt;/load-on-startup&gt;</span><br><span class="line">&lt;/servlet&gt;</span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;api&lt;/servlet-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;/api/uc.php&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure><h2 id="第三步-配置ucenter"><a href="#第三步-配置ucenter" class="headerlink" title="第三步 配置ucenter"></a>第三步 配置ucenter</h2><p>管理员登陆UCenter : <a href="http://localhost/bbs/uc_server" target="_blank" rel="noopener">http://localhost/bbs/uc_server</a><br>应用管理-&gt; 添加应用, 这边添加的应用ID，通信秘钥与第一步的配置保持一致<br><img src="http://static.nsoft.vip/16-9-18-7630535.jpg" alt=""><br><img src="http://static.nsoft.vip/16-9-18-57860485.jpg" alt=""><br>配置完成，看到通信成功的信息，表示ucenter集成配置OK<br><img src="http://static.nsoft.vip/16-9-18-19780976.jpg" alt=""></p><h2 id="第四步-访问测试页"><a href="#第四步-访问测试页" class="headerlink" title="第四步 访问测试页"></a>第四步 访问测试页</h2><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> <span class="keyword">import</span>=<span class="string">"java.util.LinkedList"</span>%&gt;</span><br><span class="line">&lt;%<span class="meta">@page</span> <span class="keyword">import</span>=<span class="string">"com.fivestars.interfaces.bbs.util.XMLHelper"</span>%&gt;</span><br><span class="line">&lt;%<span class="meta">@page</span> <span class="keyword">import</span>=<span class="string">"com.fivestars.interfaces.bbs.client.Client"</span>%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">Client uc = <span class="keyword">new</span> Client();</span><br><span class="line"><span class="comment">//String result1 = uc.uc_user_register("test3", "test3", "test3@huaqi.info");</span></span><br><span class="line"><span class="comment">//out.println("xxx" + result1);</span></span><br><span class="line">String result = uc.uc_user_login(<span class="string">"test3"</span>, <span class="string">"test3"</span>);</span><br><span class="line"></span><br><span class="line">LinkedList&lt;String&gt; rs = XMLHelper.uc_unserialize(result);</span><br><span class="line"><span class="keyword">if</span>(rs.size()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">int</span> $uid = Integer.parseInt(rs.get(<span class="number">0</span>));</span><br><span class="line">    String $username = rs.get(<span class="number">1</span>);</span><br><span class="line">    String $password = rs.get(<span class="number">2</span>);</span><br><span class="line">    String $email = rs.get(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">if</span>($uid &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        response.addHeader(<span class="string">"P3P"</span>,<span class="string">" CP=\"CURa ADMa DEVa PSAo PSDo OUR BUS UNI PUR INT DEM STA PRE COM NAV OTC NOI DSP COR\""</span>);</span><br><span class="line"></span><br><span class="line">        out.println(<span class="string">"登录成功"</span>);</span><br><span class="line">        out.println($username);</span><br><span class="line">        out.println($password);</span><br><span class="line">        out.println($email);</span><br><span class="line"></span><br><span class="line">        String $ucsynlogin = uc.uc_user_synlogin($uid);</span><br><span class="line">        out.println(<span class="string">"登录成功"</span>+$ucsynlogin);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//本地登陆代码</span></span><br><span class="line">        <span class="comment">//TODO ... ....</span></span><br><span class="line">        Cookie auth = <span class="keyword">new</span> Cookie(<span class="string">"auth"</span>, uc.uc_authcode($password+<span class="string">"\t"</span>+$uid, <span class="string">"ENCODE"</span>));</span><br><span class="line">        auth.setMaxAge(<span class="number">31536000</span>);</span><br><span class="line">        <span class="comment">//auth.setDomain("localhost");</span></span><br><span class="line">        response.addCookie(auth);</span><br><span class="line"></span><br><span class="line">        Cookie user = <span class="keyword">new</span> Cookie(<span class="string">"uchome_loginuser"</span>, $username);</span><br><span class="line">        response.addCookie(user);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>($uid == -<span class="number">1</span>) &#123;</span><br><span class="line">        out.println(<span class="string">"用户不存在,或者被删除"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>($uid == -<span class="number">2</span>) &#123;</span><br><span class="line">        out.println(<span class="string">"密码错"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        out.println(<span class="string">"未定义"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    out.println(<span class="string">"Login failed"</span>);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125; </span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>访问页面返回一段js：<br>登录成功<br>test3<br>test3<br><a href="mailto:test3@huaqi.info" target="_blank" rel="noopener">test3@huaqi.info</a><br>登录成功</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"http://localhost/api/uc.php?time=1474188863&amp;amp;code=6dfdhvNXKRoUOFYTR3Jn3ORQ2LKDd6cI6X5p4RD3yxyh6gy3%2F%2FQAJ5u8URp7qR%2F%2F0jaIoha2g4MnGRtosanyDihDy%2BIyW0zNNAnjkGHoaC1uyga5U2py%2F6%2F4uolQKBJaVI%2FMsM%2BuFUlttWcSmS7mzQoN%2Be0tzvPFZg2Y"</span> reload=“<span class="number">1</span>”&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>在浏览器中执行后访问 discus已保持登陆状态！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;为了丰富员工业余生活，增多交流机会，于是在公司搭建了论坛方便大家灌水，目前公司中企业级应用是基于JAVAEE的产品，论坛选用了比较受欢迎的Discuz 3.2, 为了避免二次登陆使用单点登陆解决，虽然查找了各种资料做集成，但是其中还是遇到了些问题，翻墙发现了：&lt;br&gt;&lt;a 
      
    
    </summary>
    
      <category term="其他" scheme="http://yao.com/categories/%E5%85%B6%E4%BB%96/"/>
    
      <category term="论坛" scheme="http://yao.com/categories/%E5%85%B6%E4%BB%96/%E8%AE%BA%E5%9D%9B/"/>
    
    
      <category term="java" scheme="http://yao.com/tags/java/"/>
    
      <category term="web" scheme="http://yao.com/tags/web/"/>
    
      <category term="discuz" scheme="http://yao.com/tags/discuz/"/>
    
      <category term="php" scheme="http://yao.com/tags/php/"/>
    
      <category term="单点登录" scheme="http://yao.com/tags/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建GitHub个人博客系统</title>
    <link href="http://yao.com/2016/09/20/160920-Hexo%E6%90%AD%E5%BB%BAGitHub%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/"/>
    <id>http://yao.com/2016/09/20/160920-Hexo搭建GitHub个人博客系统/</id>
    <published>2016-09-20T07:40:21.000Z</published>
    <updated>2018-11-28T06:39:05.426Z</updated>
    
    <content type="html"><![CDATA[<p>作为一名征战于IT行业多年的程序猴，之前都本着拿来主义的原则，吸收互联网上各种知识，资料文档，很少写过博文分享，真是惭愧，想来也是本人比较懒得原因，最近突然心血来潮，写点什么供大家分享也是极好的，先就将Hexo个人博客搭建于GitHub上作一记录，给想要搭建个人博客的宝宝们一个参考，文采有限，凑合着看吧。</p><h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><p>hexo是一款基于Node.js的静态博客框架。目前在GitHub上已有12121 star 和 1953 fork。</p><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p>Git是神马，Git是一个开源的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。……不用啰嗦了百度上多有，我们的博客系统是开源与GitHub上的，以及我们最终部署在GitHub上，需要用到Git这个工具。<br>下载对应的系统的版本安装包，我这边以window为例，下载地址：<a href="https://git-scm.com/downloads/" target="_blank" rel="noopener">https://git-scm.com/downloads/</a> 下载到git-xxx.exe安装包双击安装 下一步…下一步…<br>安装完验证Git是否安装正确，cmd打开dos窗口，输入：git –version<br>是否能打印出git版本，正常输出表示安装成功！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\peekay&gt; git --version</span><br><span class="line">  git version2.9.0.windows.1</span><br></pre></td></tr></table></figure><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。Node.js 的包管理器 npm，是全球最大的开源库生态系统。<br>hexo是一款基于Node.js的静态博客框架，显然需要Node.js的支持<br>登陆Node.js中文网地址：<a href="http://nodejs.cn/" target="_blank" rel="noopener">http://nodejs.cn/</a> 下载对应系统版本，双击安装 下一步…<br>安装完成，cmd打开dos窗口，输入：node -v 正常输出表示安装成功！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\peekay&gt; node -v</span><br><span class="line">   v4.4.7</span><br></pre></td></tr></table></figure><h2 id="注册GitHub账号及设置"><a href="#注册GitHub账号及设置" class="headerlink" title="注册GitHub账号及设置"></a>注册GitHub账号及设置</h2><p>登陆GitHub官网 <a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a> 有账号的使用账号登陆，没有的创建一个，具体不啰嗦，网上教程一堆，下一步下一步注册完成。<br><img src="http://static.nsoft.vip/16-9-19-23595497.jpg" alt=""></p><h3 id="一、设置git的username，email-打开Git目录下的Git-Bash，输入："><a href="#一、设置git的username，email-打开Git目录下的Git-Bash，输入：" class="headerlink" title="一、设置git的username，email,打开Git目录下的Git Bash，输入："></a>一、设置git的username，email,打开Git目录下的Git Bash，输入：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"peekay"</span></span><br><span class="line"></span><br><span class="line">$ git config --global user.email <span class="string">"peekay@sina.cn"</span></span><br></pre></td></tr></table></figure><h3 id="二、生成秘钥"><a href="#二、生成秘钥" class="headerlink" title="二、生成秘钥"></a>二、生成秘钥</h3><p>在Git Bash 中输入: ssh-keygen 一路回车</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/c/Users/peeka/.ssh/id_rsa):</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /c/Users/peeka/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /c/Users/peeka/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:u7Gm0/gYNWECusxcTmryX9BKNeGMUaFmVq3a/7Gjc4U peeka@DESKTOP-ANIM9KS</span><br><span class="line">The key<span class="string">'s randomart image is:</span></span><br><span class="line"><span class="string">+---[RSA 2048]----+</span></span><br><span class="line"><span class="string">|    o.=o         |</span></span><br><span class="line"><span class="string">|   . O ..        |</span></span><br><span class="line"><span class="string">|  . O *.o        |</span></span><br><span class="line"><span class="string">| + X o.+ .       |</span></span><br><span class="line"><span class="string">|. B +o. S  .     |</span></span><br><span class="line"><span class="string">| + ..o.. oE .    |</span></span><br><span class="line"><span class="string">|  . . o+o ..     |</span></span><br><span class="line"><span class="string">|   . .oo=+oo     |</span></span><br><span class="line"><span class="string">|    . o===o.     |</span></span><br><span class="line"><span class="string">+----[SHA256]-----+</span></span><br></pre></td></tr></table></figure><p>最终的秘钥文件生成在用户家目录下的.ssh目录下。</p><h3 id="三、将秘钥添加至GitHub"><a href="#三、将秘钥添加至GitHub" class="headerlink" title="三、将秘钥添加至GitHub"></a>三、将秘钥添加至GitHub</h3><p>用之前注册的账号登陆GitHub,Settings-&gt;SSH and GPG keys 点击 New SSH key, 将上一步家目录下.ssh/id_rsa.pub中的内容全部拷贝贴到key栏中，保存<br><img src="http://static.nsoft.vip/16-9-19-61999649.jpg" alt=""></p><h3 id="四、新建仓库用于存放我们的博客"><a href="#四、新建仓库用于存放我们的博客" class="headerlink" title="四、新建仓库用于存放我们的博客"></a>四、新建仓库用于存放我们的博客</h3><p>Createa new repository 这里以 我们的用户名.github.io<br><img src="http://static.nsoft.vip/16-9-19-35826037.jpg" alt=""></p><h2 id="安装Hexo程序"><a href="#安装Hexo程序" class="headerlink" title="安装Hexo程序"></a>安装Hexo程序</h2><p>进入Hexo官网 <a href="http://hexo.io" target="_blank" rel="noopener">http://hexo.io</a> 官网有详细的安装教程，若访问慢或压根打不开，还是国内你懂得，选择一个路径这里我们以E:为例 cmd到E盘，依次执行如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\peekay&gt;e:</span><br><span class="line">E:\&gt;npm install hexo-cli -g</span><br><span class="line">E:\&gt;hexo init blog</span><br><span class="line">E:\&gt;<span class="built_in">cd</span> blog</span><br><span class="line">E:\blog&gt;npm install</span><br><span class="line">E:\blog&gt;hexo server</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://127.0.0.1:4000/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure><p>浏览器访问：<a href="http://127.0.0.1:4000" target="_blank" rel="noopener">http://127.0.0.1:4000</a> 表示Hexo安装成功<br><img src="http://static.nsoft.vip/16-9-19-1580053.jpg" alt=""></p><h2 id="将Hexo发布到GitHub"><a href="#将Hexo发布到GitHub" class="headerlink" title="将Hexo发布到GitHub"></a>将Hexo发布到GitHub</h2><h3 id="配置Hexo"><a href="#配置Hexo" class="headerlink" title="配置Hexo"></a>配置Hexo</h3><p>编辑器打开E盘blog目录下的_config.yml文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site  设置站点标题 语言等信息</span></span><br><span class="line">title: Alex.Yao<span class="string">'s Blog</span></span><br><span class="line"><span class="string">subtitle:</span></span><br><span class="line"><span class="string">description:</span></span><br><span class="line"><span class="string">author: Alex.Yao</span></span><br><span class="line"><span class="string">language: zh-Hans</span></span><br><span class="line"><span class="string">timezone:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">.....</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># Deployment 配置git部署信息</span></span><br><span class="line"><span class="string">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">deploy:</span></span><br><span class="line"><span class="string">type: git</span></span><br><span class="line"><span class="string">repository: https://github.com/yaonew/yaonew.github.io.git</span></span><br><span class="line"><span class="string">branch: master</span></span><br></pre></td></tr></table></figure><h3 id="部署Hexo-至GitHub"><a href="#部署Hexo-至GitHub" class="headerlink" title="部署Hexo 至GitHub"></a>部署Hexo 至GitHub</h3><p>cmd进入E盘blog目录 依次执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">E:\blog&gt;hexo clean</span><br><span class="line">INFO Deleted database.</span><br><span class="line">E:\blog&gt;hexo generate</span><br><span class="line">    .....</span><br><span class="line">E:\blog&gt;hexo deploy</span><br></pre></td></tr></table></figure><p>OK这样我们的博客系统就已经部署到GitHub上了，设置GitHub Pages<br><img src="http://static.nsoft.vip/16-9-19-10705187.jpg" alt=""><br><img src="http://static.nsoft.vip/16-9-19-53990555.jpg" alt=""><br>这样我们的博客就可以通过 <a href="http://用户名.github.io访问了。" target="_blank" rel="noopener">http://用户名.github.io访问了。</a></p><p>更换博客模版及相关的设置，当你如上的设置都OK的话，应该不难了，有机会我再补充有关模版更换设置等。就这样了，有什么问题可以给我留言。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;作为一名征战于IT行业多年的程序猴，之前都本着拿来主义的原则，吸收互联网上各种知识，资料文档，很少写过博文分享，真是惭愧，想来也是本人比较懒得原因，最近突然心血来潮，写点什么供大家分享也是极好的，先就将Hexo个人博客搭建于GitHub上作一记录，给想要搭建个人博客的宝宝们
      
    
    </summary>
    
      <category term="其他" scheme="http://yao.com/categories/%E5%85%B6%E4%BB%96/"/>
    
      <category term="博客" scheme="http://yao.com/categories/%E5%85%B6%E4%BB%96/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="GitHub" scheme="http://yao.com/tags/GitHub/"/>
    
      <category term="hexo" scheme="http://yao.com/tags/hexo/"/>
    
      <category term="Git" scheme="http://yao.com/tags/Git/"/>
    
      <category term="Node.js" scheme="http://yao.com/tags/Node-js/"/>
    
      <category term="博客" scheme="http://yao.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yao.com/2016/09/16/160916-hello-world/"/>
    <id>http://yao.com/2016/09/16/160916-hello-world/</id>
    <published>2016-09-16T12:56:20.000Z</published>
    <updated>2018-11-28T06:05:27.632Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
